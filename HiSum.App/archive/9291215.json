{"id":9291215,"created_at":"2015-03-30T17:50:27Z","author":"luu","title":"Choose Boring Technology","url":"http://mcfunley.com/choose-boring-technology","text":null,"points":397,"children":[{"id":9292290,"key":9292290,"title":"<p>Postgres is definitely not boring as there is a lot of interesting stuff happening with this database.  I think the author here should really be making the distinction between sexy &amp; unsexy.</p>","created_at":"2015-03-30T20:19:46Z","author":"shangxiao","text":"<p>Postgres is definitely not boring as there is a lot of interesting stuff happening with this database.  I think the author here should really be making the distinction between sexy &amp; unsexy.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292803,"key":9292803,"title":"<p>great article, however the Jerry Seinfeld gif was bit annoying. Although must admit it is funny and probably appropriate ;-) it was hard to read anything around it. Could only concentrate on the content when the gif was outside the screen.</p>","created_at":"2015-03-30T21:41:15Z","author":"ask5","text":"<p>great article, however the Jerry Seinfeld gif was bit annoying. Although must admit it is funny and probably appropriate ;-) it was hard to read anything around it. Could only concentrate on the content when the gif was outside the screen.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291530,"key":9291530,"title":"<p>I understand how someone might believe in &quot;innovation tokens,&quot; but it&#x27;s really just a confused way to look at ROI. There&#x27;s no inherent cost in some innovation, though. If our programmers already know an &quot;innovative&quot; programming method, there&#x27;s no cost in doing things that way.</p><p>The author seems to be conflating the cost of innovation with the cost of doing something you&#x27;re less familiar with, which are not necessarily the same things. The risk of chasing shiny new objects is real, but sometimes those shiny objects can actually <i></i>reduce<i></i> costs and time spent to accomplish a goal (like a MVP or new version).</p><p>Sometimes it&#x27;s worth innovating if you already have experience in the area. Sometimes it&#x27;s worth innovating even if you have to learn and try new things. Sometimes the time&#x2F;monetary cost of innovation is 0, and sometimes it&#x27;s so high that you shouldn&#x27;t innovate even if it improves your product.</p><p>This idea of limited innovation resulting in cumulative costs is overly simplistic. The smart founder will recognize the difference between innovations that will yield net returns and those that won&#x27;t.</p>","created_at":"2015-03-30T18:32:02Z","author":"ignostic","text":"<p>I understand how someone might believe in &quot;innovation tokens,&quot; but it&#x27;s really just a confused way to look at ROI. There&#x27;s no inherent cost in some innovation, though. If our programmers already know an &quot;innovative&quot; programming method, there&#x27;s no cost in doing things that way.</p><p>The author seems to be conflating the cost of innovation with the cost of doing something you&#x27;re less familiar with, which are not necessarily the same things. The risk of chasing shiny new objects is real, but sometimes those shiny objects can actually <i></i>reduce<i></i> costs and time spent to accomplish a goal (like a MVP or new version).</p><p>Sometimes it&#x27;s worth innovating if you already have experience in the area. Sometimes it&#x27;s worth innovating even if you have to learn and try new things. Sometimes the time&#x2F;monetary cost of innovation is 0, and sometimes it&#x27;s so high that you shouldn&#x27;t innovate even if it improves your product.</p><p>This idea of limited innovation resulting in cumulative costs is overly simplistic. The smart founder will recognize the difference between innovations that will yield net returns and those that won&#x27;t.</p>","parent_id":9291215,"points":0,"children":[{"id":9291808,"key":9291808,"title":"<p>The problem is that &quot;you&quot; is not a person, &quot;you&quot; is every person who will ever work on the code in the future.  And &quot;innovation&quot; isn&#x27;t &quot;the code you are writing now&quot;, &quot;innovation&quot; is &quot;the code you are writing now, and next year, and the third-party library you want to integrate in 6 months, and the unit tests you don&#x27;t have time for now but will become critical in 2-3 years as you become unable to ship working software, and the bug you&#x27;ll spend a month working on because nobody has ever encountered it before.&quot;</p><p>Yes, you can look at this in terms of ROI.  The author&#x27;s point is that engineers - particularly ones who have never scaled &amp; maintained a system over years and millions of users - consistently underweight the problems that they&#x27;ve never encountered before.  With boring tech, <i>other</i> people have encountered them, and solved them, and you can Google for the answer or pull in a library.  With bleeding-edge stuff, when you run into one of these, you have to drop everything you&#x27;re doing and fix it, because nobody else will.</p>","created_at":"2015-03-30T19:06:51Z","author":"nostrademons","text":"<p>The problem is that &quot;you&quot; is not a person, &quot;you&quot; is every person who will ever work on the code in the future.  And &quot;innovation&quot; isn&#x27;t &quot;the code you are writing now&quot;, &quot;innovation&quot; is &quot;the code you are writing now, and next year, and the third-party library you want to integrate in 6 months, and the unit tests you don&#x27;t have time for now but will become critical in 2-3 years as you become unable to ship working software, and the bug you&#x27;ll spend a month working on because nobody has ever encountered it before.&quot;</p><p>Yes, you can look at this in terms of ROI.  The author&#x27;s point is that engineers - particularly ones who have never scaled &amp; maintained a system over years and millions of users - consistently underweight the problems that they&#x27;ve never encountered before.  With boring tech, <i>other</i> people have encountered them, and solved them, and you can Google for the answer or pull in a library.  With bleeding-edge stuff, when you run into one of these, you have to drop everything you&#x27;re doing and fix it, because nobody else will.</p>","parent_id":9291530,"points":0,"children":[]},{"id":9292120,"key":9292120,"title":"<p>&gt; &quot;This idea of limited innovation resulting in cumulative costs is overly simplistic. The smart founder will recognize the difference between innovations that will yield net returns and those that won&#x27;t.&quot;</p><p>I agree with you completely. Furthermore, I&#x27;d add that the view on maintenance is too simplistic also. Effective maintenance requires more than just a tech stack where the limitations are known, you&#x27;ll also want something testable and refactorable. Ballooning code bases are a real problem, sometimes the smart move is to clean up the cruft. If you&#x27;re smart about integrating new tech into your stack there&#x27;s no reason you can end up with a solution which is both more robust and efficient.</p><p>Furthermore, there&#x27;s the whole scaling issue. Perhaps the mode du jour is just to assume increased server costs (regardless of where they&#x27;re hosted) are just a necessary part of scaling a website to more users, but rethinking your tech stack can help keep these costs under control. Perhaps this is a decision that can wait until you have a decent userbase, but it&#x27;s still a good reason to be open-minded about what benefits a new solution could bring.</p>","created_at":"2015-03-30T19:52:12Z","author":"ZenoArrow","text":"<p>&gt; &quot;This idea of limited innovation resulting in cumulative costs is overly simplistic. The smart founder will recognize the difference between innovations that will yield net returns and those that won&#x27;t.&quot;</p><p>I agree with you completely. Furthermore, I&#x27;d add that the view on maintenance is too simplistic also. Effective maintenance requires more than just a tech stack where the limitations are known, you&#x27;ll also want something testable and refactorable. Ballooning code bases are a real problem, sometimes the smart move is to clean up the cruft. If you&#x27;re smart about integrating new tech into your stack there&#x27;s no reason you can end up with a solution which is both more robust and efficient.</p><p>Furthermore, there&#x27;s the whole scaling issue. Perhaps the mode du jour is just to assume increased server costs (regardless of where they&#x27;re hosted) are just a necessary part of scaling a website to more users, but rethinking your tech stack can help keep these costs under control. Perhaps this is a decision that can wait until you have a decent userbase, but it&#x27;s still a good reason to be open-minded about what benefits a new solution could bring.</p>","parent_id":9291530,"points":0,"children":[{"id":9292928,"key":9292928,"title":"<p>&gt; &quot;no reason you can end up with a solution&quot;</p><p>Should be... &quot;no reason you can&#x27;t end up with a solution&quot;</p>","created_at":"2015-03-30T22:03:48Z","author":"ZenoArrow","text":"<p>&gt; &quot;no reason you can end up with a solution&quot;</p><p>Should be... &quot;no reason you can&#x27;t end up with a solution&quot;</p>","parent_id":9292120,"points":0,"children":[]}]}]},{"id":9293586,"key":9293586,"title":"","created_at":"2015-03-31T00:27:13Z","author":"erichmond","text":"","parent_id":9291215,"points":0,"children":[]},{"id":9293588,"key":9293588,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]},{"id":9291803,"key":9291803,"title":"<p>This also makes me think of the problem of legacy code. Once you&#x27;ve written an app, it&#x27;s feature complete, and it&#x27;s profitable, expending effort to rewrite it in a new tech is not only a questionable value proposition, it can be actively dangerous. Replacing ugly but works with beautiful but fails is not good engineering.</p>","created_at":"2015-03-30T19:06:19Z","author":"beat","text":"<p>This also makes me think of the problem of legacy code. Once you&#x27;ve written an app, it&#x27;s feature complete, and it&#x27;s profitable, expending effort to rewrite it in a new tech is not only a questionable value proposition, it can be actively dangerous. Replacing ugly but works with beautiful but fails is not good engineering.</p>","parent_id":9291215,"points":0,"children":[{"id":9293319,"key":9293319,"title":"<p>&quot;Replacing ugly but works with beautiful but fails is not good engineering.&quot;</p><p>Now as to marketing....</p>","created_at":"2015-03-30T23:23:26Z","author":"jqm","text":"<p>&quot;Replacing ugly but works with beautiful but fails is not good engineering.&quot;</p><p>Now as to marketing....</p>","parent_id":9291803,"points":0,"children":[]},{"id":9292021,"key":9292021,"title":"<p>Plus, if you&#x27;re going with some trendy new framework that emerged in the last month, chances are that when you do need maintenance, no-one&#x27;ll be around who wants to work on it.</p>","created_at":"2015-03-30T19:38:22Z","author":"xamuel","text":"<p>Plus, if you&#x27;re going with some trendy new framework that emerged in the last month, chances are that when you do need maintenance, no-one&#x27;ll be around who wants to work on it.</p>","parent_id":9291803,"points":0,"children":[]}]},{"id":9294109,"key":9294109,"title":"<p><a href=\"https:&#x2F;&#x2F;consul.io&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;consul.io&#x2F;</a> is mentioned as an &quot;exciting&quot; technology. What is a &quot;boring&quot; alternative for this... that is, a multi-datacenter, service discovery&#x2F;health-check&#x2F;config-distribution software that&#x27;ll &quot;just work&quot; ?</p>","created_at":"2015-03-31T02:56:21Z","author":"chetanahuja","text":"<p><a href=\"https:&#x2F;&#x2F;consul.io&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;consul.io&#x2F;</a> is mentioned as an &quot;exciting&quot; technology. What is a &quot;boring&quot; alternative for this... that is, a multi-datacenter, service discovery&#x2F;health-check&#x2F;config-distribution software that&#x27;ll &quot;just work&quot; ?</p>","parent_id":9291215,"points":0,"children":[{"id":9294437,"key":9294437,"title":"<p>You can try using DNS with dynamic zones as a simple service discovery mechanism (sharing one master with all your environments), but you&#x27;ll soon find out that:\n - healthchecking really is a good idea in service discovery\n - clients are awful about refreshing state from DNS\n - single-master systems are a bad idea in a large environment.\n - DNS replication is finicky; DNS caching is slow.</p><p>Puppet with puppetdb can sorta fill this gap, too, as long as you don&#x27;t need fast convergence (or fast puppet runs, if your puppetdb is more than a few milliseconds away from any of your nodes).</p><p>Consul may be new, but it&#x27;s built on really solid ideas and technologies. You can read papers[1][2] about the underlying technologies to get a sense for how Consul will fail. I&#x27;d like to think that counteracts some of the problems you get with newness.</p><p>[1] <a href=\"https:&#x2F;&#x2F;ramcloud.stanford.edu&#x2F;raft.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;ramcloud.stanford.edu&#x2F;raft.pdf</a>\n [2] <a href=\"https:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;~asdas&#x2F;research&#x2F;dsn02-swim.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;~asdas&#x2F;research&#x2F;dsn02-swim.pdf</a></p>","created_at":"2015-03-31T04:48:38Z","author":"meatmanek","text":"<p>You can try using DNS with dynamic zones as a simple service discovery mechanism (sharing one master with all your environments), but you&#x27;ll soon find out that:\n - healthchecking really is a good idea in service discovery\n - clients are awful about refreshing state from DNS\n - single-master systems are a bad idea in a large environment.\n - DNS replication is finicky; DNS caching is slow.</p><p>Puppet with puppetdb can sorta fill this gap, too, as long as you don&#x27;t need fast convergence (or fast puppet runs, if your puppetdb is more than a few milliseconds away from any of your nodes).</p><p>Consul may be new, but it&#x27;s built on really solid ideas and technologies. You can read papers[1][2] about the underlying technologies to get a sense for how Consul will fail. I&#x27;d like to think that counteracts some of the problems you get with newness.</p><p>[1] <a href=\"https:&#x2F;&#x2F;ramcloud.stanford.edu&#x2F;raft.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;ramcloud.stanford.edu&#x2F;raft.pdf</a>\n [2] <a href=\"https:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;~asdas&#x2F;research&#x2F;dsn02-swim.pdf\" rel=\"nofollow\">https:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;~asdas&#x2F;research&#x2F;dsn02-swim.pdf</a></p>","parent_id":9294109,"points":0,"children":[]}]},{"id":9291554,"key":9291554,"title":"<p>The site is currently down for me (503).  While we&#x27;re talking about boring technology, please consider hosting your blog on a static file host + CDN.  It will be faster, easier to maintain, and virtually impossible to take down.</p><p>[0] <a href=\"https:&#x2F;&#x2F;eager.io&#x2F;blog&#x2F;build-static-websites\" rel=\"nofollow\">https:&#x2F;&#x2F;eager.io&#x2F;blog&#x2F;build-static-websites</a></p>","created_at":"2015-03-30T18:34:24Z","author":"_kerbal_","text":"<p>The site is currently down for me (503).  While we&#x27;re talking about boring technology, please consider hosting your blog on a static file host + CDN.  It will be faster, easier to maintain, and virtually impossible to take down.</p><p>[0] <a href=\"https:&#x2F;&#x2F;eager.io&#x2F;blog&#x2F;build-static-websites\" rel=\"nofollow\">https:&#x2F;&#x2F;eager.io&#x2F;blog&#x2F;build-static-websites</a></p>","parent_id":9291215,"points":0,"children":[{"id":9292132,"key":9292132,"title":"<p>I see people recommend static sites in general, but I&#x27;ve recently done some research and couldn&#x27;t find a static site generator that can give me a WYSIWYG editor in my browser. What I need is a blog that lets me edit posts from a PC, a tablet, or a phone, including picture uploads and one-click publishing. Everything I found either left the editing portion up to the user or said &quot;just use WinSCP to upload your HTML&#x2F;markdown&quot;.</p><p>I just went with Wordpress. My personal blog is not my job, I just want to write down my thoughts. What specific technology would you recommend to generate a static blog with a WYSWYG editor and picture uploads, on my own server (not S3 or some proprietary paid hosting)?</p>","created_at":"2015-03-30T19:54:09Z","author":"freehunter","text":"<p>I see people recommend static sites in general, but I&#x27;ve recently done some research and couldn&#x27;t find a static site generator that can give me a WYSIWYG editor in my browser. What I need is a blog that lets me edit posts from a PC, a tablet, or a phone, including picture uploads and one-click publishing. Everything I found either left the editing portion up to the user or said &quot;just use WinSCP to upload your HTML&#x2F;markdown&quot;.</p><p>I just went with Wordpress. My personal blog is not my job, I just want to write down my thoughts. What specific technology would you recommend to generate a static blog with a WYSWYG editor and picture uploads, on my own server (not S3 or some proprietary paid hosting)?</p>","parent_id":9291554,"points":0,"children":[{"id":9292747,"key":9292747,"title":"<p>You could try to use Wordpress for generating a static blog [0]. ;)</p><p>More seriously, I work in vim+git all the time, so managing my blog with it feels natural to me. Editing in my favorite editor is more important than drag&amp;drop image upload for me.</p><p>[0] <a href=\"https:&#x2F;&#x2F;wordpress.org&#x2F;plugins&#x2F;really-static&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;wordpress.org&#x2F;plugins&#x2F;really-static&#x2F;</a></p>","created_at":"2015-03-30T21:29:40Z","author":"qznc","text":"<p>You could try to use Wordpress for generating a static blog [0]. ;)</p><p>More seriously, I work in vim+git all the time, so managing my blog with it feels natural to me. Editing in my favorite editor is more important than drag&amp;drop image upload for me.</p><p>[0] <a href=\"https:&#x2F;&#x2F;wordpress.org&#x2F;plugins&#x2F;really-static&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;wordpress.org&#x2F;plugins&#x2F;really-static&#x2F;</a></p>","parent_id":9292132,"points":0,"children":[{"id":9293084,"key":9293084,"title":"<p>Just like the author, I don&#x27;t have time to learn the ins and outs of new &quot;local optima&quot; technologies all the time. I want a static site generator that &quot;just works&quot;. So yes, give me a Wordpress-style GUI for creating a blog, then &quot;compile&quot; it to a static site, then deploy.</p><p>Seems like all the static site generators have lots of directory structure conventions and hoops to jump through for simple things like pagination and dates.</p>","created_at":"2015-03-30T22:33:18Z","author":"worklogin","text":"<p>Just like the author, I don&#x27;t have time to learn the ins and outs of new &quot;local optima&quot; technologies all the time. I want a static site generator that &quot;just works&quot;. So yes, give me a Wordpress-style GUI for creating a blog, then &quot;compile&quot; it to a static site, then deploy.</p><p>Seems like all the static site generators have lots of directory structure conventions and hoops to jump through for simple things like pagination and dates.</p>","parent_id":9292747,"points":0,"children":[{"id":9293302,"key":9293302,"title":"<p>And at this point we are really talking about what fits naturally in our own hands. I use a documentation tool (mkdocs) for my blog, but that&#x27;s because like GP, I prefer working in git+vim.</p>","created_at":"2015-03-30T23:19:48Z","author":"afarrell","text":"<p>And at this point we are really talking about what fits naturally in our own hands. I use a documentation tool (mkdocs) for my blog, but that&#x27;s because like GP, I prefer working in git+vim.</p>","parent_id":9293084,"points":0,"children":[]}]}]}]},{"id":9291756,"key":9291756,"title":"<p>How snarky. According to the author:</p><p><pre><code>    I&#x27;m fighting quota issues with my dumb host. I assure you migrating to something better is not my day job.\n</code></pre>\n<a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9291719\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9291719</a></p>","created_at":"2015-03-30T18:59:56Z","author":"benihana","text":"<p>How snarky. According to the author:</p><p><pre><code>    I&#x27;m fighting quota issues with my dumb host. I assure you migrating to something better is not my day job.\n</code></pre>\n<a href=\"https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9291719\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9291719</a></p>","parent_id":9291554,"points":0,"children":[]}]},{"id":9291815,"key":9291815,"title":"<p>This insightful article should be sub-titled &quot;The difference between seeing things from a company-centric vs. developer-centric POV.&quot;</p><p>My hats of to its author for having the courage to write it.</p>","created_at":"2015-03-30T19:08:27Z","author":"cubano","text":"<p>This insightful article should be sub-titled &quot;The difference between seeing things from a company-centric vs. developer-centric POV.&quot;</p><p>My hats of to its author for having the courage to write it.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292589,"key":9292589,"title":"<p>By linking Aphyr&#x27;s Redis article &quot;call me maybe, Redis&quot; as an example of possible troubles with new technologies, the author of this article shows that he actually does not understand very well the failure modes of MySQL itself, which are identical to the ones of Redis failover (and of every other master-slave system with asynchronous replication, more or less). This in theory contradicts the whole article, but actually I think the idea <i>happens</i> to be reasonable, but formulated not very well. The point is not what is new and what is old, is to switch to new technologies without a good reason which is a useless risk. If you analyze the failure modes, and the strenghts, of what you used in the past, and there is something new that performs much better, IF you are a good programmer, you can analyze, and test for a few days, read the doc, check some code, of something new, and understand if it is a better fit. This is why it&#x27;s always the set of the best programmers that adopt new technologies that later turn into the next &quot;obvious&quot; stack, they are brave, not because they are crazy, because they can analyze something regardless of the fact is new or old.</p>","created_at":"2015-03-30T21:01:35Z","author":"antirez","text":"<p>By linking Aphyr&#x27;s Redis article &quot;call me maybe, Redis&quot; as an example of possible troubles with new technologies, the author of this article shows that he actually does not understand very well the failure modes of MySQL itself, which are identical to the ones of Redis failover (and of every other master-slave system with asynchronous replication, more or less). This in theory contradicts the whole article, but actually I think the idea <i>happens</i> to be reasonable, but formulated not very well. The point is not what is new and what is old, is to switch to new technologies without a good reason which is a useless risk. If you analyze the failure modes, and the strenghts, of what you used in the past, and there is something new that performs much better, IF you are a good programmer, you can analyze, and test for a few days, read the doc, check some code, of something new, and understand if it is a better fit. This is why it&#x27;s always the set of the best programmers that adopt new technologies that later turn into the next &quot;obvious&quot; stack, they are brave, not because they are crazy, because they can analyze something regardless of the fact is new or old.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292083,"key":9292083,"title":"<p>This is extremely good and betrays the originator&#x27;s experience.</p><p>Another way to think about it is this: You get to change three axes in a product: new underlying technology, new product, or new process.</p><p>- Choosing one will allow you to progress with likely success.</p><p>- Choosing two opens yourself up to non-trivial risk.</p><p>- Choosing three means you will likely fail in this project.</p><p>There&#x27;s a nifty talk by Steve McConnell about Software Engineering Judgement - <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PFcHX0Menno\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PFcHX0Menno</a> - that goes into this kind of analysis.</p><p>You can debate which axes matter - you can debate the weighing and scaling of them - but you can&#x27;t get away from the conclusion that &quot;pushing all your risk boundaries at the same time equals failure&quot;. As a matter of fact, this is structurally identical to the famous &quot;fast, good, cheap&quot; triangle.</p><p>n.b., this analysis really starts hitting home in multi-team environments, say, over 50 engineers.</p>","created_at":"2015-03-30T19:47:17Z","author":"pnathan","text":"<p>This is extremely good and betrays the originator&#x27;s experience.</p><p>Another way to think about it is this: You get to change three axes in a product: new underlying technology, new product, or new process.</p><p>- Choosing one will allow you to progress with likely success.</p><p>- Choosing two opens yourself up to non-trivial risk.</p><p>- Choosing three means you will likely fail in this project.</p><p>There&#x27;s a nifty talk by Steve McConnell about Software Engineering Judgement - <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PFcHX0Menno\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PFcHX0Menno</a> - that goes into this kind of analysis.</p><p>You can debate which axes matter - you can debate the weighing and scaling of them - but you can&#x27;t get away from the conclusion that &quot;pushing all your risk boundaries at the same time equals failure&quot;. As a matter of fact, this is structurally identical to the famous &quot;fast, good, cheap&quot; triangle.</p><p>n.b., this analysis really starts hitting home in multi-team environments, say, over 50 engineers.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292091,"key":9292091,"title":"<p>I&#x27;ve always had a soft spot for the choose boring argument, but for some problems boring tech is a poor match. Rather, I try to look at each problem objectively - decide what I want out of a solution, and select accordingly.</p>","created_at":"2015-03-30T19:48:09Z","author":"slantedview","text":"<p>I&#x27;ve always had a soft spot for the choose boring argument, but for some problems boring tech is a poor match. Rather, I try to look at each problem objectively - decide what I want out of a solution, and select accordingly.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292349,"key":9292349,"title":"<p>I&#x27;ve always attributed &quot;known knowns&quot; and &quot;unknown knowns&quot; etc to Nassim Taleb, not Rumsfeld.</p>","created_at":"2015-03-30T20:29:22Z","author":"fixxer","text":"<p>I&#x27;ve always attributed &quot;known knowns&quot; and &quot;unknown knowns&quot; etc to Nassim Taleb, not Rumsfeld.</p>","parent_id":9291215,"points":0,"children":[{"id":9292706,"key":9292706,"title":"<p>Yes, but how else could the author get a political dig into the article?</p><p>A lazy writing blemish on an otherwise good article.</p>","created_at":"2015-03-30T21:23:55Z","author":"MrZongle2","text":"<p>Yes, but how else could the author get a political dig into the article?</p><p>A lazy writing blemish on an otherwise good article.</p>","parent_id":9292349,"points":0,"children":[{"id":9292810,"key":9292810,"title":"<p>Not really, first hit on Google for &quot;unknown unknowns&quot; is this wikipedia article which immediately mentions Rumsfeld:</p><p><a href=\"http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;There_are_known_knowns\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;There_are_known_knowns</a></p>","created_at":"2015-03-30T21:42:38Z","author":"gfodor","text":"<p>Not really, first hit on Google for &quot;unknown unknowns&quot; is this wikipedia article which immediately mentions Rumsfeld:</p><p><a href=\"http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;There_are_known_knowns\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;There_are_known_knowns</a></p>","parent_id":9292706,"points":0,"children":[]}]}]},{"id":9292862,"key":9292862,"title":"<p>This article is a good <i>starting point</i> to talk about technology choices. But there are many issues with applying the advice in the real world.</p><p>First, he is intertwining two seperate issues, limiting tech choices in an organisation, and incorporating new technologies. Keep in mind that you can have seperate strategies for both.</p><p>Secondly, there is no notion as to how big a change a token is worth. Obviously switching languages is a much bigger change than switching caching libraries.</p><p>Thirdly, there is no mention of project size. Should a 3 month project get the same tokens as a two year project? This year we have created ~300 microservices. If each was allowed 3 tokens we would have 900 new tech changes in this year alone. That&#x27;s unmanageable.</p><p>Fourthly, what is your organisational strategy and culture? If an engineer prototypes in a new language is that a problem because it is seen as wasteful? Perhaps it is something that will make the other devs jealous? Or is it considered an investment in the company and a risk mitigation strategy? Do you have the kind of engineers and tech leads who will do a lot of this prototyping and experimentation on their own time?</p>","created_at":"2015-03-30T21:52:00Z","author":"sheepmullet","text":"<p>This article is a good <i>starting point</i> to talk about technology choices. But there are many issues with applying the advice in the real world.</p><p>First, he is intertwining two seperate issues, limiting tech choices in an organisation, and incorporating new technologies. Keep in mind that you can have seperate strategies for both.</p><p>Secondly, there is no notion as to how big a change a token is worth. Obviously switching languages is a much bigger change than switching caching libraries.</p><p>Thirdly, there is no mention of project size. Should a 3 month project get the same tokens as a two year project? This year we have created ~300 microservices. If each was allowed 3 tokens we would have 900 new tech changes in this year alone. That&#x27;s unmanageable.</p><p>Fourthly, what is your organisational strategy and culture? If an engineer prototypes in a new language is that a problem because it is seen as wasteful? Perhaps it is something that will make the other devs jealous? Or is it considered an investment in the company and a risk mitigation strategy? Do you have the kind of engineers and tech leads who will do a lot of this prototyping and experimentation on their own time?</p>","parent_id":9291215,"points":0,"children":[{"id":9292946,"key":9292946,"title":"<p>Unfortunately I think the answer to all of them is, &#x27;it depends&#x27;. How much inertia does change get in your organisation? That will help place value on the tokens.</p><p>For your third point specifically, I think taking a pragmatic view is the best. You mentioned you created ~300 new microservices this year. I imagine they&#x27;re all based on the same pattern, so perhaps your tokens will apply to that pattern rather than each individual project (eg. you get to change the stack for future microservivces). On the other hand, at at least one new service per day, it&#x27;s obviously pretty efficient for you, so consider why you&#x27;d change it unless necessary?</p>","created_at":"2015-03-30T22:07:17Z","author":"NeutronBoy","text":"<p>Unfortunately I think the answer to all of them is, &#x27;it depends&#x27;. How much inertia does change get in your organisation? That will help place value on the tokens.</p><p>For your third point specifically, I think taking a pragmatic view is the best. You mentioned you created ~300 new microservices this year. I imagine they&#x27;re all based on the same pattern, so perhaps your tokens will apply to that pattern rather than each individual project (eg. you get to change the stack for future microservivces). On the other hand, at at least one new service per day, it&#x27;s obviously pretty efficient for you, so consider why you&#x27;d change it unless necessary?</p>","parent_id":9292862,"points":0,"children":[]}]},{"id":9292364,"key":9292364,"title":"<p>Hah, I&#x27;m right now in the process of helping another group move from CVS to Git.</p><p>Um. ;)</p>","created_at":"2015-03-30T20:31:59Z","author":"AceJohnny2","text":"<p>Hah, I&#x27;m right now in the process of helping another group move from CVS to Git.</p><p>Um. ;)</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291345,"key":9291345,"title":"<p>The &quot;innovation tokens&quot; concept expands even past technology.</p><p>Want to innovate in the way your board is structured or remove standard protections from the term sheet? Or even set up your Twitter account in this never-before-seen way? Want to remove the idea of management, or rethink the way offices work? You lose an innovation token.</p>","created_at":"2015-03-30T18:05:20Z","author":"austenallred","text":"<p>The &quot;innovation tokens&quot; concept expands even past technology.</p><p>Want to innovate in the way your board is structured or remove standard protections from the term sheet? Or even set up your Twitter account in this never-before-seen way? Want to remove the idea of management, or rethink the way offices work? You lose an innovation token.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291603,"key":9291603,"title":"<p>Using multiple tokens does slow things down, but it is sometimes worth it if you get a bit lucky and make good choices.</p><p>These days I generally optimize for fewer lines of code (boilerplate or not), as few dependencies as possible, and a general respect for the CPU cycles needed to run it.</p>","created_at":"2015-03-30T18:40:32Z","author":"grandalf","text":"<p>Using multiple tokens does slow things down, but it is sometimes worth it if you get a bit lucky and make good choices.</p><p>These days I generally optimize for fewer lines of code (boilerplate or not), as few dependencies as possible, and a general respect for the CPU cycles needed to run it.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291604,"key":9291604,"title":"<p>None of the technologies you mentioned are boring, pick the right technology for the job and don&#x27;t worry about what others are using.</p>","created_at":"2015-03-30T18:40:38Z","author":"nijiko","text":"<p>None of the technologies you mentioned are boring, pick the right technology for the job and don&#x27;t worry about what others are using.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291607,"key":9291607,"title":"<p>Ya, like an elastic cloud to host your blog</p>","created_at":"2015-03-30T18:41:09Z","author":"elchief","text":"<p>Ya, like an elastic cloud to host your blog</p>","parent_id":9291215,"points":0,"children":[]},{"id":9293661,"key":9293661,"title":"<p>These kinds of articles are a bit foolish.</p><p>The reality is, you need senior engineers, people who have built systems before, and are over the stage of their career where they just want to build stuff for fun, and are actually focused on building systems that provide value for the companies they work for.</p><p>It&#x27;s not about new tech, or old tech, or boring tech, or exciting tech. It&#x27;s about looking at the specific problem at hand and making an assessment about which technologies make sense to use.</p><p>As much as our industry doesn&#x27;t want to admit, there are advantages to having real work experience.</p>","created_at":"2015-03-31T00:43:55Z","author":"erichmond","text":"<p>These kinds of articles are a bit foolish.</p><p>The reality is, you need senior engineers, people who have built systems before, and are over the stage of their career where they just want to build stuff for fun, and are actually focused on building systems that provide value for the companies they work for.</p><p>It&#x27;s not about new tech, or old tech, or boring tech, or exciting tech. It&#x27;s about looking at the specific problem at hand and making an assessment about which technologies make sense to use.</p><p>As much as our industry doesn&#x27;t want to admit, there are advantages to having real work experience.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292639,"key":9292639,"title":"<p>If people were thinking like this guy, we would still be living in caves.</p>","created_at":"2015-03-30T21:11:26Z","author":"m0skit0","text":"<p>If people were thinking like this guy, we would still be living in caves.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292897,"key":9292897,"title":"<p>The rule of thumb I used to have (which is a little dated now but imagine 5-10 years ago):</p><p>&quot; Any server should have only one thing that is not installed via the default OS packages &quot;</p><p>So you could have one weird bleeding edge version of your language or some unusual daemon that nobody else used but that was it. The idea was the rest of the server was stock and it had only one weird thing.</p>","created_at":"2015-03-30T21:56:37Z","author":"slyall","text":"<p>The rule of thumb I used to have (which is a little dated now but imagine 5-10 years ago):</p><p>&quot; Any server should have only one thing that is not installed via the default OS packages &quot;</p><p>So you could have one weird bleeding edge version of your language or some unusual daemon that nobody else used but that was it. The idea was the rest of the server was stock and it had only one weird thing.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291622,"key":9291622,"title":"<p>Ironically, Rails is now in the category of &quot;boring technology&quot; but each major version introduces enough breaking API changes that many apps never get updated. So all the pain of spending a token and little of the pleasure.</p><p>With smaller, more loosely-coupled modules, one can spend a fraction of a token here or there and still revert back to the boring way when necessary.</p>","created_at":"2015-03-30T18:42:48Z","author":"grandalf","text":"<p>Ironically, Rails is now in the category of &quot;boring technology&quot; but each major version introduces enough breaking API changes that many apps never get updated. So all the pain of spending a token and little of the pleasure.</p><p>With smaller, more loosely-coupled modules, one can spend a fraction of a token here or there and still revert back to the boring way when necessary.</p>","parent_id":9291215,"points":0,"children":[{"id":9292019,"key":9292019,"title":"<p>I&#x27;d argue that Rails is in the business of making new technology boring, so it kind of sits at the edge of both; hence the breakage.</p>","created_at":"2015-03-30T19:38:07Z","author":"frandroid","text":"<p>I&#x27;d argue that Rails is in the business of making new technology boring, so it kind of sits at the edge of both; hence the breakage.</p>","parent_id":9291622,"points":0,"children":[{"id":9292122,"key":9292122,"title":"<p>That&#x27;s true.  Though it&#x27;s just monolithic enough that the breakage can be painful.</p>","created_at":"2015-03-30T19:52:29Z","author":"grandalf","text":"<p>That&#x27;s true.  Though it&#x27;s just monolithic enough that the breakage can be painful.</p>","parent_id":9292019,"points":0,"children":[]}]}]},{"id":9292902,"key":9292902,"title":"<p>Agreed. Best expression I&#x27;ve heard to sum up this concept is &quot;This is not an after-school club&quot;. Playing with shiny new technology is not the point. The point is to make money for the company and you use the best tools for the job. Most of the time that means solid tools that everyone understands.</p>","created_at":"2015-03-30T21:57:31Z","author":"reillyse","text":"<p>Agreed. Best expression I&#x27;ve heard to sum up this concept is &quot;This is not an after-school club&quot;. Playing with shiny new technology is not the point. The point is to make money for the company and you use the best tools for the job. Most of the time that means solid tools that everyone understands.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291885,"key":9291885,"title":"<p>The article was very interesting - I find the whole idea of &quot;innovation tokens&quot; very compelling.\nHowever, I didn&#x27;t understand how Rumsfeld came into play here. Did somebody understand this point ? I feel like I&#x27;m missing something out here.</p>","created_at":"2015-03-30T19:19:52Z","author":"Erazal","text":"<p>The article was very interesting - I find the whole idea of &quot;innovation tokens&quot; very compelling.\nHowever, I didn&#x27;t understand how Rumsfeld came into play here. Did somebody understand this point ? I feel like I&#x27;m missing something out here.</p>","parent_id":9291215,"points":0,"children":[{"id":9292041,"key":9292041,"title":"<p>He was ridiculed for talking about &quot;unknown unknowns&quot; because of the ridiculous phrasing. See <a href=\"http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GiPe1OiKQuk\" rel=\"nofollow\">http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GiPe1OiKQuk</a>\nInterestingly, this ridicule became so common that now people know more about known unknowns, and unknown unknows, which is perfectly sound logic, but just weirdly associated with Rumsfeld now.</p>","created_at":"2015-03-30T19:41:15Z","author":"aero142","text":"<p>He was ridiculed for talking about &quot;unknown unknowns&quot; because of the ridiculous phrasing. See <a href=\"http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GiPe1OiKQuk\" rel=\"nofollow\">http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GiPe1OiKQuk</a>\nInterestingly, this ridicule became so common that now people know more about known unknowns, and unknown unknows, which is perfectly sound logic, but just weirdly associated with Rumsfeld now.</p>","parent_id":9291885,"points":0,"children":[{"id":9292525,"key":9292525,"title":"<p>I&#x27;m no Rumsfeld fan, but I never understood why that statement would be ridiculed.  The quote below makes perfect sense to me.</p><p>&quot;Reports that say that something hasn&#x27;t happened are always interesting to me, because as we know, there are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns -- the ones we don&#x27;t know we don&#x27;t know. And if one looks throughout the history of our country and other free countries, it is the latter category that tend to be the difficult ones.&quot;</p>","created_at":"2015-03-30T20:52:56Z","author":"thoman23","text":"<p>I&#x27;m no Rumsfeld fan, but I never understood why that statement would be ridiculed.  The quote below makes perfect sense to me.</p><p>&quot;Reports that say that something hasn&#x27;t happened are always interesting to me, because as we know, there are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns -- the ones we don&#x27;t know we don&#x27;t know. And if one looks throughout the history of our country and other free countries, it is the latter category that tend to be the difficult ones.&quot;</p>","parent_id":9292041,"points":0,"children":[{"id":9294409,"key":9294409,"title":"<p>Yeah, I always found that ridicule odd. I&#x27;m no fan of the guy but it was a perfectly good point (and, in fact, was disastrously proven true pretty quickly).</p>","created_at":"2015-03-31T04:37:02Z","author":"bandrami","text":"<p>Yeah, I always found that ridicule odd. I&#x27;m no fan of the guy but it was a perfectly good point (and, in fact, was disastrously proven true pretty quickly).</p>","parent_id":9292525,"points":0,"children":[]},{"id":9292881,"key":9292881,"title":"<p>Yeah that statement also made sense to me despite not liking the guy. I like to think of &quot;known unknowns&quot; as knowing the question but not the answer, and &quot;unknown unknowns&quot; as not even knowing the question.</p><p>Of course knowing the answer but not the question is best left to Douglas Adams.</p>","created_at":"2015-03-30T21:54:55Z","author":"antod","text":"<p>Yeah that statement also made sense to me despite not liking the guy. I like to think of &quot;known unknowns&quot; as knowing the question but not the answer, and &quot;unknown unknowns&quot; as not even knowing the question.</p><p>Of course knowing the answer but not the question is best left to Douglas Adams.</p>","parent_id":9292525,"points":0,"children":[]}]}]}]},{"id":9292917,"key":9292917,"title":"<p>3 innovation tokens? The supply is fixed for a long while? People on <i>HackerNews</i> of all places buying that?</p><p>It&#x27;s plain wrong. Innovation is good for any kind of organization, if done properly. What the author should focus on is the lack of <i>agility</i> that prevents companies from experimenting and failing quickly. It&#x27;s not the innovative technology that gets you in the end, it&#x27;s your inability to evaluate&#x2F;adopt&#x2F;discard fast. Granted, that ability is hard to find in large-ish organizations, but to willingly limit your innovation sounds like a recipe for a slow death. It&#x27;s like a gentleman boxer from the 19th century limiting himself to just jab, cross, hook entering a modern MMA fight.</p>","created_at":"2015-03-30T22:00:11Z","author":"tie_","text":"<p>3 innovation tokens? The supply is fixed for a long while? People on <i>HackerNews</i> of all places buying that?</p><p>It&#x27;s plain wrong. Innovation is good for any kind of organization, if done properly. What the author should focus on is the lack of <i>agility</i> that prevents companies from experimenting and failing quickly. It&#x27;s not the innovative technology that gets you in the end, it&#x27;s your inability to evaluate&#x2F;adopt&#x2F;discard fast. Granted, that ability is hard to find in large-ish organizations, but to willingly limit your innovation sounds like a recipe for a slow death. It&#x27;s like a gentleman boxer from the 19th century limiting himself to just jab, cross, hook entering a modern MMA fight.</p>","parent_id":9291215,"points":0,"children":[{"id":9293137,"key":9293137,"title":"<p>&gt; What the author should focus on is the lack of agility that prevents companies from experimenting and failing quickly.</p><p>Wow weird someone should totally think about that, maybe it doesn&#x27;t even have much to do with the programming language</p><p><a href=\"http:&#x2F;&#x2F;mcfunley.com&#x2F;data-driven-products-now\" rel=\"nofollow\">http:&#x2F;&#x2F;mcfunley.com&#x2F;data-driven-products-now</a></p><p><a href=\"http:&#x2F;&#x2F;mcfunley.com&#x2F;design-for-continuous-experimentation\" rel=\"nofollow\">http:&#x2F;&#x2F;mcfunley.com&#x2F;design-for-continuous-experimentation</a></p>","created_at":"2015-03-30T22:46:57Z","author":"mcfunley","text":"<p>&gt; What the author should focus on is the lack of agility that prevents companies from experimenting and failing quickly.</p><p>Wow weird someone should totally think about that, maybe it doesn&#x27;t even have much to do with the programming language</p><p><a href=\"http:&#x2F;&#x2F;mcfunley.com&#x2F;data-driven-products-now\" rel=\"nofollow\">http:&#x2F;&#x2F;mcfunley.com&#x2F;data-driven-products-now</a></p><p><a href=\"http:&#x2F;&#x2F;mcfunley.com&#x2F;design-for-continuous-experimentation\" rel=\"nofollow\">http:&#x2F;&#x2F;mcfunley.com&#x2F;design-for-continuous-experimentation</a></p>","parent_id":9292917,"points":0,"children":[]},{"id":9292956,"key":9292956,"title":"<p>So, call them &quot;agility tokens&quot;. You&#x27;ve still got a limited supply when it comes to trying out new languages, new databases, new whatever. If you&#x27;ve got ten years Python and MySQL experience, and 95% of your codebase is in Python with data stored in MySQL, what do you gain and what do you lose by introducing Node.js and MongoDB into the mix? Sometimes it&#x27;s worth the trade...other times it&#x27;s not. But, Node.js and MongoDB is <i>probably</i> not going to provide enough of a productivity boost to make up for the costs of maintaining two codebases, two build&#x2F;test&#x2F;deploy environments, two databases, etc. You&#x27;re making a trade; sometimes it&#x27;s beneficial (usually long term), and often it&#x27;s not (usually short term).</p><p>In short, yes, I&#x27;m buying this. I think it&#x27;s a perfectly sensible analogy; a somewhat leaky abstraction, if you will, since none of us actually have any &quot;tokens&quot; that we are trading in for a new database. But, the meaning is clear to me, and I can&#x27;t find fault in it.</p>","created_at":"2015-03-30T22:09:54Z","author":"SwellJoe","text":"<p>So, call them &quot;agility tokens&quot;. You&#x27;ve still got a limited supply when it comes to trying out new languages, new databases, new whatever. If you&#x27;ve got ten years Python and MySQL experience, and 95% of your codebase is in Python with data stored in MySQL, what do you gain and what do you lose by introducing Node.js and MongoDB into the mix? Sometimes it&#x27;s worth the trade...other times it&#x27;s not. But, Node.js and MongoDB is <i>probably</i> not going to provide enough of a productivity boost to make up for the costs of maintaining two codebases, two build&#x2F;test&#x2F;deploy environments, two databases, etc. You&#x27;re making a trade; sometimes it&#x27;s beneficial (usually long term), and often it&#x27;s not (usually short term).</p><p>In short, yes, I&#x27;m buying this. I think it&#x27;s a perfectly sensible analogy; a somewhat leaky abstraction, if you will, since none of us actually have any &quot;tokens&quot; that we are trading in for a new database. But, the meaning is clear to me, and I can&#x27;t find fault in it.</p>","parent_id":9292917,"points":0,"children":[]}]},{"id":9293950,"key":9293950,"title":"<p>My rule of thumb is: you can do something right, or you can do something new.</p><p>You need to find a balance, but if you&#x27;re doing something new in business you should use reliable tech, if you&#x27;re doing new tech you need to isolate that.</p><p>Corollary: you can hire for standard tech, but have to ramp up in-house tech.</p>","created_at":"2015-03-31T01:57:33Z","author":"scrame","text":"<p>My rule of thumb is: you can do something right, or you can do something new.</p><p>You need to find a balance, but if you&#x27;re doing something new in business you should use reliable tech, if you&#x27;re doing new tech you need to isolate that.</p><p>Corollary: you can hire for standard tech, but have to ramp up in-house tech.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291391,"key":9291391,"title":"<p>My rule of thumb is that if the project has a deadline, then I use components I already know. And to test something new I use it for something that is internal only.</p>","created_at":"2015-03-30T18:10:53Z","author":"elevensies","text":"<p>My rule of thumb is that if the project has a deadline, then I use components I already know. And to test something new I use it for something that is internal only.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291394,"key":9291394,"title":"<p>This seems to be written from the &quot;Engineers are monkeys&quot; perspective.  As if they spend their time flinging poo and you really need &quot;solid&quot; boing technology that&#x27;s already well designed so the poo doesn&#x27;t mess it up.</p><p>You shouldn&#x27;t choose node.js or MongoDB because they are &quot;innovative&quot;-- but because they are poorly engineered. (Erlang did what node does but much better, and MongoDB is poorly engineered global write lock mess that is probably better now but whose hype way exceeded its quality for many years.)</p><p>The engineers are monkey&#x27;s idea is that engineers can&#x27;t tell the difference-- and it seems to be supported by the popularity of those two technologies.</p><p>But if you know what you&#x27;re doing, you choose good technologies-- Elixir is less than a year old but its built on the boring 20 years of work that has been done in Erlang.  Couchbase is very innovative but it&#x27;s built on nearly a decade of couchdb and memcache work.</p><p>You choose the right technologies and they become silver bullets that really make your project much more productive.</p><p>Boring technologies often have a performance (in time to market terms) cost to them.</p><p>Really you can&#x27;t apply rules of thumb like this and the &quot;innovation tokens&quot; idea is silly.</p><p>I say this having done a product in 6 months with 4 people that should have taken 12 people 12 months to do, using Elixir (not even close to 1.0 of elixir even) and couchbase and trying out some of my &quot;wacky&quot; ideas for how a web platform should be built-- yes, I was using cutting edge new ideas in this thing that we took to production very quickly.</p><p>The difference?</p><p>Those four engineers were all good.  Not all experienced-- one had been programming less than a year-- but all good.</p><p>Seems everyone talks about finding good talent and how important that is but they don&#x27;t seem to be able to do it. I don&#x27;t know.</p><p>I do know is, don&#x27;t use &quot;engineers are monkies&quot; rules of thumb-- just hire human engineers.</p>","created_at":"2015-03-30T18:11:12Z","author":"MCRed","text":"<p>This seems to be written from the &quot;Engineers are monkeys&quot; perspective.  As if they spend their time flinging poo and you really need &quot;solid&quot; boing technology that&#x27;s already well designed so the poo doesn&#x27;t mess it up.</p><p>You shouldn&#x27;t choose node.js or MongoDB because they are &quot;innovative&quot;-- but because they are poorly engineered. (Erlang did what node does but much better, and MongoDB is poorly engineered global write lock mess that is probably better now but whose hype way exceeded its quality for many years.)</p><p>The engineers are monkey&#x27;s idea is that engineers can&#x27;t tell the difference-- and it seems to be supported by the popularity of those two technologies.</p><p>But if you know what you&#x27;re doing, you choose good technologies-- Elixir is less than a year old but its built on the boring 20 years of work that has been done in Erlang.  Couchbase is very innovative but it&#x27;s built on nearly a decade of couchdb and memcache work.</p><p>You choose the right technologies and they become silver bullets that really make your project much more productive.</p><p>Boring technologies often have a performance (in time to market terms) cost to them.</p><p>Really you can&#x27;t apply rules of thumb like this and the &quot;innovation tokens&quot; idea is silly.</p><p>I say this having done a product in 6 months with 4 people that should have taken 12 people 12 months to do, using Elixir (not even close to 1.0 of elixir even) and couchbase and trying out some of my &quot;wacky&quot; ideas for how a web platform should be built-- yes, I was using cutting edge new ideas in this thing that we took to production very quickly.</p><p>The difference?</p><p>Those four engineers were all good.  Not all experienced-- one had been programming less than a year-- but all good.</p><p>Seems everyone talks about finding good talent and how important that is but they don&#x27;t seem to be able to do it. I don&#x27;t know.</p><p>I do know is, don&#x27;t use &quot;engineers are monkies&quot; rules of thumb-- just hire human engineers.</p>","parent_id":9291215,"points":0,"children":[{"id":9291572,"key":9291572,"title":"<p>Individual humans are smart. Groups of humans are dumb. When you&#x27;re hiring people that you will personally work with, you can filter for smart. When you have to work with another group of humans, it&#x27;s safer to assume that they are stupid.</p>","created_at":"2015-03-30T18:36:34Z","author":"exelius","text":"<p>Individual humans are smart. Groups of humans are dumb. When you&#x27;re hiring people that you will personally work with, you can filter for smart. When you have to work with another group of humans, it&#x27;s safer to assume that they are stupid.</p>","parent_id":9291394,"points":0,"children":[{"id":9291707,"key":9291707,"title":"<p>...or, without resorting to labels:</p><p>Groups are a low-pass filter on the abilities of the individuals that compose them.  To teach something to a group, you have to communicate it to every member; this communication is naturally bound by the ability to understand of the person who is least familiar (or least enthusiastic) about the particular tech.</p><p>You can often cut the time needed for a complex project in half simply by cutting the team in half and telling each group to work on it independently.  The problem is that now you have two problems - or rather, two solutions.  If you try to integrate them together, you end up reintroducing all the communication hassles <i>and more</i>.  If you throw one out, you&#x27;ll alienate and probably lose all the developers who worked on it.  If you bring both to market, you confuse your customers and lose brand equity.</p>","created_at":"2015-03-30T18:55:20Z","author":"nostrademons","text":"<p>...or, without resorting to labels:</p><p>Groups are a low-pass filter on the abilities of the individuals that compose them.  To teach something to a group, you have to communicate it to every member; this communication is naturally bound by the ability to understand of the person who is least familiar (or least enthusiastic) about the particular tech.</p><p>You can often cut the time needed for a complex project in half simply by cutting the team in half and telling each group to work on it independently.  The problem is that now you have two problems - or rather, two solutions.  If you try to integrate them together, you end up reintroducing all the communication hassles <i>and more</i>.  If you throw one out, you&#x27;ll alienate and probably lose all the developers who worked on it.  If you bring both to market, you confuse your customers and lose brand equity.</p>","parent_id":9291572,"points":0,"children":[]},{"id":9291771,"key":9291771,"title":"<p>&gt; Individual humans are smart. Groups of humans are dumb.</p><p>Actually, you have that exactly wrong[1].</p><p>&quot;Behavioural economists and sociologists have gone beyond the anecdotic and systematically studied the issues, and have come up with surprising answers.</p><p>Capturing the ‘collective’ wisdom best solves cognitive problems. Four conditions apply. There must be: (a) true diversity of opinions; (b) independence of opinion (so there is no correlation between them); (c) decentralisation of experience; (d) suitable mechanisms of aggregation.&quot;</p><p>[1] <a href=\"http:&#x2F;&#x2F;www.diplomacy.edu&#x2F;resources&#x2F;books&#x2F;reviews&#x2F;wisdom-crowds-why-many-are-smarter-few\" rel=\"nofollow\">http:&#x2F;&#x2F;www.diplomacy.edu&#x2F;resources&#x2F;books&#x2F;reviews&#x2F;wisdom-crow...</a></p>","created_at":"2015-03-30T19:01:38Z","author":"cubano","text":"<p>&gt; Individual humans are smart. Groups of humans are dumb.</p><p>Actually, you have that exactly wrong[1].</p><p>&quot;Behavioural economists and sociologists have gone beyond the anecdotic and systematically studied the issues, and have come up with surprising answers.</p><p>Capturing the ‘collective’ wisdom best solves cognitive problems. Four conditions apply. There must be: (a) true diversity of opinions; (b) independence of opinion (so there is no correlation between them); (c) decentralisation of experience; (d) suitable mechanisms of aggregation.&quot;</p><p>[1] <a href=\"http:&#x2F;&#x2F;www.diplomacy.edu&#x2F;resources&#x2F;books&#x2F;reviews&#x2F;wisdom-crowds-why-many-are-smarter-few\" rel=\"nofollow\">http:&#x2F;&#x2F;www.diplomacy.edu&#x2F;resources&#x2F;books&#x2F;reviews&#x2F;wisdom-crow...</a></p>","parent_id":9291572,"points":0,"children":[{"id":9292313,"key":9292313,"title":"<p>All four of those conditions sre &quot;spherical cow&quot; assumptions. You won&#x27;t actually see them in the real world.</p>","created_at":"2015-03-30T20:23:47Z","author":"tbrownaw","text":"<p>All four of those conditions sre &quot;spherical cow&quot; assumptions. You won&#x27;t actually see them in the real world.</p>","parent_id":9291771,"points":0,"children":[{"id":9294360,"key":9294360,"title":"<p>You do, actually. To give two examples, markets and machine learning.</p>","created_at":"2015-03-31T04:23:48Z","author":"saraid216","text":"<p>You do, actually. To give two examples, markets and machine learning.</p>","parent_id":9292313,"points":0,"children":[]}]},{"id":9291852,"key":9291852,"title":"<p>&quot;Crowds&quot; != &quot;Groups&quot;.  In a crowd, the individuals behave independently; each person makes their own judgment as to the best course of action and pursues it.  In a group, the individuals are constrained to come to a collective decision and implement it.</p><p>That difference is crucial.  Markets function based on the wisdom of crowds; they work because if one person has the right information but everybody else is dumb, the one iconoclast stands to make a lot of money and force out all the dumb people.  Statistics function according to the wisdom of crowds; it works because errors contribute little to the mean, while most people, <i>arriving independently at their conclusion</i>, tend to be closer.</p><p>Groups all have to agree on the same conclusion.  When this condition occurs, the only conclusion that they can agree on is one that can be communicated to all members of the group, which is necessarily limited by the ability of the weakest group member to understand it.</p>","created_at":"2015-03-30T19:14:39Z","author":"nostrademons","text":"<p>&quot;Crowds&quot; != &quot;Groups&quot;.  In a crowd, the individuals behave independently; each person makes their own judgment as to the best course of action and pursues it.  In a group, the individuals are constrained to come to a collective decision and implement it.</p><p>That difference is crucial.  Markets function based on the wisdom of crowds; they work because if one person has the right information but everybody else is dumb, the one iconoclast stands to make a lot of money and force out all the dumb people.  Statistics function according to the wisdom of crowds; it works because errors contribute little to the mean, while most people, <i>arriving independently at their conclusion</i>, tend to be closer.</p><p>Groups all have to agree on the same conclusion.  When this condition occurs, the only conclusion that they can agree on is one that can be communicated to all members of the group, which is necessarily limited by the ability of the weakest group member to understand it.</p>","parent_id":9291771,"points":0,"children":[{"id":9292882,"key":9292882,"title":"<p>Both markets and groups are much better at quantifying power differentials than in assessing information objectively and making useful predictions about the future.</p><p>This is why groups tend to be dumb. So much energy goes on hierarchical posturing and social signalling that there&#x27;s relatively little left over for practical intelligence.</p><p>Orgs that can break through this can do astounding things. But the successes tend to be more rooted in the values of science and engineering as processes than in market processes.</p><p>Historically, every so often you get an org that works as intelligence amplifier and is more than the sum of individual talents.</p><p>But this configuration seems to be unstable, and so far as I know no org has ever made it stick as a permanent feature of a business culture.</p>","created_at":"2015-03-30T21:54:58Z","author":"TheOtherHobbes","text":"<p>Both markets and groups are much better at quantifying power differentials than in assessing information objectively and making useful predictions about the future.</p><p>This is why groups tend to be dumb. So much energy goes on hierarchical posturing and social signalling that there&#x27;s relatively little left over for practical intelligence.</p><p>Orgs that can break through this can do astounding things. But the successes tend to be more rooted in the values of science and engineering as processes than in market processes.</p><p>Historically, every so often you get an org that works as intelligence amplifier and is more than the sum of individual talents.</p><p>But this configuration seems to be unstable, and so far as I know no org has ever made it stick as a permanent feature of a business culture.</p>","parent_id":9291852,"points":0,"children":[]}]},{"id":9291882,"key":9291882,"title":"<p>Of course I was oversimplifying :) In any case, that study removes many of the reasons that groups of humans make bad decisions - which is unfortunately impossible to do in most real-world contexts.</p><p>If you want to be more precise, we often make assumptions of people belonging to a group that is not our own. The safest assumption to make is that all other groups are dumb. Ironically, this likely reinforces the problem: Why is this other group assuming our application doesn&#x27;t have feature XYZ? Of course it does, because we&#x27;re good at what we do. But obviously they must not be very bright to make such an assumption...</p>","created_at":"2015-03-30T19:18:59Z","author":"exelius","text":"<p>Of course I was oversimplifying :) In any case, that study removes many of the reasons that groups of humans make bad decisions - which is unfortunately impossible to do in most real-world contexts.</p><p>If you want to be more precise, we often make assumptions of people belonging to a group that is not our own. The safest assumption to make is that all other groups are dumb. Ironically, this likely reinforces the problem: Why is this other group assuming our application doesn&#x27;t have feature XYZ? Of course it does, because we&#x27;re good at what we do. But obviously they must not be very bright to make such an assumption...</p>","parent_id":9291771,"points":0,"children":[]}]}]},{"id":9291630,"key":9291630,"title":"<p>Having come from Etsy and witnessed the success of this type of thinking first hand, I think you missed the point of the article and I think you are using a tiny engineering organization (4 people) in your thinking, instead of a medium to large one (120+ engineers).</p><p>The problem isn&#x27;t &quot;we are starting a new codebase with 4 engineers, are we qualified to choose the right technology?&quot; it&#x27;s &quot;we are solving a new problem, within a massive org&#x2F;codebase, that could probably be solved more directly with a different set of technologies than the existing ones the rest of the company is using.  Is that worth the overhead?&quot; and the answer is almost always no.  Ie: is local optimization worth the overhead?</p><p>Local optimization is extremely tempting no matter who you are, where you are.  It&#x27;s always easy to reach a point of frustration and come to the line of reasoning of &quot;I don&#x27;t get why we are wasting so much time to ship this product using the &#x27;old&#x27; stuff when we could just use &#x27;newstuff&#x27; and get it out the door in the next week.&quot;  This happens to engineers of all levels, especially in a continuous deployment, &quot;Just Ship&quot; culture.  The point of the article is that local optimization gives you this tiny boost in the beginning for a long term cost that eventually moves the organization is a direction of shipping less.  It&#x27;s not that innovative technologies are bad.</p><p>&gt; But if you know what you&#x27;re doing, you choose good technologies</p><p>No, if you know what you are doing you make good organizational decisions.  It matters less what technology you use than that the entire organization uses the same technology.  Etsy has a great engineering team and yet the entire site is written in PHP.  I don&#x27;t think there is a single engineer working at Etsy who thinks PHP is the best language out there, but the decision to be made at the time was &quot;there is a site using PHP, some Python, some Ruby etc., how do we make this easier to work on?&quot;  Of those three python and ruby are almost universally thought of as better languages than PHP, but in this case the correct decision was picking a worse technology because more of the site was written in it, the existing infrastructure supported it more completely and so as an organization and a business we could get back to shipping products more quickly by all agreeing to use PHP.  Etsy certainly does not think of its engineers as monkeys, quite the opposite.</p>","created_at":"2015-03-30T18:44:09Z","author":"wdewind","text":"<p>Having come from Etsy and witnessed the success of this type of thinking first hand, I think you missed the point of the article and I think you are using a tiny engineering organization (4 people) in your thinking, instead of a medium to large one (120+ engineers).</p><p>The problem isn&#x27;t &quot;we are starting a new codebase with 4 engineers, are we qualified to choose the right technology?&quot; it&#x27;s &quot;we are solving a new problem, within a massive org&#x2F;codebase, that could probably be solved more directly with a different set of technologies than the existing ones the rest of the company is using.  Is that worth the overhead?&quot; and the answer is almost always no.  Ie: is local optimization worth the overhead?</p><p>Local optimization is extremely tempting no matter who you are, where you are.  It&#x27;s always easy to reach a point of frustration and come to the line of reasoning of &quot;I don&#x27;t get why we are wasting so much time to ship this product using the &#x27;old&#x27; stuff when we could just use &#x27;newstuff&#x27; and get it out the door in the next week.&quot;  This happens to engineers of all levels, especially in a continuous deployment, &quot;Just Ship&quot; culture.  The point of the article is that local optimization gives you this tiny boost in the beginning for a long term cost that eventually moves the organization is a direction of shipping less.  It&#x27;s not that innovative technologies are bad.</p><p>&gt; But if you know what you&#x27;re doing, you choose good technologies</p><p>No, if you know what you are doing you make good organizational decisions.  It matters less what technology you use than that the entire organization uses the same technology.  Etsy has a great engineering team and yet the entire site is written in PHP.  I don&#x27;t think there is a single engineer working at Etsy who thinks PHP is the best language out there, but the decision to be made at the time was &quot;there is a site using PHP, some Python, some Ruby etc., how do we make this easier to work on?&quot;  Of those three python and ruby are almost universally thought of as better languages than PHP, but in this case the correct decision was picking a worse technology because more of the site was written in it, the existing infrastructure supported it more completely and so as an organization and a business we could get back to shipping products more quickly by all agreeing to use PHP.  Etsy certainly does not think of its engineers as monkeys, quite the opposite.</p>","parent_id":9291394,"points":0,"children":[{"id":9292135,"key":9292135,"title":"<p>Pedantic note: large-scale engineering organizations have an additional two zeros in their order of magnitude: 10,000+ engineers. ;-)</p><p>But you&#x27;re quite right. This is part of the reason why Java has been so successful - it&#x27;s both boring and well supported.</p>","created_at":"2015-03-30T19:54:58Z","author":"pnathan","text":"<p>Pedantic note: large-scale engineering organizations have an additional two zeros in their order of magnitude: 10,000+ engineers. ;-)</p><p>But you&#x27;re quite right. This is part of the reason why Java has been so successful - it&#x27;s both boring and well supported.</p>","parent_id":9291630,"points":0,"children":[{"id":9292241,"key":9292241,"title":"<p>By your measure, Facebook is still not a large-scale engineering organization... I think I&#x27;ll stop there.</p>","created_at":"2015-03-30T20:12:05Z","author":"pothibo","text":"<p>By your measure, Facebook is still not a large-scale engineering organization... I think I&#x27;ll stop there.</p>","parent_id":9292135,"points":0,"children":[{"id":9292555,"key":9292555,"title":"<p>&gt; <i>By your measure, Facebook is still not a large-scale engineering organization</i></p><p>&quot;9,199 employees as of December 31, 2014&quot; -- that&#x27;s probably close enough to his metric to call it a large-scale engineering organization.</p><p>Of course, there&#x27;s the real question of why Facebook needs to be a 10k+ engineer organization. For a minute it looked like they&#x27;d grow past their MySpace 2.0 roots. That becomes less convincing every day.</p>","created_at":"2015-03-30T20:56:42Z","author":"freyr","text":"<p>&gt; <i>By your measure, Facebook is still not a large-scale engineering organization</i></p><p>&quot;9,199 employees as of December 31, 2014&quot; -- that&#x27;s probably close enough to his metric to call it a large-scale engineering organization.</p><p>Of course, there&#x27;s the real question of why Facebook needs to be a 10k+ engineer organization. For a minute it looked like they&#x27;d grow past their MySpace 2.0 roots. That becomes less convincing every day.</p>","parent_id":9292241,"points":0,"children":[{"id":9292657,"key":9292657,"title":"<p>&gt;that&#x27;s probably close enough to his metric to call it a large-scale engineering organization.</p><p>Maybe 1&#x2F;5th of that are software engineers of any sort. Sales, marketing, management, admin staff, QA, sysadmins, etc tend to fill up organizations.</p>","created_at":"2015-03-30T21:14:21Z","author":"drzaiusapelord","text":"<p>&gt;that&#x27;s probably close enough to his metric to call it a large-scale engineering organization.</p><p>Maybe 1&#x2F;5th of that are software engineers of any sort. Sales, marketing, management, admin staff, QA, sysadmins, etc tend to fill up organizations.</p>","parent_id":9292555,"points":0,"children":[{"id":9294065,"key":9294065,"title":"<p>Ah nice catch, I misread the quote as 9k engineers. That said, after seeing their new offices, I&#x27;m not sure I can retract the general sentiment of my previous post.</p>","created_at":"2015-03-31T02:39:57Z","author":"freyr","text":"<p>Ah nice catch, I misread the quote as 9k engineers. That said, after seeing their new offices, I&#x27;m not sure I can retract the general sentiment of my previous post.</p>","parent_id":9292657,"points":0,"children":[]}]}]},{"id":9292538,"key":9292538,"title":"<p>Both Facebook and Google (!) aren&#x27;t really large-scale by the standards of tech companies gone by.  Facebook has about 9000 employees.  Google has 50,000.  By contrast, Microsoft has 128,000, HP has 300,000, IBM has almost 400,000, and DEC had about 300,000 at its peak.</p><p>In the startup world, we (rightly) focus on growth, but it&#x27;s worth remembering that there are giant companies out there using really, really boring technology.  In some segments IBM mainframes, DB2, and COBOL are still the technologies of choice.</p>","created_at":"2015-03-30T20:54:32Z","author":"nostrademons","text":"<p>Both Facebook and Google (!) aren&#x27;t really large-scale by the standards of tech companies gone by.  Facebook has about 9000 employees.  Google has 50,000.  By contrast, Microsoft has 128,000, HP has 300,000, IBM has almost 400,000, and DEC had about 300,000 at its peak.</p><p>In the startup world, we (rightly) focus on growth, but it&#x27;s worth remembering that there are giant companies out there using really, really boring technology.  In some segments IBM mainframes, DB2, and COBOL are still the technologies of choice.</p>","parent_id":9292241,"points":0,"children":[{"id":9293339,"key":9293339,"title":"<p>To add to what you&#x27;re saying there are also government departments and giant companies out there that do your tax, pay for the roads, handle your insurance and handle your banking where somebody 20 years ago chose a technology that wasn&#x27;t boring.</p><p>These entities are now having huge problems trying to get off 1980s or 1990s non-boring non-standard technologies that are no longer supported.</p><p>There are places that have bought the company that was going insolvent that built their non-standard database or framework....</p><p>&quot;Nobody ever got fired for buying IBM&quot; had good reason behind it.</p>","created_at":"2015-03-30T23:27:55Z","author":"sien","text":"<p>To add to what you&#x27;re saying there are also government departments and giant companies out there that do your tax, pay for the roads, handle your insurance and handle your banking where somebody 20 years ago chose a technology that wasn&#x27;t boring.</p><p>These entities are now having huge problems trying to get off 1980s or 1990s non-boring non-standard technologies that are no longer supported.</p><p>There are places that have bought the company that was going insolvent that built their non-standard database or framework....</p><p>&quot;Nobody ever got fired for buying IBM&quot; had good reason behind it.</p>","parent_id":9292538,"points":0,"children":[]}]}]},{"id":9293304,"key":9293304,"title":"<p>I totally agree, that&#x27;s why I said medium to large.  My main point is that you are solving radically different problems with even 20+ engineers than you are with only 5 or so.</p>","created_at":"2015-03-30T23:20:07Z","author":"wdewind","text":"<p>I totally agree, that&#x27;s why I said medium to large.  My main point is that you are solving radically different problems with even 20+ engineers than you are with only 5 or so.</p>","parent_id":9292135,"points":0,"children":[]}]},{"id":9292441,"key":9292441,"title":"<p>This optimization may as well become global when it&#x27;ll come to hiring in the future. Quote from the post:</p><p><pre><code>    [...] what it is about the current stack that makes\n    solving the problem prohibitively expensive and difficult\n</code></pre>\nEtsy, as a very successful PHP shop, surely understands that PHP codebase itself presents an expense in a form of non-hired smart engineers that pass on the company because they won&#x27;t work with this language.</p><p>Plus, there are examples when the local optimization (i.e. staying with whatever legacy stack because it&#x27;s proven) may lead to a global failure because of the unmaintainable &quot;spaghetti blob&quot; codebase with duck tape everywhere.</p>","created_at":"2015-03-30T20:42:03Z","author":"smikhanov","text":"<p>This optimization may as well become global when it&#x27;ll come to hiring in the future. Quote from the post:</p><p><pre><code>    [...] what it is about the current stack that makes\n    solving the problem prohibitively expensive and difficult\n</code></pre>\nEtsy, as a very successful PHP shop, surely understands that PHP codebase itself presents an expense in a form of non-hired smart engineers that pass on the company because they won&#x27;t work with this language.</p><p>Plus, there are examples when the local optimization (i.e. staying with whatever legacy stack because it&#x27;s proven) may lead to a global failure because of the unmaintainable &quot;spaghetti blob&quot; codebase with duck tape everywhere.</p>","parent_id":9291630,"points":0,"children":[{"id":9292817,"key":9292817,"title":"<p>To me, that explains why Etsy has trouble with new tools and languages - they can&#x27;t hire the developers it&#x27;d take to successfully run a project outside of the tools they are used to.</p><p>Analogously, if you promote by external hiring, you hemorrhage the kind of employee you&#x27;d want to promote internally. If you always stay in a particular sandbox, you lose the kind of employee that can work outside it.</p>","created_at":"2015-03-30T21:44:32Z","author":"ThrustVectoring","text":"<p>To me, that explains why Etsy has trouble with new tools and languages - they can&#x27;t hire the developers it&#x27;d take to successfully run a project outside of the tools they are used to.</p><p>Analogously, if you promote by external hiring, you hemorrhage the kind of employee you&#x27;d want to promote internally. If you always stay in a particular sandbox, you lose the kind of employee that can work outside it.</p>","parent_id":9292441,"points":0,"children":[]},{"id":9292844,"key":9292844,"title":"<p>If PHP is a deal breaker then that person isn&#x27;t the type of person you want to hire, since they obviously care more about incidental issues like language choice than solving real problems. That&#x27;s not to say people can&#x27;t groan about it (like any other workplace annoyance) but I&#x27;ll still go work somewhere doing amazing things even if the cafeteria food kind of sucks.</p><p>Anecdotally, it usually turns out that good engineering practices can be brought into any medium. PHP comes with a higher than average number of foot guns, and there is a lot of terrible PHP code out there that is unfortunate to find when you Google something, but it&#x27;s self evident that a good engineering organization can build solid systems in PHP. (See also: the diligent use of a specific set of C++ features in shops building cutting edge graphics&#x2F;game technology.)</p>","created_at":"2015-03-30T21:49:06Z","author":"gfodor","text":"<p>If PHP is a deal breaker then that person isn&#x27;t the type of person you want to hire, since they obviously care more about incidental issues like language choice than solving real problems. That&#x27;s not to say people can&#x27;t groan about it (like any other workplace annoyance) but I&#x27;ll still go work somewhere doing amazing things even if the cafeteria food kind of sucks.</p><p>Anecdotally, it usually turns out that good engineering practices can be brought into any medium. PHP comes with a higher than average number of foot guns, and there is a lot of terrible PHP code out there that is unfortunate to find when you Google something, but it&#x27;s self evident that a good engineering organization can build solid systems in PHP. (See also: the diligent use of a specific set of C++ features in shops building cutting edge graphics&#x2F;game technology.)</p>","parent_id":9292441,"points":0,"children":[{"id":9293575,"key":9293575,"title":"<p>The truth is that even at great companies there is plenty of &quot;crud work&quot; to do. It is important work and you are solving real problems but there is little personal&#x2F;professional growth or learning.</p><p>One way to keep that kind of work interesting and to provide growth and learning is to use new&#x2F;different tools and technology to do it.</p>","created_at":"2015-03-31T00:24:57Z","author":"sheepmullet","text":"<p>The truth is that even at great companies there is plenty of &quot;crud work&quot; to do. It is important work and you are solving real problems but there is little personal&#x2F;professional growth or learning.</p><p>One way to keep that kind of work interesting and to provide growth and learning is to use new&#x2F;different tools and technology to do it.</p>","parent_id":9292844,"points":0,"children":[]},{"id":9293620,"key":9293620,"title":"<p>You are assuming it&#x27;s an either or scenario. For good engineers, it&#x27;s not. They can choose a place that solves real problems <i>and</i> uses nice technology.</p>","created_at":"2015-03-31T00:35:02Z","author":"tensor","text":"<p>You are assuming it&#x27;s an either or scenario. For good engineers, it&#x27;s not. They can choose a place that solves real problems <i>and</i> uses nice technology.</p>","parent_id":9292844,"points":0,"children":[]},{"id":9293116,"key":9293116,"title":"<p>You see C++ used in graphics&#x2F;game because it strength is low level memory&#x2F;cpu control needed for cutting edge work. PHP is optimized for &quot;time-to-market&quot; not cutting edge, so chances are the &quot;real problems&quot; you want to hire for are not that interesting. Heck, a big advantage is PHP is that most of the problems you encounter are already solved for you.\nMost of the time, &quot;use of PHP&quot; correlates to &quot;not really interesting problems&quot;, so is a good proxy to use when deciding where to work :)</p>","created_at":"2015-03-30T22:42:00Z","author":"gclaramunt","text":"<p>You see C++ used in graphics&#x2F;game because it strength is low level memory&#x2F;cpu control needed for cutting edge work. PHP is optimized for &quot;time-to-market&quot; not cutting edge, so chances are the &quot;real problems&quot; you want to hire for are not that interesting. Heck, a big advantage is PHP is that most of the problems you encounter are already solved for you.\nMost of the time, &quot;use of PHP&quot; correlates to &quot;not really interesting problems&quot;, so is a good proxy to use when deciding where to work :)</p>","parent_id":9292844,"points":0,"children":[]},{"id":9292998,"key":9292998,"title":"<p>It&#x27;s not incidental -- choice of language has a massive impact on your developers&#x27; day-to-day experience as a human being, and many of the best programmers will find themselves incredibly frustrated by using a language like PHP (not because of ego but because PHP has properties which makes it frustrating to work with).</p><p>Of course, from a certain mindset I suppose <i>anyone</i> unwilling to sacrifice their happiness on the altar of your corporation&#x27;s profit might be dubious... the question then becomes whether this affects recruitment and retention, and if so, whether you can still accomplish the things you want with mediocre talent and high turnover...</p>","created_at":"2015-03-30T22:17:25Z","author":"fennecfoxen","text":"<p>It&#x27;s not incidental -- choice of language has a massive impact on your developers&#x27; day-to-day experience as a human being, and many of the best programmers will find themselves incredibly frustrated by using a language like PHP (not because of ego but because PHP has properties which makes it frustrating to work with).</p><p>Of course, from a certain mindset I suppose <i>anyone</i> unwilling to sacrifice their happiness on the altar of your corporation&#x27;s profit might be dubious... the question then becomes whether this affects recruitment and retention, and if so, whether you can still accomplish the things you want with mediocre talent and high turnover...</p>","parent_id":9292844,"points":0,"children":[]}]}]},{"id":9292472,"key":9292472,"title":"<p>&gt; I don&#x27;t think there is a single engineer working at Etsy who thinks PHP is the best language out there</p><p>Nota bene, the creator of PHP works for Etsy</p><p>(Hey thanks for the comment, Will)</p>","created_at":"2015-03-30T20:46:02Z","author":"mcfunley","text":"<p>&gt; I don&#x27;t think there is a single engineer working at Etsy who thinks PHP is the best language out there</p><p>Nota bene, the creator of PHP works for Etsy</p><p>(Hey thanks for the comment, Will)</p>","parent_id":9291630,"points":0,"children":[{"id":9293292,"key":9293292,"title":"<p>Does <i>he</i> think PHP is the best language out there?</p>","created_at":"2015-03-30T23:17:25Z","author":"panic","text":"<p>Does <i>he</i> think PHP is the best language out there?</p>","parent_id":9292472,"points":0,"children":[]},{"id":9293297,"key":9293297,"title":"<p>Ha, fair point, I guess I take that part back!  (And sorry, Rasmus, I still think you&#x27;re awesome)</p>","created_at":"2015-03-30T23:18:58Z","author":"wdewind","text":"<p>Ha, fair point, I guess I take that part back!  (And sorry, Rasmus, I still think you&#x27;re awesome)</p>","parent_id":9292472,"points":0,"children":[]}]}]},{"id":9291951,"key":9291951,"title":"<p>Yes, this &quot;boring = good!&quot; trope is frequently weaponized to shut down people&#x27;s voices. Happened to me.</p><p>One thing I realized is these blogposts are consumerist. They talk about &quot;Python&quot; and &quot;MongoDB&quot;. Very little about underlying ideas like &quot;algorithms&quot;, &quot;computational paradigms&quot; or &quot;expressive power&quot;.</p><p>And they have hypersimplified plans about &quot;three innovation tokens&quot;. Instead of &quot;risk analysis&quot; or &quot;evaluate tradeoffs&quot;.</p><p>One company shut me down with such blogposts... while it let devs run amok with an architecture which did n^2 (more?) network calls... where each call transfered one RDBMS row at a time. It dragged down the intelligence of everyone who really knew better; they spent &quot;sprints&quot; trying to find micro-optimizations, knowing exactly that the system was fundamentally ridiculous.</p><p>So I spent a weekend reimplementing it in the Scary Fun Language. Because it was my weekend dammit, and Embracing Boredom damaged my brain too much. Scary Fun was the only way to start mending it. And it succeeded.</p><p>So of course the first order of business was to rewrite it in the Embrace Boredom language.</p>","created_at":"2015-03-30T19:27:30Z","author":"calibraxis","text":"<p>Yes, this &quot;boring = good!&quot; trope is frequently weaponized to shut down people&#x27;s voices. Happened to me.</p><p>One thing I realized is these blogposts are consumerist. They talk about &quot;Python&quot; and &quot;MongoDB&quot;. Very little about underlying ideas like &quot;algorithms&quot;, &quot;computational paradigms&quot; or &quot;expressive power&quot;.</p><p>And they have hypersimplified plans about &quot;three innovation tokens&quot;. Instead of &quot;risk analysis&quot; or &quot;evaluate tradeoffs&quot;.</p><p>One company shut me down with such blogposts... while it let devs run amok with an architecture which did n^2 (more?) network calls... where each call transfered one RDBMS row at a time. It dragged down the intelligence of everyone who really knew better; they spent &quot;sprints&quot; trying to find micro-optimizations, knowing exactly that the system was fundamentally ridiculous.</p><p>So I spent a weekend reimplementing it in the Scary Fun Language. Because it was my weekend dammit, and Embracing Boredom damaged my brain too much. Scary Fun was the only way to start mending it. And it succeeded.</p><p>So of course the first order of business was to rewrite it in the Embrace Boredom language.</p>","parent_id":9291394,"points":0,"children":[{"id":9293572,"key":9293572,"title":"<p>You&#x27;re actually demonstrating the point of the blog post, which is that the Boring RDBMS had a well-understood failure mode that &quot;everyone who really knew better&quot; would&#x27;ve recognised.</p>","created_at":"2015-03-31T00:24:03Z","author":"jacques_chester","text":"<p>You&#x27;re actually demonstrating the point of the blog post, which is that the Boring RDBMS had a well-understood failure mode that &quot;everyone who really knew better&quot; would&#x27;ve recognised.</p>","parent_id":9291951,"points":0,"children":[]},{"id":9292279,"key":9292279,"title":"<p>&gt; where each call transfered one RDBMS row at a time.</p><p>Surely this is not the fault of boring technology, but rather poor design.  You can easily make the same mistake using the latest and greatest.</p>","created_at":"2015-03-30T20:17:06Z","author":"duderific","text":"<p>&gt; where each call transfered one RDBMS row at a time.</p><p>Surely this is not the fault of boring technology, but rather poor design.  You can easily make the same mistake using the latest and greatest.</p>","parent_id":9291951,"points":0,"children":[{"id":9292734,"key":9292734,"title":"<p>I think it&#x27;s more nuanced; certain technologies afford certain designs. There really are differences in languages, and those differences expose users to different misbehaviors -- or the dual, to different optimizations.</p>","created_at":"2015-03-30T21:27:46Z","author":"jfb","text":"<p>I think it&#x27;s more nuanced; certain technologies afford certain designs. There really are differences in languages, and those differences expose users to different misbehaviors -- or the dual, to different optimizations.</p>","parent_id":9292279,"points":0,"children":[]},{"id":9293276,"key":9293276,"title":"<p>I think the point the parent was making was that using terminology like &quot;scary&quot; or &quot;boring&quot; for technological choices is fundamentally an abrogation of responsibility.  It&#x27;s cargo cult programming. Good programming, intentional engineering, is one where people are cognizant of the risks and other tradeoffs of different languages, frameworks, designs, etc.</p><p>It shouldn&#x27;t be surprising that an organization that opted out of a discussion on technology stacks would also ultimately opt out of discussing algorithmic complexity as well, it speaks to a lack of sophistication and maturity at the institutional level.</p>","created_at":"2015-03-30T23:14:27Z","author":"InclinedPlane","text":"<p>I think the point the parent was making was that using terminology like &quot;scary&quot; or &quot;boring&quot; for technological choices is fundamentally an abrogation of responsibility.  It&#x27;s cargo cult programming. Good programming, intentional engineering, is one where people are cognizant of the risks and other tradeoffs of different languages, frameworks, designs, etc.</p><p>It shouldn&#x27;t be surprising that an organization that opted out of a discussion on technology stacks would also ultimately opt out of discussing algorithmic complexity as well, it speaks to a lack of sophistication and maturity at the institutional level.</p>","parent_id":9292279,"points":0,"children":[]}]}]},{"id":9294026,"key":9294026,"title":"<p>I&#x27;ll throw another one down your way.  An organization I worked with had a about 5 million lines of COBOL in one system (they had several more and this one systems was only about 15% of their total transactional workload).  It used a proprietary pre-relational database that allowed users to do both queries (of a sort) and do things like the value from the query result + 1500 bytes.</p><p>They tried re-writing pieces in Java at a cost of tens of millions of dollars.  Java was the new hotness.  In addition, they built out a Java hosting environment using expensive, proprietary Unix hardware to reach the same production volume as the mainframe.  However, it was grossly under-utilized because the Java code couldn&#x27;t do much more than ask the COBOL code what the answer was to a question by using Message queues.  More millions of dollars went to keep up licenses and support contracts on essentially idle hardware.</p><p>They tried moving it to Windows, using .NET and MicroFocus COBOL.  But the problem was they would still be tied to COBOL, even though they (conceptually) had a path to introduce .NET components or to wrap the green-screen pieces in more updated UIs.  But that in itself was a problem because all their people knew the greenscreen UI so well it was all muscle memory.  Several workers complained because new GUI actually made them slower at their jobs.</p><p>They were stuck because they had no way to reverse engineer the requirements from the COBOL code, some of it going back 25+ years.  Of course it wasn&#x27;t documented, or if it was, the documentation was long gone.  For the most part they were tied to that COBOL code because no one understood everything that it did and there were only a handful of COBOL programmers left in their shop (I think 6) and they were busy making emergency fixes on that + several other millions of lines of code in other systems.</p><p>They were, however, looking for an argument to retire COBOL and retire the mainframes.  The cheapest solution would have been to stick with COBOL.  Hire programmers.  Teach them COBOL (because it was painfully difficult to find any new COBOL people and for various reasons they could not off-shore the project).  Continue to develop and fix in COBOL (especially before the last remaining COBOL programmers died or retired).  If you cleaned up or fixed a module, maybe move it to Java when possible.</p><p>The long story short is the decision to introduce a new technology, even in the face of an ancient, largely proprietary (since it&#x27;s really about IBM COBOL on mainframes), and over-priced solution can actually lead to a worse outcome.  Had they stayed with boring technology.  Had they in-sourced more of their COBOL workforce.  They might not have felt happy, but they would have been in a much strong, better position.  Instead they were paying for a mainframe, and a proprietary Unix server farm, and software licenses on both Unix and z&#x2F;OS.</p><p>When I last was there they were buying a new solution from Oracle which was supposed to arrive racked up and ready to go.  Several weeks in they essentially said it would take months before the first of the new Oracle servers would be ready for an internal cloud deployment on which to try to re-host some software.  I&#x27;m not even sure what they think they would be re-hosting but they talked about automatic translation of COBOL to Java.</p>","created_at":"2015-03-31T02:26:05Z","author":"fullwedgewhale","text":"<p>I&#x27;ll throw another one down your way.  An organization I worked with had a about 5 million lines of COBOL in one system (they had several more and this one systems was only about 15% of their total transactional workload).  It used a proprietary pre-relational database that allowed users to do both queries (of a sort) and do things like the value from the query result + 1500 bytes.</p><p>They tried re-writing pieces in Java at a cost of tens of millions of dollars.  Java was the new hotness.  In addition, they built out a Java hosting environment using expensive, proprietary Unix hardware to reach the same production volume as the mainframe.  However, it was grossly under-utilized because the Java code couldn&#x27;t do much more than ask the COBOL code what the answer was to a question by using Message queues.  More millions of dollars went to keep up licenses and support contracts on essentially idle hardware.</p><p>They tried moving it to Windows, using .NET and MicroFocus COBOL.  But the problem was they would still be tied to COBOL, even though they (conceptually) had a path to introduce .NET components or to wrap the green-screen pieces in more updated UIs.  But that in itself was a problem because all their people knew the greenscreen UI so well it was all muscle memory.  Several workers complained because new GUI actually made them slower at their jobs.</p><p>They were stuck because they had no way to reverse engineer the requirements from the COBOL code, some of it going back 25+ years.  Of course it wasn&#x27;t documented, or if it was, the documentation was long gone.  For the most part they were tied to that COBOL code because no one understood everything that it did and there were only a handful of COBOL programmers left in their shop (I think 6) and they were busy making emergency fixes on that + several other millions of lines of code in other systems.</p><p>They were, however, looking for an argument to retire COBOL and retire the mainframes.  The cheapest solution would have been to stick with COBOL.  Hire programmers.  Teach them COBOL (because it was painfully difficult to find any new COBOL people and for various reasons they could not off-shore the project).  Continue to develop and fix in COBOL (especially before the last remaining COBOL programmers died or retired).  If you cleaned up or fixed a module, maybe move it to Java when possible.</p><p>The long story short is the decision to introduce a new technology, even in the face of an ancient, largely proprietary (since it&#x27;s really about IBM COBOL on mainframes), and over-priced solution can actually lead to a worse outcome.  Had they stayed with boring technology.  Had they in-sourced more of their COBOL workforce.  They might not have felt happy, but they would have been in a much strong, better position.  Instead they were paying for a mainframe, and a proprietary Unix server farm, and software licenses on both Unix and z&#x2F;OS.</p><p>When I last was there they were buying a new solution from Oracle which was supposed to arrive racked up and ready to go.  Several weeks in they essentially said it would take months before the first of the new Oracle servers would be ready for an internal cloud deployment on which to try to re-host some software.  I&#x27;m not even sure what they think they would be re-hosting but they talked about automatic translation of COBOL to Java.</p>","parent_id":9291394,"points":0,"children":[{"id":9294507,"key":9294507,"title":"<p>That whole thing sounds way too familiar to me. It literally could be the same company.</p>","created_at":"2015-03-31T05:17:03Z","author":"kyllo","text":"<p>That whole thing sounds way too familiar to me. It literally could be the same company.</p>","parent_id":9294026,"points":0,"children":[]},{"id":9294508,"key":9294508,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]}]},{"id":9291492,"key":9291492,"title":"<p>My take tends to be not that &#x27;innovation&#x27; is bad, but that there are a couple of risks:</p><p>- The weaknesses of new tech may not be fully understood.  A lot of new tech solves existing problems, while re-surfacing problems that the old tech solved.  Everyone thinks it&#x27;s great until they&#x27;ve used it for a bit longer, and run into those issues.\n- New tech runs a higher risk of disappearing&#x2F;becoming unsupported.  If you plan to support your product for a long time, that&#x27;s a valid risk factor.</p><p>For myself, I&#x27;m wary of having very new tech as a fundamental underpinning of any piece of work I need to stick around.  I&#x27;ll likely adopt frameworks or database systems cautiously, unless their superiority is overwhelmingly obvious.  On the other hand, I&#x27;d be a lot more willing to take risks on a simple library.</p><p>With a smaller, simpler piece of tech, it&#x27;s easier to replace if something goes awry, and it&#x27;s easier to evaluate in its totality prior to taking the risk.</p>","created_at":"2015-03-30T18:26:39Z","author":"AlisdairO","text":"<p>My take tends to be not that &#x27;innovation&#x27; is bad, but that there are a couple of risks:</p><p>- The weaknesses of new tech may not be fully understood.  A lot of new tech solves existing problems, while re-surfacing problems that the old tech solved.  Everyone thinks it&#x27;s great until they&#x27;ve used it for a bit longer, and run into those issues.\n- New tech runs a higher risk of disappearing&#x2F;becoming unsupported.  If you plan to support your product for a long time, that&#x27;s a valid risk factor.</p><p>For myself, I&#x27;m wary of having very new tech as a fundamental underpinning of any piece of work I need to stick around.  I&#x27;ll likely adopt frameworks or database systems cautiously, unless their superiority is overwhelmingly obvious.  On the other hand, I&#x27;d be a lot more willing to take risks on a simple library.</p><p>With a smaller, simpler piece of tech, it&#x27;s easier to replace if something goes awry, and it&#x27;s easier to evaluate in its totality prior to taking the risk.</p>","parent_id":9291394,"points":0,"children":[{"id":9293374,"key":9293374,"title":"<p>It&#x27;s not only that, it&#x27;s also that if you have two languages in your codebase you now need two ways to deploy, two types of application servers, two types of testing frameworks&#x2F;QA setups etc.  If having the two languages means you can create a product only marginally faster&#x2F;better then it is not worth all of that overhead.  As mentioned in the article, there are places where the cost becomes worth it, for instance faceted searching is done in Java via Solr at Etsy.  But for the most part fitting your problem into the existing infrastructure is a lot better for the organization than bringing in the perfect technology.</p>","created_at":"2015-03-30T23:35:56Z","author":"wdewind","text":"<p>It&#x27;s not only that, it&#x27;s also that if you have two languages in your codebase you now need two ways to deploy, two types of application servers, two types of testing frameworks&#x2F;QA setups etc.  If having the two languages means you can create a product only marginally faster&#x2F;better then it is not worth all of that overhead.  As mentioned in the article, there are places where the cost becomes worth it, for instance faceted searching is done in Java via Solr at Etsy.  But for the most part fitting your problem into the existing infrastructure is a lot better for the organization than bringing in the perfect technology.</p>","parent_id":9291492,"points":0,"children":[]},{"id":9291689,"key":9291689,"title":"<p>I agree with this. That being said, the author of the post seems to knock &#x27;the right tool for the job&#x27;, but I recently built two scrapers: one that scrapes an API (one time thing) and one that scrapes some websites (will probably be used once a month). The API one runs on PHP and auto-refreshes with a &lt;meta&gt; tag -- boring, but it works.</p><p>The one that scrapes websites I did with Node since some sites are multi-steps and the latency of a single scrape, plus the database latency could&#x27;ve turned this into a multi-week run with PHP</p>","created_at":"2015-03-30T18:53:10Z","author":"arenaninja","text":"<p>I agree with this. That being said, the author of the post seems to knock &#x27;the right tool for the job&#x27;, but I recently built two scrapers: one that scrapes an API (one time thing) and one that scrapes some websites (will probably be used once a month). The API one runs on PHP and auto-refreshes with a &lt;meta&gt; tag -- boring, but it works.</p><p>The one that scrapes websites I did with Node since some sites are multi-steps and the latency of a single scrape, plus the database latency could&#x27;ve turned this into a multi-week run with PHP</p>","parent_id":9291492,"points":0,"children":[]}]}]},{"id":9293442,"key":9293442,"title":"<p>Aha. So now, the toothpaste in the tube (if you will) shifts to the issue of which technologies are boring, and which use up innovation tokens. Surprise: the technologies you prefer are boring (note the direction of causality there), and the ones you don&#x27;t like require innovation tokens!</p>","created_at":"2015-03-30T23:52:39Z","author":"serve_yay","text":"<p>Aha. So now, the toothpaste in the tube (if you will) shifts to the issue of which technologies are boring, and which use up innovation tokens. Surprise: the technologies you prefer are boring (note the direction of causality there), and the ones you don&#x27;t like require innovation tokens!</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291396,"key":9291396,"title":"<p>503 Temporarily Unavailable. Anyone have a mirror?</p>","created_at":"2015-03-30T18:11:26Z","author":"smcg","text":"<p>503 Temporarily Unavailable. Anyone have a mirror?</p>","parent_id":9291215,"points":0,"children":[{"id":9291464,"key":9291464,"title":"<p>They must have used something &quot;exciting&quot;.</p>","created_at":"2015-03-30T18:22:07Z","author":"jessaustin","text":"<p>They must have used something &quot;exciting&quot;.</p>","parent_id":9291396,"points":0,"children":[{"id":9291719,"key":9291719,"title":"<p>Author here--yeah the irony is killing me. It&#x27;s PHP though. I&#x27;m fighting quota issues with my dumb host. I assure you migrating to something better is not my day job. Here&#x27;s a pdf of it:</p><p><a href=\"https:&#x2F;&#x2F;www.dropbox.com&#x2F;s&#x2F;1k7ngf52o822ccy&#x2F;choose-boring-tech.pdf?dl=0\" rel=\"nofollow\">https:&#x2F;&#x2F;www.dropbox.com&#x2F;s&#x2F;1k7ngf52o822ccy&#x2F;choose-boring-tech...</a></p>","created_at":"2015-03-30T18:56:39Z","author":"mcfunley","text":"<p>Author here--yeah the irony is killing me. It&#x27;s PHP though. I&#x27;m fighting quota issues with my dumb host. I assure you migrating to something better is not my day job. Here&#x27;s a pdf of it:</p><p><a href=\"https:&#x2F;&#x2F;www.dropbox.com&#x2F;s&#x2F;1k7ngf52o822ccy&#x2F;choose-boring-tech.pdf?dl=0\" rel=\"nofollow\">https:&#x2F;&#x2F;www.dropbox.com&#x2F;s&#x2F;1k7ngf52o822ccy&#x2F;choose-boring-tech...</a></p>","parent_id":9291464,"points":0,"children":[{"id":9291786,"key":9291786,"title":"<p>That&#x27;s what boring technology will get you.</p>","created_at":"2015-03-30T19:03:56Z","author":"nijiko","text":"<p>That&#x27;s what boring technology will get you.</p>","parent_id":9291719,"points":0,"children":[{"id":9292047,"key":9292047,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]},{"id":9294399,"key":9294399,"title":"<p>Snark by people who wouldn&#x27;t do better on the best of their days? If that&#x27;s the only problem: +1 for boring technology</p>","created_at":"2015-03-31T04:33:50Z","author":"sgift","text":"<p>Snark by people who wouldn&#x27;t do better on the best of their days? If that&#x27;s the only problem: +1 for boring technology</p>","parent_id":9291786,"points":0,"children":[]}]}]}]}]},{"id":9294484,"key":9294484,"title":"<p>Was forced to use Xamarin Forms in a project recently. It is less than a year old, and not suited to what we need. But somehow the idea was it will save time.</p><p>It was a world of pain.</p>","created_at":"2015-03-31T05:06:39Z","author":"megablast","text":"<p>Was forced to use Xamarin Forms in a project recently. It is less than a year old, and not suited to what we need. But somehow the idea was it will save time.</p><p>It was a world of pain.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291437,"key":9291437,"title":"<p>Every time I spin up a new project, I try to answer the following question honestly:</p><p><pre><code>    &quot;Am I using this project as an excuse to learn\n    some new technology, or am I trying to solve a problem?&quot;\n</code></pre>\nTrying to learn some new technology? Awesome, I get to use <i>one</i> new thing. Since I already understand every other variable in my stack, I&#x27;ll have a much easier time pinning down those &#x27;unknown unknown&#x27; issues that invariably crop up over time.</p><p>Trying to solve a problem? I&#x27;m going to use what I already know. For web stuff, this&#x27;ll be a super-boring, totally standard Rails web app that generates <i>HTML</i> (ugh, right? How <i>last century</i>), or maybe a JSON API if I&#x27;m trying to consume its output in a native app. For mobile stuff, this&#x27;ll be an Objective-C iOS app.</p><p>Waffling about it and saying &#x27;well, I am trying to solve a problem, and I think maybe a new whiz-bang technology is the best way to do it&#x27; is the simplest path to failing miserably. I&#x27;ve watched incredibly well-funded startups with smart people fail miserably at delivering a solution on-time because an engineer was able to convince the powers that be that a buzzword-laden architecture was the way to go.</p><p>You don&#x27;t know what the &#x27;right&#x27; solution is unless you understand the tools and technology you&#x27;ll use to deliver that solution. Anything else is just cargo-culting.</p>","created_at":"2015-03-30T18:17:53Z","author":"aaronbrethorst","text":"<p>Every time I spin up a new project, I try to answer the following question honestly:</p><p><pre><code>    &quot;Am I using this project as an excuse to learn\n    some new technology, or am I trying to solve a problem?&quot;\n</code></pre>\nTrying to learn some new technology? Awesome, I get to use <i>one</i> new thing. Since I already understand every other variable in my stack, I&#x27;ll have a much easier time pinning down those &#x27;unknown unknown&#x27; issues that invariably crop up over time.</p><p>Trying to solve a problem? I&#x27;m going to use what I already know. For web stuff, this&#x27;ll be a super-boring, totally standard Rails web app that generates <i>HTML</i> (ugh, right? How <i>last century</i>), or maybe a JSON API if I&#x27;m trying to consume its output in a native app. For mobile stuff, this&#x27;ll be an Objective-C iOS app.</p><p>Waffling about it and saying &#x27;well, I am trying to solve a problem, and I think maybe a new whiz-bang technology is the best way to do it&#x27; is the simplest path to failing miserably. I&#x27;ve watched incredibly well-funded startups with smart people fail miserably at delivering a solution on-time because an engineer was able to convince the powers that be that a buzzword-laden architecture was the way to go.</p><p>You don&#x27;t know what the &#x27;right&#x27; solution is unless you understand the tools and technology you&#x27;ll use to deliver that solution. Anything else is just cargo-culting.</p>","parent_id":9291215,"points":0,"children":[{"id":9293671,"key":9293671,"title":"<p>Comments here are geared against picking a technology just because it is brand new and exciting, but sometimes you need to pick up something that is just different from what you or your team know well.</p><p>In a project I worked on once, we went with &quot;what we knew&quot; (standard normalized SQL schema) to build an analytics engine. The problem with &quot;going with what you know&quot; is you are likely to badly reinvent well-established patterns. If we had stop for a minute and learnt about star schemas, the project could have ended in a much better shape than it did, and maybe the effective time to release would had been shortened.</p><p>BTW, learning &quot;new things&quot; is almost always useful but isn&#x27;t always precisely exciting. Data warehousing is one example :-).</p><p>Becoming proficient with a selected set of technologies is still a good idea, but I&#x27;m willing to learn and try new things all the time. First thing I ask myself is if a problem was already solved by someone else, and how.</p>","created_at":"2015-03-31T00:46:34Z","author":"emmanueloga_","text":"<p>Comments here are geared against picking a technology just because it is brand new and exciting, but sometimes you need to pick up something that is just different from what you or your team know well.</p><p>In a project I worked on once, we went with &quot;what we knew&quot; (standard normalized SQL schema) to build an analytics engine. The problem with &quot;going with what you know&quot; is you are likely to badly reinvent well-established patterns. If we had stop for a minute and learnt about star schemas, the project could have ended in a much better shape than it did, and maybe the effective time to release would had been shortened.</p><p>BTW, learning &quot;new things&quot; is almost always useful but isn&#x27;t always precisely exciting. Data warehousing is one example :-).</p><p>Becoming proficient with a selected set of technologies is still a good idea, but I&#x27;m willing to learn and try new things all the time. First thing I ask myself is if a problem was already solved by someone else, and how.</p>","parent_id":9291437,"points":0,"children":[{"id":9294012,"key":9294012,"title":"<p>FWIW, maybe the approach in this case <i>is</i> traditional normalization to get the product out the door. When it becomes untenable, hire someone for whom star schemas are boring.</p><p>Put another way, the star schema was known to be a better approach only after the fact. Had your team researched “exotic” (unfamiliar) approaches early on, there is no guarantee you would have landed on a star schema.</p>","created_at":"2015-03-31T02:18:19Z","author":"mwsherman","text":"<p>FWIW, maybe the approach in this case <i>is</i> traditional normalization to get the product out the door. When it becomes untenable, hire someone for whom star schemas are boring.</p><p>Put another way, the star schema was known to be a better approach only after the fact. Had your team researched “exotic” (unfamiliar) approaches early on, there is no guarantee you would have landed on a star schema.</p>","parent_id":9293671,"points":0,"children":[{"id":9294309,"key":9294309,"title":"<p>Eehhh... I knew about star schemas already, although I&#x27;ve never used one. I do think my cursory knowledge would have caused me to research them when starting a project like that though. Obviously it&#x27;s all got to be a balance, but I think that the OP is probably a little bit too conservative.</p><p>Especially if you are working for other people, we are paid to innovate, and we are paid to learn stuff until it is boring. We&#x27;ve got to stick up for ourselves and learn on the job when we can. One new thing a project sounds great to me.</p>","created_at":"2015-03-31T04:05:47Z","author":"woah","text":"<p>Eehhh... I knew about star schemas already, although I&#x27;ve never used one. I do think my cursory knowledge would have caused me to research them when starting a project like that though. Obviously it&#x27;s all got to be a balance, but I think that the OP is probably a little bit too conservative.</p><p>Especially if you are working for other people, we are paid to innovate, and we are paid to learn stuff until it is boring. We&#x27;ve got to stick up for ourselves and learn on the job when we can. One new thing a project sounds great to me.</p>","parent_id":9294012,"points":0,"children":[]}]}]},{"id":9292154,"key":9292154,"title":"<p>&gt;  &quot;Am I using this project as an excuse to learn\n    some new technology, or am I trying to solve a problem?&quot;</p><p>How about both?</p>","created_at":"2015-03-30T19:57:03Z","author":"mandeepj","text":"<p>&gt;  &quot;Am I using this project as an excuse to learn\n    some new technology, or am I trying to solve a problem?&quot;</p><p>How about both?</p>","parent_id":9291437,"points":0,"children":[{"id":9292167,"key":9292167,"title":"<p>You may well eventually solve the problem, but not on a timeframe that will be useful to anyone besides yourself.</p>","created_at":"2015-03-30T19:59:16Z","author":"aaronbrethorst","text":"<p>You may well eventually solve the problem, but not on a timeframe that will be useful to anyone besides yourself.</p>","parent_id":9292154,"points":0,"children":[{"id":9292366,"key":9292366,"title":"<p>Usefulness to yourself is sometimes the only thing that matters. I&#x27;m not trying to be snarky here: your own self-development is not anyone&#x27;s interest, except yours.</p><p>If you&#x27;re a PHP developer wanting to start some Python, your boss would love you to continue working with legacy codebase using PHP instead of migrating parts of it to Python. At the expense of your future career prospects, of course.</p>","created_at":"2015-03-30T20:32:34Z","author":"smikhanov","text":"<p>Usefulness to yourself is sometimes the only thing that matters. I&#x27;m not trying to be snarky here: your own self-development is not anyone&#x27;s interest, except yours.</p><p>If you&#x27;re a PHP developer wanting to start some Python, your boss would love you to continue working with legacy codebase using PHP instead of migrating parts of it to Python. At the expense of your future career prospects, of course.</p>","parent_id":9292167,"points":0,"children":[{"id":9292440,"key":9292440,"title":"<p>I&#x27;m talking more about delivering value and less about self-improvement. Both have a time and a place, but your boss is unlikely to look kindly on you saying &quot;I&#x27;m interested in learning Python, so I&#x27;ve decided to rewrite our 1mm user web app in Python instead of fixing the bugs you asked me to, because I think I could make more money with that than PHP.&quot;</p>","created_at":"2015-03-30T20:41:40Z","author":"aaronbrethorst","text":"<p>I&#x27;m talking more about delivering value and less about self-improvement. Both have a time and a place, but your boss is unlikely to look kindly on you saying &quot;I&#x27;m interested in learning Python, so I&#x27;ve decided to rewrite our 1mm user web app in Python instead of fixing the bugs you asked me to, because I think I could make more money with that than PHP.&quot;</p>","parent_id":9292366,"points":0,"children":[{"id":9292635,"key":9292635,"title":"<p>Actually, as a boss I frequently <i></i>do<i></i> look kindly on that.  I&#x27;d much prefer to have that built into assumptions and explicit upfront.</p><p>Sometimes I may say &quot;can we do that on our 1K user side project instead?&quot; but I think that if you are managing developmental resources and you are not allowing them learn new things, you are not following a strategy that is likely to work out long term.</p>","created_at":"2015-03-30T21:11:05Z","author":"kasey_junk","text":"<p>Actually, as a boss I frequently <i></i>do<i></i> look kindly on that.  I&#x27;d much prefer to have that built into assumptions and explicit upfront.</p><p>Sometimes I may say &quot;can we do that on our 1K user side project instead?&quot; but I think that if you are managing developmental resources and you are not allowing them learn new things, you are not following a strategy that is likely to work out long term.</p>","parent_id":9292440,"points":0,"children":[{"id":9293868,"key":9293868,"title":"<p>Woot you got minions now!</p>","created_at":"2015-03-31T01:34:19Z","author":"brianwawok","text":"<p>Woot you got minions now!</p>","parent_id":9292635,"points":0,"children":[]},{"id":9292720,"key":9292720,"title":"<p>&gt; I&#x27;d much prefer to have that built into assumptions and explicit upfront.</p><p>How do you build unbounded learning time and an unguessable set of work items into a schedule?</p>","created_at":"2015-03-30T21:26:33Z","author":"aaronbrethorst","text":"<p>&gt; I&#x27;d much prefer to have that built into assumptions and explicit upfront.</p><p>How do you build unbounded learning time and an unguessable set of work items into a schedule?</p>","parent_id":9292635,"points":0,"children":[{"id":9292899,"key":9292899,"title":"<p>Easy, you spec out doing it &quot;conventionally&quot; and pad with a reasonable first guess to do something unconventional.</p><p>Oh we need that in 2 weeks?  And its about one weeks work the old fashioned way?  Well try something else fun for a bit less than a week.  Sometimes you win, sometimes you lose.</p><p>Sometimes you can do both in parallel.  In the real world there&#x27;s always wall clock time delays imposed by whatever.  So when you&#x27;re stuck waiting for whatever, learn as much as you can about XYZ till the main line is unblocked.</p>","created_at":"2015-03-30T21:57:01Z","author":"VLM","text":"<p>Easy, you spec out doing it &quot;conventionally&quot; and pad with a reasonable first guess to do something unconventional.</p><p>Oh we need that in 2 weeks?  And its about one weeks work the old fashioned way?  Well try something else fun for a bit less than a week.  Sometimes you win, sometimes you lose.</p><p>Sometimes you can do both in parallel.  In the real world there&#x27;s always wall clock time delays imposed by whatever.  So when you&#x27;re stuck waiting for whatever, learn as much as you can about XYZ till the main line is unblocked.</p>","parent_id":9292720,"points":0,"children":[]},{"id":9292915,"key":9292915,"title":"<p>You adjust the schedule as required and don&#x27;t do it for projects with tight deadlines.</p><p>The truth is if you don&#x27;t ensure your developers career development is baked into your schedules then you get a combination of high turnover, unmotivated engineers, and engineers who learn on the clock &quot;in secret&quot; by making decisions that are best for them rather than best for the company.</p><p>All of these cause far more problems and are harder to account for than being upfront in the first place.</p>","created_at":"2015-03-30T22:00:03Z","author":"sheepmullet","text":"<p>You adjust the schedule as required and don&#x27;t do it for projects with tight deadlines.</p><p>The truth is if you don&#x27;t ensure your developers career development is baked into your schedules then you get a combination of high turnover, unmotivated engineers, and engineers who learn on the clock &quot;in secret&quot; by making decisions that are best for them rather than best for the company.</p><p>All of these cause far more problems and are harder to account for than being upfront in the first place.</p>","parent_id":9292720,"points":0,"children":[{"id":9293208,"key":9293208,"title":"<p>&gt; and engineers who learn on the clock &quot;in secret&quot; by making decisions that are best for them rather than best for the company</p><p>Yes, and possibly not even consciously.  Without that constant reminder of the pitfalls and learning curve of new technology, it&#x27;s easy to convince yourself it&#x27;s all upsides, or at the least undervalue the downsides.</p>","created_at":"2015-03-30T23:01:47Z","author":"kbenson","text":"<p>&gt; and engineers who learn on the clock &quot;in secret&quot; by making decisions that are best for them rather than best for the company</p><p>Yes, and possibly not even consciously.  Without that constant reminder of the pitfalls and learning curve of new technology, it&#x27;s easy to convince yourself it&#x27;s all upsides, or at the least undervalue the downsides.</p>","parent_id":9292915,"points":0,"children":[]}]}]}]}]}]}]}]},{"id":9291645,"key":9291645,"title":"<p>I do the same thing and usually end up trying to solve a problem using WordPress which is probably cringe-worthy to a lot of people. Most of the things I come up with are basically content-publishing so it works really well for hacking around and making something fun.</p><p>My latest creation is a instagram-style feed of the beers a few friends of mine have been enjoying recently.</p><p>It works just fine and none of my non-technical friends have cared that they add beers in their mobile browser rather than via an app or something.</p>","created_at":"2015-03-30T18:46:37Z","author":"stevesearer","text":"<p>I do the same thing and usually end up trying to solve a problem using WordPress which is probably cringe-worthy to a lot of people. Most of the things I come up with are basically content-publishing so it works really well for hacking around and making something fun.</p><p>My latest creation is a instagram-style feed of the beers a few friends of mine have been enjoying recently.</p><p>It works just fine and none of my non-technical friends have cared that they add beers in their mobile browser rather than via an app or something.</p>","parent_id":9291437,"points":0,"children":[]},{"id":9292952,"key":9292952,"title":"<p><i>(ugh, right? How last century)</i></p><p>Its not really about a &quot;last century&quot; thing, &quot;last century&quot; most apps need not multiple front-ends like today, unless you are 100% you won&#x27;t need multiple front-ends, doing a json api from the start simplifies things a lot.</p>","created_at":"2015-03-30T22:08:52Z","author":"Scarbutt","text":"<p><i>(ugh, right? How last century)</i></p><p>Its not really about a &quot;last century&quot; thing, &quot;last century&quot; most apps need not multiple front-ends like today, unless you are 100% you won&#x27;t need multiple front-ends, doing a json api from the start simplifies things a lot.</p>","parent_id":9291437,"points":0,"children":[{"id":9293394,"key":9293394,"title":"<p>Last century most apps absolutely did need multiple front-ends.  Don&#x27;t you remember the days when there was a Windows version, a Mac version, a Java version, if you were lucky a Linux version, and maybe a web version for the bleeding-edge developers?</p><p>Relatively fewer apps were network-enabled, but even then, there were a bunch of technologies like CORBA, DCOM, and RMI to marshal communications.  There were also a bunch of custom binary protocols; back then, it was common for software developers to work on all levels of the stack, and the culture of library re-use was not as entrenched (at least in the enterprise) as it is today.</p>","created_at":"2015-03-30T23:40:25Z","author":"nostrademons","text":"<p>Last century most apps absolutely did need multiple front-ends.  Don&#x27;t you remember the days when there was a Windows version, a Mac version, a Java version, if you were lucky a Linux version, and maybe a web version for the bleeding-edge developers?</p><p>Relatively fewer apps were network-enabled, but even then, there were a bunch of technologies like CORBA, DCOM, and RMI to marshal communications.  There were also a bunch of custom binary protocols; back then, it was common for software developers to work on all levels of the stack, and the culture of library re-use was not as entrenched (at least in the enterprise) as it is today.</p>","parent_id":9292952,"points":0,"children":[]},{"id":9292978,"key":9292978,"title":"<p>I was being a smartass :)</p><p><pre><code>    unless you are 100% you won&#x27;t need\n    multiple front-ends, doing a json\n    api from the start simplifies things\n    a lot.\n</code></pre>\nThis also presumes that I already know Backbone, Ember, React, Knockout, Batman, Angular, or whichever new JS single page app frameworks have appeared in the last 30 seconds.</p><p>Would you agree that it&#x27;s easier[1] to write a web app that emits HTML than it is to write a web app that emits JSON which is consumed by a single page web app written in Javascript?</p><p>[1] Where I define &quot;easier&quot; in this context to mean requiring less wall clock time to get something showing up on-screen and doing something useful.</p>","created_at":"2015-03-30T22:12:57Z","author":"aaronbrethorst","text":"<p>I was being a smartass :)</p><p><pre><code>    unless you are 100% you won&#x27;t need\n    multiple front-ends, doing a json\n    api from the start simplifies things\n    a lot.\n</code></pre>\nThis also presumes that I already know Backbone, Ember, React, Knockout, Batman, Angular, or whichever new JS single page app frameworks have appeared in the last 30 seconds.</p><p>Would you agree that it&#x27;s easier[1] to write a web app that emits HTML than it is to write a web app that emits JSON which is consumed by a single page web app written in Javascript?</p><p>[1] Where I define &quot;easier&quot; in this context to mean requiring less wall clock time to get something showing up on-screen and doing something useful.</p>","parent_id":9292952,"points":0,"children":[{"id":9293080,"key":9293080,"title":"<p>You don&#x27;t have to use a JS MVC framework just because you built your core logic behind a JSON API. You can just as easily have a server side rendering app talk to the JSON API instead of the directly to the datastores. You get to stick with &#x27;what you know&#x27; while still maintaining flexibility for later.</p>","created_at":"2015-03-30T22:32:54Z","author":"mbell","text":"<p>You don&#x27;t have to use a JS MVC framework just because you built your core logic behind a JSON API. You can just as easily have a server side rendering app talk to the JSON API instead of the directly to the datastores. You get to stick with &#x27;what you know&#x27; while still maintaining flexibility for later.</p>","parent_id":9292978,"points":0,"children":[{"id":9293171,"key":9293171,"title":"<p>yes, but it will more complex and take up more time, which I think is what he is talking about.</p>","created_at":"2015-03-30T22:54:05Z","author":"Scarbutt","text":"<p>yes, but it will more complex and take up more time, which I think is what he is talking about.</p>","parent_id":9293080,"points":0,"children":[]}]}]}]},{"id":9292203,"key":9292203,"title":"<p>That&#x27;s a great approach. By restricting yourself to one new thing, you can evaluate it in isolation.</p><p>Then, when you make your decision about that new thing, you&#x27;ll <i>know</i> why you like&#x2F;dislike it. Your decision won&#x27;t be clouded by arbitrary things like libraries inter-dependencies.</p>","created_at":"2015-03-30T20:05:08Z","author":"pothibo","text":"<p>That&#x27;s a great approach. By restricting yourself to one new thing, you can evaluate it in isolation.</p><p>Then, when you make your decision about that new thing, you&#x27;ll <i>know</i> why you like&#x2F;dislike it. Your decision won&#x27;t be clouded by arbitrary things like libraries inter-dependencies.</p>","parent_id":9291437,"points":0,"children":[]},{"id":9292497,"key":9292497,"title":"<p>How much can you learn if you&#x27;re not trying to solve a real problem, though? My personal experience is that I can dink around with a new technology all I want, and not learn half as much as when I&#x27;m trying to apply it to do something real.</p>","created_at":"2015-03-30T20:48:49Z","author":"snowwrestler","text":"<p>How much can you learn if you&#x27;re not trying to solve a real problem, though? My personal experience is that I can dink around with a new technology all I want, and not learn half as much as when I&#x27;m trying to apply it to do something real.</p>","parent_id":9291437,"points":0,"children":[{"id":9292579,"key":9292579,"title":"<p>Sorry, I was more vague on that initially than I should&#x27;ve been. I&#x27;ve answered this elsewhere, but: what I was referring to was delivering value on behalf of someone else vs. using a given problem as an opportunity to learn something new. Delivering value (e.g. adding a new feature to your product, fixing a bug in a shipping product, identifying and attacking a market opportunity) shouldn&#x27;t be seen as an excuse to learn a new technology unless you have absolutely no pressure to ship that work on any sort of schedule at any presumed level of acceptable quality.</p><p>I&#x27;m the same way: I need a real problem to work whether I&#x27;m applying skills I know or skills I want to learn. I just don&#x27;t ever promise anyone (except myself) anything when I&#x27;m applying technologies I don&#x27;t yet know to the problem.</p>","created_at":"2015-03-30T20:59:37Z","author":"aaronbrethorst","text":"<p>Sorry, I was more vague on that initially than I should&#x27;ve been. I&#x27;ve answered this elsewhere, but: what I was referring to was delivering value on behalf of someone else vs. using a given problem as an opportunity to learn something new. Delivering value (e.g. adding a new feature to your product, fixing a bug in a shipping product, identifying and attacking a market opportunity) shouldn&#x27;t be seen as an excuse to learn a new technology unless you have absolutely no pressure to ship that work on any sort of schedule at any presumed level of acceptable quality.</p><p>I&#x27;m the same way: I need a real problem to work whether I&#x27;m applying skills I know or skills I want to learn. I just don&#x27;t ever promise anyone (except myself) anything when I&#x27;m applying technologies I don&#x27;t yet know to the problem.</p>","parent_id":9292497,"points":0,"children":[]}]},{"id":9293032,"key":9293032,"title":"<p>I generally agree with your post, but I think there is a critical difference between your argument and that of the blog post. Of course teams are more productive with technologies they know, but that isn&#x27;t necessarily an arbitrarily-defined &quot;boring&quot; technology.</p><p>To pick on one specific example in the post: Node.js is popular enough that there are lots of teams and engineers that are most comfortable and productive working with it. For these teams, choosing Node certainly wouldn&#x27;t cost an innovation token, while deciding to build some service in Python, Ruby or PHP (if we take at face value that this is more &quot;boring&quot;) may end up being more costly.</p>","created_at":"2015-03-30T22:22:41Z","author":"shebson","text":"<p>I generally agree with your post, but I think there is a critical difference between your argument and that of the blog post. Of course teams are more productive with technologies they know, but that isn&#x27;t necessarily an arbitrarily-defined &quot;boring&quot; technology.</p><p>To pick on one specific example in the post: Node.js is popular enough that there are lots of teams and engineers that are most comfortable and productive working with it. For these teams, choosing Node certainly wouldn&#x27;t cost an innovation token, while deciding to build some service in Python, Ruby or PHP (if we take at face value that this is more &quot;boring&quot;) may end up being more costly.</p>","parent_id":9291437,"points":0,"children":[{"id":9293408,"key":9293408,"title":"<p>&gt; For these teams, choosing Node certainly wouldn&#x27;t cost an innovation token, while deciding to build some service in Python, Ruby or PHP (if we take at face value that this is more &quot;boring&quot;) may end up being more costly.</p><p>It absolutely does if it is only one team in the organization.  If the entire organization is using PHP and, let&#x27;s say, you acqui-hire a team based on NodeJS, unless they are doing something absolutely fundamentally different they should learn PHP and push code in your existing infrastructure.  This way you have one way to deploy, one type of application server to support, one set of gotchas relevant to your domain, one set of QA tools etc.  Building good products is about far more than just shipping the product, it&#x27;s also about the cost of long term support.  Because what you are doing is fundamentally automation, the less you have to manage the more benefit of the automation you are getting, the more you can forget about it and focus on shipping other things.</p><p>What you are describing is pretty much definitionally local optimization and is exactly what you shouldn&#x27;t do in large engineering organizations.</p>","created_at":"2015-03-30T23:42:25Z","author":"wdewind","text":"<p>&gt; For these teams, choosing Node certainly wouldn&#x27;t cost an innovation token, while deciding to build some service in Python, Ruby or PHP (if we take at face value that this is more &quot;boring&quot;) may end up being more costly.</p><p>It absolutely does if it is only one team in the organization.  If the entire organization is using PHP and, let&#x27;s say, you acqui-hire a team based on NodeJS, unless they are doing something absolutely fundamentally different they should learn PHP and push code in your existing infrastructure.  This way you have one way to deploy, one type of application server to support, one set of gotchas relevant to your domain, one set of QA tools etc.  Building good products is about far more than just shipping the product, it&#x27;s also about the cost of long term support.  Because what you are doing is fundamentally automation, the less you have to manage the more benefit of the automation you are getting, the more you can forget about it and focus on shipping other things.</p><p>What you are describing is pretty much definitionally local optimization and is exactly what you shouldn&#x27;t do in large engineering organizations.</p>","parent_id":9293032,"points":0,"children":[{"id":9293415,"key":9293415,"title":"<p>Depends on your increment of isolation. This is, in theory, why microservices with APIs mean that it really doesn&#x27;t matter. As long as there are sufficient hire-able engineers who know that technology, it can be used.</p>","created_at":"2015-03-30T23:46:15Z","author":"mentat","text":"<p>Depends on your increment of isolation. This is, in theory, why microservices with APIs mean that it really doesn&#x27;t matter. As long as there are sufficient hire-able engineers who know that technology, it can be used.</p>","parent_id":9293408,"points":0,"children":[{"id":9294117,"key":9294117,"title":"<p>I haven&#x27;t worked in a specifically microservice environment, but I am currently working in a company that has quite diverse technology choices. One of the problems we have is that we&#x27;re pretty small, and sometimes there is a lot more work that needs to be done on one component than another, in those cases you can&#x27;t really have people who are relying on the work help.</p><p>E.g. we use erlang&#x2F;cowboy for our web server and when there are bottlenecks changing that, they pretty much fall on two people who know erlang well enough to work on it.</p><p>It seems like it would have been better if the web server was written in something a larger chunk of the engineering org could modify so that when people needed changes to it for their project, they could make the changes, get them code reviewed by the maintainer, and get it shipped.</p><p>The other concern I have with microservices is that doing any wide-ranging changes is hard. Maybe it&#x27;s always hard, but microservices seem like they would exacerbate the problem. I feel like I already run into this issue at my current job where we mostly have small (~10k) codebases, where people don&#x27;t really want to make changes that will require making changes to more than two of them at once.</p>","created_at":"2015-03-31T02:59:05Z","author":"Eridrus","text":"<p>I haven&#x27;t worked in a specifically microservice environment, but I am currently working in a company that has quite diverse technology choices. One of the problems we have is that we&#x27;re pretty small, and sometimes there is a lot more work that needs to be done on one component than another, in those cases you can&#x27;t really have people who are relying on the work help.</p><p>E.g. we use erlang&#x2F;cowboy for our web server and when there are bottlenecks changing that, they pretty much fall on two people who know erlang well enough to work on it.</p><p>It seems like it would have been better if the web server was written in something a larger chunk of the engineering org could modify so that when people needed changes to it for their project, they could make the changes, get them code reviewed by the maintainer, and get it shipped.</p><p>The other concern I have with microservices is that doing any wide-ranging changes is hard. Maybe it&#x27;s always hard, but microservices seem like they would exacerbate the problem. I feel like I already run into this issue at my current job where we mostly have small (~10k) codebases, where people don&#x27;t really want to make changes that will require making changes to more than two of them at once.</p>","parent_id":9293415,"points":0,"children":[]},{"id":9293468,"key":9293468,"title":"<p>&gt; This is, in theory, why microservices with APIs mean that it really doesn&#x27;t matter.</p><p>No it still really does matter, because if your company needs to deploy those microservices in different ways then you need more people to support the deployment infrastructure.  If you need to test those microservices in more ways you need more people to support the testing infrastructure.  For engineers it&#x27;s the amount of friction felt when trying to move around and work on new and different problems in your company because they&#x27;re one of five people who knows how the hell the Java infrastructure works.</p><p>If you have an existing testing and deployment infrastructure etc. your team gets those for free and doesn&#x27;t need to reinvent (and support) those wheels.</p><p>&gt; As long as there are sufficient hire-able engineers who know that technology, it can be used.</p><p>Yikes.  Hiring and firing engineers is pretty hugely expensive and something you want to help avoid having to do.</p>","created_at":"2015-03-30T23:58:03Z","author":"wdewind","text":"<p>&gt; This is, in theory, why microservices with APIs mean that it really doesn&#x27;t matter.</p><p>No it still really does matter, because if your company needs to deploy those microservices in different ways then you need more people to support the deployment infrastructure.  If you need to test those microservices in more ways you need more people to support the testing infrastructure.  For engineers it&#x27;s the amount of friction felt when trying to move around and work on new and different problems in your company because they&#x27;re one of five people who knows how the hell the Java infrastructure works.</p><p>If you have an existing testing and deployment infrastructure etc. your team gets those for free and doesn&#x27;t need to reinvent (and support) those wheels.</p><p>&gt; As long as there are sufficient hire-able engineers who know that technology, it can be used.</p><p>Yikes.  Hiring and firing engineers is pretty hugely expensive and something you want to help avoid having to do.</p>","parent_id":9293415,"points":0,"children":[{"id":9293552,"key":9293552,"title":"<p>&gt; <i>No it still really does matter, because if your company needs to deploy those microservices in different ways then you need more people to support the deployment infrastructure.</i></p><p>This is what PaaSes make a non-problem.</p><p>I should know, I worked on Cloud Foundry Buildpacks.</p><p>Here&#x27;s how to deploy the PHP app:</p><p><pre><code>    cf push your-php-app\n</code></pre>\nAnd the Nodejs app:</p><p><pre><code>    cf push your-nodejs-app\n</code></pre>\nAnd hell, why not a Ruby app too:</p><p><pre><code>    cf push your-ruby-app\n</code></pre>\nAnd let&#x27;s not forget that Python microservice:</p><p><pre><code>    cf push python-code-works-the-same-way\n</code></pre>\nWe also kept up with the cool kids:</p><p><pre><code>    cf push your-go-code-with-a-godeps-file\n</code></pre>\nAnd for the &quot;boring&quot; crowd:</p><p><pre><code>    cf push your-java-app-too\n</code></pre>\nIn general, these are all intended to Just Work™.</p><p>You know how making these surprisingly unalike systems deploy identically is really hard?</p><p>So does Heroku, from whom a large body of Cloud Foundry buildpacks code is derived. So did we, when we found issues specific to making code that assumes a connected environment work in a disconnected environment.</p><p>The point is, if you&#x27;re doing this all by hand, you&#x27;re doing it wrong. You should rent or install a PaaS and move along to the part where you create value instead of inventing a cool-sounding wheel.</p>","created_at":"2015-03-31T00:19:04Z","author":"jacques_chester","text":"<p>&gt; <i>No it still really does matter, because if your company needs to deploy those microservices in different ways then you need more people to support the deployment infrastructure.</i></p><p>This is what PaaSes make a non-problem.</p><p>I should know, I worked on Cloud Foundry Buildpacks.</p><p>Here&#x27;s how to deploy the PHP app:</p><p><pre><code>    cf push your-php-app\n</code></pre>\nAnd the Nodejs app:</p><p><pre><code>    cf push your-nodejs-app\n</code></pre>\nAnd hell, why not a Ruby app too:</p><p><pre><code>    cf push your-ruby-app\n</code></pre>\nAnd let&#x27;s not forget that Python microservice:</p><p><pre><code>    cf push python-code-works-the-same-way\n</code></pre>\nWe also kept up with the cool kids:</p><p><pre><code>    cf push your-go-code-with-a-godeps-file\n</code></pre>\nAnd for the &quot;boring&quot; crowd:</p><p><pre><code>    cf push your-java-app-too\n</code></pre>\nIn general, these are all intended to Just Work™.</p><p>You know how making these surprisingly unalike systems deploy identically is really hard?</p><p>So does Heroku, from whom a large body of Cloud Foundry buildpacks code is derived. So did we, when we found issues specific to making code that assumes a connected environment work in a disconnected environment.</p><p>The point is, if you&#x27;re doing this all by hand, you&#x27;re doing it wrong. You should rent or install a PaaS and move along to the part where you create value instead of inventing a cool-sounding wheel.</p>","parent_id":9293468,"points":0,"children":[{"id":9293652,"key":9293652,"title":"<p>&gt; The point is, if you&#x27;re doing this all by hand, you&#x27;re doing it wrong. You should rent or install a PaaS and move along to the part where you create value instead of inventing a cool-sounding wheel.</p><p>That makes a lot of sense for small organizations, but I&#x27;m sorry PaaSs absolutely do not scale to the needs of many organizations.</p><p>&gt; In general, these are all <i>intended</i> to Just Work™.</p><p>My emphasis added.  When they don&#x27;t Just Work it&#x27;s really nice to own that infrastructure and be able to fix it yourself.  It&#x27;s also nice to be able to tailor things more specifically to your needs.  Again, I agree that owning that infrastructure is not the right solution for organizations of all sizes, but neither are PaaSs.</p>","created_at":"2015-03-31T00:41:52Z","author":"wdewind","text":"<p>&gt; The point is, if you&#x27;re doing this all by hand, you&#x27;re doing it wrong. You should rent or install a PaaS and move along to the part where you create value instead of inventing a cool-sounding wheel.</p><p>That makes a lot of sense for small organizations, but I&#x27;m sorry PaaSs absolutely do not scale to the needs of many organizations.</p><p>&gt; In general, these are all <i>intended</i> to Just Work™.</p><p>My emphasis added.  When they don&#x27;t Just Work it&#x27;s really nice to own that infrastructure and be able to fix it yourself.  It&#x27;s also nice to be able to tailor things more specifically to your needs.  Again, I agree that owning that infrastructure is not the right solution for organizations of all sizes, but neither are PaaSs.</p>","parent_id":9293552,"points":0,"children":[{"id":9293866,"key":9293866,"title":"<p>&gt; <i>That makes a lot of sense for small organizations, but I&#x27;m sorry PaaSs absolutely do not scale to the needs of many organizations.</i></p><p>Outside of the giants who rolled their own because there was nothing around in the early 2000s, who?</p><p>&gt; <i>When they don&#x27;t Just Work it&#x27;s really nice to own that infrastructure and be able to fix it yourself.</i></p><p>Cloud Foundry is specifically designed to run either in the public cloud, the private cloud, or both. You can get it hosted it from Pivotal or IBM, amongst others.</p><p>The work of my peers and I made that possible.</p><p>&gt; <i>It&#x27;s also nice to be able to tailor things more specifically to your needs.</i></p><p>Cloud Foundry is opensource and the IP belongs to an independent foundation. I am personally aware of at least two companies who have private forks of buildpacks because that suited their extremely precise requirements. It took them about two developer days, tops.</p><p>And their modified buildpacks also Just Work™, because they&#x27;re based on a robust design that Just Works™.</p>","created_at":"2015-03-31T01:34:12Z","author":"jacques_chester","text":"<p>&gt; <i>That makes a lot of sense for small organizations, but I&#x27;m sorry PaaSs absolutely do not scale to the needs of many organizations.</i></p><p>Outside of the giants who rolled their own because there was nothing around in the early 2000s, who?</p><p>&gt; <i>When they don&#x27;t Just Work it&#x27;s really nice to own that infrastructure and be able to fix it yourself.</i></p><p>Cloud Foundry is specifically designed to run either in the public cloud, the private cloud, or both. You can get it hosted it from Pivotal or IBM, amongst others.</p><p>The work of my peers and I made that possible.</p><p>&gt; <i>It&#x27;s also nice to be able to tailor things more specifically to your needs.</i></p><p>Cloud Foundry is opensource and the IP belongs to an independent foundation. I am personally aware of at least two companies who have private forks of buildpacks because that suited their extremely precise requirements. It took them about two developer days, tops.</p><p>And their modified buildpacks also Just Work™, because they&#x27;re based on a robust design that Just Works™.</p>","parent_id":9293652,"points":0,"children":[{"id":9293925,"key":9293925,"title":"<p>That&#x27;s really cool, I did not know about that.  You were talking about PaaS and Heroku, which I don&#x27;t think is the same as forking an OS project and owning it yourself, which is fine for what I was talking about.  I don&#x27;t think it&#x27;s difficult to name companies for whom Heroku is not appropriate.  Regardless, it&#x27;s all about where you draw the line, gradations not black and white.</p><p>I still stick to my main point: your organization gets a massive benefit by all using the same toolset.  If you are using Cloud Foundry, I&#x27;d still suggest the whole company stick with one language, one deployment infrastructure etc.</p><p>To be clear, if you&#x27;re google I&#x27;m not suggesting the entire company all be forced to use one language or something.  In that case your company is likely working on products that are different enough that it makes sense to do away with some global optimization.  Some judgment is obviously required.  But if you&#x27;re in the sub-500 range (which the vast majority are) it makes a lot of sense to really optimize globally with your toolset, even if deployment infrastructure is relatively easy to setup.</p><p>PS I love that you are using the phrase Just Works - the company I work for is called Justworks :)</p>","created_at":"2015-03-31T01:53:38Z","author":"wdewind","text":"<p>That&#x27;s really cool, I did not know about that.  You were talking about PaaS and Heroku, which I don&#x27;t think is the same as forking an OS project and owning it yourself, which is fine for what I was talking about.  I don&#x27;t think it&#x27;s difficult to name companies for whom Heroku is not appropriate.  Regardless, it&#x27;s all about where you draw the line, gradations not black and white.</p><p>I still stick to my main point: your organization gets a massive benefit by all using the same toolset.  If you are using Cloud Foundry, I&#x27;d still suggest the whole company stick with one language, one deployment infrastructure etc.</p><p>To be clear, if you&#x27;re google I&#x27;m not suggesting the entire company all be forced to use one language or something.  In that case your company is likely working on products that are different enough that it makes sense to do away with some global optimization.  Some judgment is obviously required.  But if you&#x27;re in the sub-500 range (which the vast majority are) it makes a lot of sense to really optimize globally with your toolset, even if deployment infrastructure is relatively easy to setup.</p><p>PS I love that you are using the phrase Just Works - the company I work for is called Justworks :)</p>","parent_id":9293866,"points":0,"children":[{"id":9293982,"key":9293982,"title":"<p>I mentioned Heroku for two reasons. First, they are the pioneers of public PaaSes. Second, several Cloud Foundry buildpacks are extensions of Heroku&#x27;s buildpacks.</p><p>I think that the nice thing about something like CF is that a whole range of problems just goes away. On the other hand, as Weinberg observed, when you solve the worst problem, the second worst problem gets a promotion :)</p><p>Cloud Foundry doesn&#x27;t get much buzz on HN. But I&#x27;m a one-eyed bigoted fan, so I mention it whenever I can. I&#x27;m actually a Pivotal Labs employee, my main work is agile consulting. But I&#x27;ve seen enough gigantoglobomegacorps who are choking on their own impossibly heavyweight deployment&#x2F;ops mechanisms that I am a bit of a bore about talking up Cloud Foundry.</p>","created_at":"2015-03-31T02:07:38Z","author":"jacques_chester","text":"<p>I mentioned Heroku for two reasons. First, they are the pioneers of public PaaSes. Second, several Cloud Foundry buildpacks are extensions of Heroku&#x27;s buildpacks.</p><p>I think that the nice thing about something like CF is that a whole range of problems just goes away. On the other hand, as Weinberg observed, when you solve the worst problem, the second worst problem gets a promotion :)</p><p>Cloud Foundry doesn&#x27;t get much buzz on HN. But I&#x27;m a one-eyed bigoted fan, so I mention it whenever I can. I&#x27;m actually a Pivotal Labs employee, my main work is agile consulting. But I&#x27;ve seen enough gigantoglobomegacorps who are choking on their own impossibly heavyweight deployment&#x2F;ops mechanisms that I am a bit of a bore about talking up Cloud Foundry.</p>","parent_id":9293925,"points":0,"children":[{"id":9294318,"key":9294318,"title":"<p>It definitely sounds awesome.  We&#x27;ve got a pretty simple deployment system at the moment and so it&#x27;s a solved problem for us, but when it starts to breakdown we&#x27;ll definitely take a look at CF.</p>","created_at":"2015-03-31T04:08:35Z","author":"wdewind","text":"<p>It definitely sounds awesome.  We&#x27;ve got a pretty simple deployment system at the moment and so it&#x27;s a solved problem for us, but when it starts to breakdown we&#x27;ll definitely take a look at CF.</p>","parent_id":9293982,"points":0,"children":[]}]}]}]}]}]}]}]},{"id":9294509,"key":9294509,"title":"<p>&gt; It absolutely does if it is only one team in the organization. If the entire organization is using PHP and, let&#x27;s say, you acqui-hire a team based on NodeJS, unless they are doing something absolutely fundamentally different they should learn PHP and push code in your existing infrastructure.</p><p>Substitute PHP with Java, and you&#x27;ve described the situation at my company exactly. The acquiring company had a legacy Java application and a lot of automation invested in making that platform work. The acquired company was a NodeJS shop that was using it long before this article or the comments in this thread would advise (this was pre-npm days). To give you an idea of the numbers, the acquired team was 4 engineers as compared to the 100 engineers of the acquiring company (50&#x2F;50 split with an off-shore development team). I won&#x27;t say which side of that divide I was on or go into the full year of culture shock that we went through, but fast forwarding these past 4+ years and now the bulk of the company&#x27;s main product has been re-written in Node and developers are significantly more productive. Features that used to take months to push out in complex releases using a convoluted process of branching, meetings and tons of arguments are now delivered continually using the Github flow with little-to-no drama and far fewer production bugs&#x2F;downtime. Our customers have never been happier with us and developers have never been happier to work here. All of this came from the fact that the CMO who advocated for the acquisition supported the small team of 4 in every effort to pervade the small team&#x27;s technologies and practices across the larger organization. Having been in organizations that performed at a much higher level, he recognized just how much opportunity there was for improvement and recognized that the team of 4 had the vision to create the necessary blueprint for the rest of the organization to follow. It wasn&#x27;t easy, and most of the developers who were here at the beginning of the shift are no longer part of the company. But it worked...and while a sample size of one is hardly conclusive, I have a hard time agreeing with your point having seen it play out so well in the real world.</p>","created_at":"2015-03-31T05:17:07Z","author":"curun1r","text":"<p>&gt; It absolutely does if it is only one team in the organization. If the entire organization is using PHP and, let&#x27;s say, you acqui-hire a team based on NodeJS, unless they are doing something absolutely fundamentally different they should learn PHP and push code in your existing infrastructure.</p><p>Substitute PHP with Java, and you&#x27;ve described the situation at my company exactly. The acquiring company had a legacy Java application and a lot of automation invested in making that platform work. The acquired company was a NodeJS shop that was using it long before this article or the comments in this thread would advise (this was pre-npm days). To give you an idea of the numbers, the acquired team was 4 engineers as compared to the 100 engineers of the acquiring company (50&#x2F;50 split with an off-shore development team). I won&#x27;t say which side of that divide I was on or go into the full year of culture shock that we went through, but fast forwarding these past 4+ years and now the bulk of the company&#x27;s main product has been re-written in Node and developers are significantly more productive. Features that used to take months to push out in complex releases using a convoluted process of branching, meetings and tons of arguments are now delivered continually using the Github flow with little-to-no drama and far fewer production bugs&#x2F;downtime. Our customers have never been happier with us and developers have never been happier to work here. All of this came from the fact that the CMO who advocated for the acquisition supported the small team of 4 in every effort to pervade the small team&#x27;s technologies and practices across the larger organization. Having been in organizations that performed at a much higher level, he recognized just how much opportunity there was for improvement and recognized that the team of 4 had the vision to create the necessary blueprint for the rest of the organization to follow. It wasn&#x27;t easy, and most of the developers who were here at the beginning of the shift are no longer part of the company. But it worked...and while a sample size of one is hardly conclusive, I have a hard time agreeing with your point having seen it play out so well in the real world.</p>","parent_id":9293408,"points":0,"children":[]}]},{"id":9293186,"key":9293186,"title":"<p>Yep, what&#x27;s &quot;innovative&quot; for one person or team is &quot;boring&quot; for another, and vice versa. NodeJS &#x2F; PHP is a good example.</p>","created_at":"2015-03-30T22:57:37Z","author":"fineline","text":"<p>Yep, what&#x27;s &quot;innovative&quot; for one person or team is &quot;boring&quot; for another, and vice versa. NodeJS &#x2F; PHP is a good example.</p>","parent_id":9293032,"points":0,"children":[]}]}]},{"id":9291716,"key":9291716,"title":"<p>I love the way Maciej Cegłowski describes his setup at Pinboard:</p><p>&quot;Pinboard is written in PHP and Perl. The site uses MySQL for data storage, Sphinx for search, Beanstalk as a message queue, and a combination of storage appliances and Amazon S3 to store backups. There is absolutely nothing interesting about the Pinboard architecture or implementation; I consider that a feature!&quot;</p><p><a href=\"https:&#x2F;&#x2F;pinboard.in&#x2F;about&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;pinboard.in&#x2F;about&#x2F;</a></p>","created_at":"2015-03-30T18:56:24Z","author":"threefour","text":"<p>I love the way Maciej Cegłowski describes his setup at Pinboard:</p><p>&quot;Pinboard is written in PHP and Perl. The site uses MySQL for data storage, Sphinx for search, Beanstalk as a message queue, and a combination of storage appliances and Amazon S3 to store backups. There is absolutely nothing interesting about the Pinboard architecture or implementation; I consider that a feature!&quot;</p><p><a href=\"https:&#x2F;&#x2F;pinboard.in&#x2F;about&#x2F;\" rel=\"nofollow\">https:&#x2F;&#x2F;pinboard.in&#x2F;about&#x2F;</a></p>","parent_id":9291215,"points":0,"children":[{"id":9293235,"key":9293235,"title":"<p>I also immediately thought of Maciej and Pinboard. He expands a bit in this interview [1]:</p><p>&gt; <i>Can you explain why you think that&#x27;s a feature?</i></p><p>&gt; I believe that relying on very basic and well-understood technologies at the architectural level forces you to save all your cleverness and new ideas for the actual app, where it can make a difference to users.</p><p>&gt; I think many developers (myself included) are easily seduced by new technology and are willing to burn a lot of time rigging it together just for the joy of tinkering. So nowadays we see a lot of fairly uninteresting web apps with very technically sweet implementations. In designing Pinboard, I tried to steer clear of this temptation by picking very familiar, vanilla tools wherever possible so I would have no excuse for architectural wank.</p><p>[1] <a href=\"http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:98zuG6u6-U4J:readwrite.com&#x2F;2011&#x2F;02&#x2F;10&#x2F;pinboard-creator-maciej-ceglow+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us\" rel=\"nofollow\">http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:98zuG6u...</a></p>","created_at":"2015-03-30T23:06:17Z","author":"sigil","text":"<p>I also immediately thought of Maciej and Pinboard. He expands a bit in this interview [1]:</p><p>&gt; <i>Can you explain why you think that&#x27;s a feature?</i></p><p>&gt; I believe that relying on very basic and well-understood technologies at the architectural level forces you to save all your cleverness and new ideas for the actual app, where it can make a difference to users.</p><p>&gt; I think many developers (myself included) are easily seduced by new technology and are willing to burn a lot of time rigging it together just for the joy of tinkering. So nowadays we see a lot of fairly uninteresting web apps with very technically sweet implementations. In designing Pinboard, I tried to steer clear of this temptation by picking very familiar, vanilla tools wherever possible so I would have no excuse for architectural wank.</p><p>[1] <a href=\"http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:98zuG6u6-U4J:readwrite.com&#x2F;2011&#x2F;02&#x2F;10&#x2F;pinboard-creator-maciej-ceglow+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us\" rel=\"nofollow\">http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:98zuG6u...</a></p>","parent_id":9291716,"points":0,"children":[{"id":9293971,"key":9293971,"title":"<p>&quot;architectural wank&quot; -- that&#x27;s one for the dictionary!</p>","created_at":"2015-03-31T02:02:36Z","author":"threefour","text":"<p>&quot;architectural wank&quot; -- that&#x27;s one for the dictionary!</p>","parent_id":9293235,"points":0,"children":[]}]}]},{"id":9292249,"key":9292249,"title":"<p>Case in point:</p><p>I recently went back to SQL from noSQL after I realized that a lot of noSQL was just reinventing wheels. I realize there might be cases where noSQL databases shine, but in most use cases SQL is better. It&#x27;s <i>slightly</i> more work up front (only slightly) but it pays off later in keeping your data organized and making it easy to query. It&#x27;s a great example of a very old technology with excellent longevity. That&#x27;s in part because it&#x27;s built on math and logic (set theory, etc.). There are universal mathematical&#x2F;logical truths encoded elegantly into the structure of the SQL language, and they describe things you are going to need.</p><p>Your tools shouldn&#x27;t be the exciting thing. The thing you are building with them should be the exciting thing.</p>","created_at":"2015-03-30T20:12:47Z","author":"api","text":"<p>Case in point:</p><p>I recently went back to SQL from noSQL after I realized that a lot of noSQL was just reinventing wheels. I realize there might be cases where noSQL databases shine, but in most use cases SQL is better. It&#x27;s <i>slightly</i> more work up front (only slightly) but it pays off later in keeping your data organized and making it easy to query. It&#x27;s a great example of a very old technology with excellent longevity. That&#x27;s in part because it&#x27;s built on math and logic (set theory, etc.). There are universal mathematical&#x2F;logical truths encoded elegantly into the structure of the SQL language, and they describe things you are going to need.</p><p>Your tools shouldn&#x27;t be the exciting thing. The thing you are building with them should be the exciting thing.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9291738,"key":9291738,"title":"<p>Boring is a dangerous word: who is your subject?</p><p>For a &#x27;wannabe entrepreneur learning WordPress&#x27;, anything with more than 50 lines of code is insane. They may be able to build an ecommerce, forum,...., but usually no real value is seen.</p><p>Still, even if one takes an exception to this rule(example Groupon) it can&#x27;t be compared to a real technical innovation.</p>","created_at":"2015-03-30T18:58:20Z","author":"dataker","text":"<p>Boring is a dangerous word: who is your subject?</p><p>For a &#x27;wannabe entrepreneur learning WordPress&#x27;, anything with more than 50 lines of code is insane. They may be able to build an ecommerce, forum,...., but usually no real value is seen.</p><p>Still, even if one takes an exception to this rule(example Groupon) it can&#x27;t be compared to a real technical innovation.</p>","parent_id":9291215,"points":0,"children":[]},{"id":9292260,"key":9292260,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]},{"id":9291496,"key":9291496,"title":"<p>Cached version:</p><p><a href=\"http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:http:&#x2F;&#x2F;mcfunley.com&#x2F;choose-boring-technology\" rel=\"nofollow\">http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:http:&#x2F;&#x2F;...</a></p>","created_at":"2015-03-30T18:26:56Z","author":"impostervt","text":"<p>Cached version:</p><p><a href=\"http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:http:&#x2F;&#x2F;mcfunley.com&#x2F;choose-boring-technology\" rel=\"nofollow\">http:&#x2F;&#x2F;webcache.googleusercontent.com&#x2F;search?q=cache:http:&#x2F;&#x2F;...</a></p>","parent_id":9291215,"points":0,"children":[]},{"id":9293037,"key":9293037,"title":"<p>My favorite piece of &#x27;boring&#x27; technology: Sphinx (the search software).</p><p>I&#x27;ve been using it for maybe six years non-stop. I&#x27;ve thrown large data sets at it and it always runs fast; it&#x27;s trivial to set up and always has more than enough options for my search purposes. It has also become a much better product over the time I&#x27;ve used it, with an active development group behind it. Sphinx works so well as is, I&#x27;ve never had a reason to look elsewhere at the latest hot search tech, it would be a waste of my time to do so.</p>","created_at":"2015-03-30T22:23:31Z","author":"adventured","text":"<p>My favorite piece of &#x27;boring&#x27; technology: Sphinx (the search software).</p><p>I&#x27;ve been using it for maybe six years non-stop. I&#x27;ve thrown large data sets at it and it always runs fast; it&#x27;s trivial to set up and always has more than enough options for my search purposes. It has also become a much better product over the time I&#x27;ve used it, with an active development group behind it. Sphinx works so well as is, I&#x27;ve never had a reason to look elsewhere at the latest hot search tech, it would be a waste of my time to do so.</p>","parent_id":9291215,"points":0,"children":[{"id":9293872,"key":9293872,"title":"<p>Never used but solr is also boring and good.</p>","created_at":"2015-03-31T01:35:03Z","author":"brianwawok","text":"<p>Never used but solr is also boring and good.</p>","parent_id":9293037,"points":0,"children":[]}]},{"id":9291508,"key":9291508,"title":"<p>The innovation tokens concept seems to be a stand-in for both good engineering judgement and iterative exploration of the design&#x2F;implementation space <i>before committing to a path</i>.  I&#x27;ve been in several (successful) startups that leveraged both of these principles to great effect.</p><p>Both &quot;innovative&quot; and &quot;boring&quot; can shoot you in the foot.  TFA focsues on &quot;innovative&quot; as a risk, but that&#x27;s just daft.  This industry is constantly rolling its lessons learned back into its shipped and shared technology.  Ever gone back to a pre-Rails era web&#x2F;backend codebase and screamed in horror?  Ever gone to a &quot;new&quot; shop that never assimilated those lessons, used &quot;boring&quot; technology (thus dodging their shared&#x2F;encapsulated forms), and recreated the old horror? (personally: check and check)</p><p>Trite policies are not a replacement for spending dedicated up-front (and occasional ongoing) time cycling between 1) evaluating&#x2F;understanding your problem, 2) researching the current state of the art {processes, technology, etc.} related to your problem, and 3) using good engineering judgement to choose the best path then-and-there.</p>","created_at":"2015-03-30T18:28:41Z","author":"saidajigumi","text":"<p>The innovation tokens concept seems to be a stand-in for both good engineering judgement and iterative exploration of the design&#x2F;implementation space <i>before committing to a path</i>.  I&#x27;ve been in several (successful) startups that leveraged both of these principles to great effect.</p><p>Both &quot;innovative&quot; and &quot;boring&quot; can shoot you in the foot.  TFA focsues on &quot;innovative&quot; as a risk, but that&#x27;s just daft.  This industry is constantly rolling its lessons learned back into its shipped and shared technology.  Ever gone back to a pre-Rails era web&#x2F;backend codebase and screamed in horror?  Ever gone to a &quot;new&quot; shop that never assimilated those lessons, used &quot;boring&quot; technology (thus dodging their shared&#x2F;encapsulated forms), and recreated the old horror? (personally: check and check)</p><p>Trite policies are not a replacement for spending dedicated up-front (and occasional ongoing) time cycling between 1) evaluating&#x2F;understanding your problem, 2) researching the current state of the art {processes, technology, etc.} related to your problem, and 3) using good engineering judgement to choose the best path then-and-there.</p>","parent_id":9291215,"points":0,"children":[{"id":9291520,"key":9291520,"title":"<p>Worse than shops that are still using boring technology, are those that are in some wasteland of inbetween an old technology and a new one.</p>","created_at":"2015-03-30T18:30:42Z","author":"taeric","text":"<p>Worse than shops that are still using boring technology, are those that are in some wasteland of inbetween an old technology and a new one.</p>","parent_id":9291508,"points":0,"children":[]},{"id":9291528,"key":9291528,"title":"<p>&gt; iterative exploration of the design&#x2F;implementation space before committing to a path</p><p>This is something worth fighting for, but by God, it&#x27;s a hard fight, both in big corps and smaller &quot;more agile&quot; companies.</p><p>Great comment, anyway.</p>","created_at":"2015-03-30T18:31:49Z","author":"davedx","text":"<p>&gt; iterative exploration of the design&#x2F;implementation space before committing to a path</p><p>This is something worth fighting for, but by God, it&#x27;s a hard fight, both in big corps and smaller &quot;more agile&quot; companies.</p><p>Great comment, anyway.</p>","parent_id":9291508,"points":0,"children":[]},{"id":9291618,"key":9291618,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]},{"id":9291903,"key":9291903,"title":"<p><i>&gt; Both &quot;innovative&quot; and &quot;boring&quot; can shoot you in the foot.</i></p><p>This is true, but it misses one of the points of TFA, which is that with boring tech <i>you already know the ways it can shoot you in the foot,</i> because lots of people have had their feet shot by it before you came along. You can learn what not to do just by looking around and seeing which sets of feet have the smoking holes in them. With exciting tech, you <i>don&#x27;t</i> know; you get to be one of the people who discovers those things.</p>","created_at":"2015-03-30T19:21:46Z","author":"smacktoward","text":"<p><i>&gt; Both &quot;innovative&quot; and &quot;boring&quot; can shoot you in the foot.</i></p><p>This is true, but it misses one of the points of TFA, which is that with boring tech <i>you already know the ways it can shoot you in the foot,</i> because lots of people have had their feet shot by it before you came along. You can learn what not to do just by looking around and seeing which sets of feet have the smoking holes in them. With exciting tech, you <i>don&#x27;t</i> know; you get to be one of the people who discovers those things.</p>","parent_id":9291508,"points":0,"children":[{"id":9292056,"key":9292056,"title":"<p>I guess I do know the ways in which CGI-based web applications shoot me in the foot because I wrote them in Python and Perl. Said knowledge is why I no longer use:</p><p>1. CGI</p><p>2. Python</p><p>3. Perl</p>","created_at":"2015-03-30T19:43:03Z","author":"coolsunglasses","text":"<p>I guess I do know the ways in which CGI-based web applications shoot me in the foot because I wrote them in Python and Perl. Said knowledge is why I no longer use:</p><p>1. CGI</p><p>2. Python</p><p>3. Perl</p>","parent_id":9291903,"points":0,"children":[{"id":9293342,"key":9293342,"title":"<p>I&#x27;m willing to bet it was more CGI than Perl or Python that was shooting you in the foot, to be fair :)</p>","created_at":"2015-03-30T23:28:30Z","author":"yellowapple","text":"<p>I&#x27;m willing to bet it was more CGI than Perl or Python that was shooting you in the foot, to be fair :)</p>","parent_id":9292056,"points":0,"children":[{"id":9294337,"key":9294337,"title":"<p>I&#x27;d have an easier time maintaining a CGI app written in Haskell than I would a Rails app.</p>","created_at":"2015-03-31T04:15:29Z","author":"coolsunglasses","text":"<p>I&#x27;d have an easier time maintaining a CGI app written in Haskell than I would a Rails app.</p>","parent_id":9293342,"points":0,"children":[]}]},{"id":9292150,"key":9292150,"title":"<p>Did you stop using Python and Perl for performance reasons?</p>","created_at":"2015-03-30T19:56:40Z","author":"proveanegative","text":"<p>Did you stop using Python and Perl for performance reasons?</p>","parent_id":9292056,"points":0,"children":[{"id":9292654,"key":9292654,"title":"<p>&gt;for performance reasons?</p><p>No. Moving to Haskell did give me much nicer options for concurrency and performance. Was principally about productivity (area under a curve).</p>","created_at":"2015-03-30T21:13:28Z","author":"coolsunglasses","text":"<p>&gt;for performance reasons?</p><p>No. Moving to Haskell did give me much nicer options for concurrency and performance. Was principally about productivity (area under a curve).</p>","parent_id":9292150,"points":0,"children":[]},{"id":9292457,"key":9292457,"title":"<p>Not the OP, but using TCL in the first .com wave taught me that any language without JIT or AOT support on their toolchains are bad fit for anything that needs to scale.</p><p>As such I only use Python for scripting.</p>","created_at":"2015-03-30T20:43:37Z","author":"pjmlp","text":"<p>Not the OP, but using TCL in the first .com wave taught me that any language without JIT or AOT support on their toolchains are bad fit for anything that needs to scale.</p><p>As such I only use Python for scripting.</p>","parent_id":9292150,"points":0,"children":[{"id":9292909,"key":9292909,"title":"<p>PyPy works with most Python code</p>","created_at":"2015-03-30T21:58:17Z","author":"defen","text":"<p>PyPy works with most Python code</p>","parent_id":9292457,"points":0,"children":[{"id":9293604,"key":9293604,"title":"<p>Please. Don&#x27;t. PyPy is not mature and still suffers from many deficiencies in python itself and the community.</p><p>I&#x27;m not a huge fan of Ruby, but Ruby, its community, and rubinius are doing it much better.</p>","created_at":"2015-03-31T00:30:26Z","author":"Ixiaus","text":"<p>Please. Don&#x27;t. PyPy is not mature and still suffers from many deficiencies in python itself and the community.</p><p>I&#x27;m not a huge fan of Ruby, but Ruby, its community, and rubinius are doing it much better.</p>","parent_id":9292909,"points":0,"children":[]}]},{"id":9294070,"key":9294070,"title":"<p>This is specific to Tcl, but it <i>is</i> byte compiled [0], and work is ongoing right now to target llvm[1]. To say nothing of punting and coding performance-critical code in C and orchestrating it all via Tcl.</p><p>[0] <a href=\"https:&#x2F;&#x2F;www.tcl.tk&#x2F;community&#x2F;tcl2002&#x2F;archive&#x2F;Tcl2002papers&#x2F;kenny-bytecode&#x2F;paperKBK.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.tcl.tk&#x2F;community&#x2F;tcl2002&#x2F;archive&#x2F;Tcl2002papers&#x2F;k...</a></p><p>[1] <a href=\"http:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;tcl&#x2F;mailman&#x2F;message&#x2F;33568154&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;tcl&#x2F;mailman&#x2F;message&#x2F;33568154&#x2F;</a></p>","created_at":"2015-03-31T02:41:18Z","author":"bch","text":"<p>This is specific to Tcl, but it <i>is</i> byte compiled [0], and work is ongoing right now to target llvm[1]. To say nothing of punting and coding performance-critical code in C and orchestrating it all via Tcl.</p><p>[0] <a href=\"https:&#x2F;&#x2F;www.tcl.tk&#x2F;community&#x2F;tcl2002&#x2F;archive&#x2F;Tcl2002papers&#x2F;kenny-bytecode&#x2F;paperKBK.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.tcl.tk&#x2F;community&#x2F;tcl2002&#x2F;archive&#x2F;Tcl2002papers&#x2F;k...</a></p><p>[1] <a href=\"http:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;tcl&#x2F;mailman&#x2F;message&#x2F;33568154&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;sourceforge.net&#x2F;p&#x2F;tcl&#x2F;mailman&#x2F;message&#x2F;33568154&#x2F;</a></p>","parent_id":9292457,"points":0,"children":[]}]}]}]},{"id":9292765,"key":9292765,"title":"<p>“You want to learn from experience,” says Warren Buffett, “but you want to learn from other people’s experience when you can.”</p>","created_at":"2015-03-30T21:33:01Z","author":"qznc","text":"<p>“You want to learn from experience,” says Warren Buffett, “but you want to learn from other people’s experience when you can.”</p>","parent_id":9291903,"points":0,"children":[]}]},{"id":9292710,"key":9292710,"title":"<p>I have seen some incredibly good &#x27;legacy&#x27; codebases written with vary old tech.  There is a huge advantage when someone works with a technology for 10+ years and knows all the rough edges to avoid and then bakes it into their design.</p><p>Java may be the worst example of a ‘bulb’ language I can think of. However, I recently spoke with a team which had an awesome response to all the things I hated about the language.  The closest analogy I can think of is mechanics working on popular cars get to the point where they can diagnose problems in seconds because they know the kinds of things that break.  Cars come with plenty of sensors to help diagnose problems, but in this case familiarity often beats better tools.</p>","created_at":"2015-03-30T21:25:23Z","author":"Retric","text":"<p>I have seen some incredibly good &#x27;legacy&#x27; codebases written with vary old tech.  There is a huge advantage when someone works with a technology for 10+ years and knows all the rough edges to avoid and then bakes it into their design.</p><p>Java may be the worst example of a ‘bulb’ language I can think of. However, I recently spoke with a team which had an awesome response to all the things I hated about the language.  The closest analogy I can think of is mechanics working on popular cars get to the point where they can diagnose problems in seconds because they know the kinds of things that break.  Cars come with plenty of sensors to help diagnose problems, but in this case familiarity often beats better tools.</p>","parent_id":9291508,"points":0,"children":[]}]},{"id":9292023,"key":9292023,"title":"<p>As someone who has never done web development and knows nothing about it, how do I learn what to do? Every time I try to determine what people are using and what is the path of least resistance to make a website, I am overwhelmed by choices. How do I determine what is good? If I build a website, I don&#x27;t want to spend my time learning an interface that has been superseded by something better that all pros now use. What backend do people use? Rails? Django? PHP? Perl? Some Javascript? What javascript libraries do people use? etc.</p>","created_at":"2015-03-30T19:38:38Z","author":"rthomas6","text":"<p>As someone who has never done web development and knows nothing about it, how do I learn what to do? Every time I try to determine what people are using and what is the path of least resistance to make a website, I am overwhelmed by choices. How do I determine what is good? If I build a website, I don&#x27;t want to spend my time learning an interface that has been superseded by something better that all pros now use. What backend do people use? Rails? Django? PHP? Perl? Some Javascript? What javascript libraries do people use? etc.</p>","parent_id":9291215,"points":0,"children":[{"id":9292123,"key":9292123,"title":"<p>Really old boring tech (c. 2002): Perl or PHP, MySQL, very little JS (and usually plain vanilla JS if used).</p><p>Old boring tech (c. 2007): Rails or Django (the two are largely interchangeable, it&#x27;s largely personal preference), JQuery, PostGres.</p><p>Old tech (c. 2012): Node.js, Angular, Express.js, MongoDB.  Not boring, because you will still face lots of problems deploying this stack at scale.</p><p>Boring tech (c. 2012): Native iPhone&#x2F;Android apps, JSON-RPC, often Java on the server.  Usually Guice or Dagger is used for dependency injection with Java.  Not really old (except for the Java part), there&#x27;s still a lot of innovation going on in this space.</p><p>Bleeding edge stuff (today): React, Polymer, Go, Rust, Erlang&#x2F;Elixir (Erlang is interesting in that the runtime and standard libraries are <i>rock solid</i>, but because it&#x27;s so different from most mainstream languages, you can face a lot of integration pain when looking for third-party libraries), Haskell (old, but very different from anything mainstream).  Basically everything you read about on Hacker News.</p>","created_at":"2015-03-30T19:52:46Z","author":"nostrademons","text":"<p>Really old boring tech (c. 2002): Perl or PHP, MySQL, very little JS (and usually plain vanilla JS if used).</p><p>Old boring tech (c. 2007): Rails or Django (the two are largely interchangeable, it&#x27;s largely personal preference), JQuery, PostGres.</p><p>Old tech (c. 2012): Node.js, Angular, Express.js, MongoDB.  Not boring, because you will still face lots of problems deploying this stack at scale.</p><p>Boring tech (c. 2012): Native iPhone&#x2F;Android apps, JSON-RPC, often Java on the server.  Usually Guice or Dagger is used for dependency injection with Java.  Not really old (except for the Java part), there&#x27;s still a lot of innovation going on in this space.</p><p>Bleeding edge stuff (today): React, Polymer, Go, Rust, Erlang&#x2F;Elixir (Erlang is interesting in that the runtime and standard libraries are <i>rock solid</i>, but because it&#x27;s so different from most mainstream languages, you can face a lot of integration pain when looking for third-party libraries), Haskell (old, but very different from anything mainstream).  Basically everything you read about on Hacker News.</p>","parent_id":9292023,"points":0,"children":[{"id":9293317,"key":9293317,"title":"<p>Erlang isn&#x27;t bleeding edge at all. In fact, it&#x27;s a battle-hardened and conservatively evolving platform dating back to 1986, which is one of its selling points amongst all the technical benefits.</p>","created_at":"2015-03-30T23:23:05Z","author":"vezzy-fnord","text":"<p>Erlang isn&#x27;t bleeding edge at all. In fact, it&#x27;s a battle-hardened and conservatively evolving platform dating back to 1986, which is one of its selling points amongst all the technical benefits.</p>","parent_id":9292123,"points":0,"children":[{"id":9293479,"key":9293479,"title":"<p>Elixir, on the other hand, is still a bit bloody on the edges (and the MVC-ish frameworks for it are very much bleeding edge), but because it&#x27;s built on the same foundations as Erlang, it ends up getting a lot of its benefits (and a lot of the existing ecosystem), which puts it uniquely in-between &quot;boring&quot; and &quot;shiny&quot;.</p>","created_at":"2015-03-31T00:00:28Z","author":"yellowapple","text":"<p>Elixir, on the other hand, is still a bit bloody on the edges (and the MVC-ish frameworks for it are very much bleeding edge), but because it&#x27;s built on the same foundations as Erlang, it ends up getting a lot of its benefits (and a lot of the existing ecosystem), which puts it uniquely in-between &quot;boring&quot; and &quot;shiny&quot;.</p>","parent_id":9293317,"points":0,"children":[]},{"id":9293508,"key":9293508,"title":"<p>Depends on your problem domain.  It absolutely is battle-hardened and conservatively evolving, but it grew up in the telecom industry, and most of its &quot;mainstream&quot; uses (Facebook chat, Whatsapp) are in messaging.</p><p>Erlang strings, for example, are lists of bytes, which will blow up your memory requirements and algorithmic complexity if you do any serious string parsing.  You&#x27;re shut out of common libraries like protobufs.  There are libraries available for things like HTML parsing, MySQL, Postgres, and even Apple Push Notifications&#x2F;Google Cloud Messaging, but many of them are some guy&#x27;s personal project on GitHub rather than something that&#x27;s gotten widespread use &amp; testing and has plenty of StackOverflow posts for help.</p>","created_at":"2015-03-31T00:07:08Z","author":"nostrademons","text":"<p>Depends on your problem domain.  It absolutely is battle-hardened and conservatively evolving, but it grew up in the telecom industry, and most of its &quot;mainstream&quot; uses (Facebook chat, Whatsapp) are in messaging.</p><p>Erlang strings, for example, are lists of bytes, which will blow up your memory requirements and algorithmic complexity if you do any serious string parsing.  You&#x27;re shut out of common libraries like protobufs.  There are libraries available for things like HTML parsing, MySQL, Postgres, and even Apple Push Notifications&#x2F;Google Cloud Messaging, but many of them are some guy&#x27;s personal project on GitHub rather than something that&#x27;s gotten widespread use &amp; testing and has plenty of StackOverflow posts for help.</p>","parent_id":9293317,"points":0,"children":[{"id":9293566,"key":9293566,"title":"<p>Lists of Unicode points (integers), specifically. That said, most real world string manipulation is done by passing them as binaries. It really isn&#x27;t much of an issue, nowhere near as much as is the hell that is NULL-terminated character arrays in C, which, mind you, power most of our software nonetheless.</p><p>Erlang does have a good Protocol Buffers library, by the way: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;basho&#x2F;erlang_protobuffs\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;basho&#x2F;erlang_protobuffs</a>. Even if it didn&#x27;t, you&#x27;d use a more native serialization format like BERT.</p><p>As for abandoned projects and library sprawl, that is true. However, I&#x27;d say that this is far more bearable in Erlang than in other languages. For one, the module system makes deducing how to use a program&#x27;s API from source code much easier even if there is no explicit documentation - every Erlang program basically gets a user interface for free just by virtue of being a module. In addition, if the library in question is a properly structured OTP application or if it uses vanilla process primitives efficiently, I can have relative confidence that it is less likely to blow up in my face than, e.g. a random Java library.</p><p>Even still, there&#x27;s all sorts of libraries despite the small community. If you&#x27;re doing web development and there&#x27;s some RESTful API that has no Erlang bindings, those are relatively trivial to roll yourself.</p>","created_at":"2015-03-31T00:22:43Z","author":"vezzy-fnord","text":"<p>Lists of Unicode points (integers), specifically. That said, most real world string manipulation is done by passing them as binaries. It really isn&#x27;t much of an issue, nowhere near as much as is the hell that is NULL-terminated character arrays in C, which, mind you, power most of our software nonetheless.</p><p>Erlang does have a good Protocol Buffers library, by the way: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;basho&#x2F;erlang_protobuffs\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;basho&#x2F;erlang_protobuffs</a>. Even if it didn&#x27;t, you&#x27;d use a more native serialization format like BERT.</p><p>As for abandoned projects and library sprawl, that is true. However, I&#x27;d say that this is far more bearable in Erlang than in other languages. For one, the module system makes deducing how to use a program&#x27;s API from source code much easier even if there is no explicit documentation - every Erlang program basically gets a user interface for free just by virtue of being a module. In addition, if the library in question is a properly structured OTP application or if it uses vanilla process primitives efficiently, I can have relative confidence that it is less likely to blow up in my face than, e.g. a random Java library.</p><p>Even still, there&#x27;s all sorts of libraries despite the small community. If you&#x27;re doing web development and there&#x27;s some RESTful API that has no Erlang bindings, those are relatively trivial to roll yourself.</p>","parent_id":9293508,"points":0,"children":[]}]}]}]},{"id":9292143,"key":9292143,"title":"<p>Just pick something and go with it.</p><p>Every stack will have some javascript in it.</p><p>I recommend Heroku&#x2F;Postgres&#x2F;Python&#x2F;Django&#x2F;jQuery as a good starting stack.</p><p>Sub Python&#x2F;Django for Ruby&#x2F;Rails if you want, keep the rest. Both of these stacks also make you very employable, if that&#x27;s your goal.</p>","created_at":"2015-03-30T19:56:01Z","author":"mod","text":"<p>Just pick something and go with it.</p><p>Every stack will have some javascript in it.</p><p>I recommend Heroku&#x2F;Postgres&#x2F;Python&#x2F;Django&#x2F;jQuery as a good starting stack.</p><p>Sub Python&#x2F;Django for Ruby&#x2F;Rails if you want, keep the rest. Both of these stacks also make you very employable, if that&#x27;s your goal.</p>","parent_id":9292023,"points":0,"children":[]},{"id":9292195,"key":9292195,"title":"<p>I don&#x27;t know what your end goals are but I&#x27;d say the safest thing to do is probably to pick tech that is not yet outdated (eg. PHP) and not too shiny or arcane either (React or Haskell respectively - while both great, probably not the best place to start).</p><p>If your goal is to seek employment 6 months from now, I&#x27;d say Django &#x2F; Angular is a pretty safe bet. I guess if you want to focus on one language, you could use Node instead of Django and target frontend development.</p>","created_at":"2015-03-30T20:04:16Z","author":"Jacqued","text":"<p>I don&#x27;t know what your end goals are but I&#x27;d say the safest thing to do is probably to pick tech that is not yet outdated (eg. PHP) and not too shiny or arcane either (React or Haskell respectively - while both great, probably not the best place to start).</p><p>If your goal is to seek employment 6 months from now, I&#x27;d say Django &#x2F; Angular is a pretty safe bet. I guess if you want to focus on one language, you could use Node instead of Django and target frontend development.</p>","parent_id":9292023,"points":0,"children":[]},{"id":9292196,"key":9292196,"title":null,"created_at":"0001-01-01T00:00:00","author":null,"text":null,"parent_id":0,"points":0,"children":[]},{"id":9293536,"key":9293536,"title":"<p>&gt; What backend do people use? Rails? Django? PHP? Perl? Some Javascript?</p><p>All of the above, and then some.</p><p>If you&#x27;re just starting out with web development, it&#x27;s much more useful that you learn MVC and REST; those are architectural skills that will result in you being able to adapt to most frameworks rather quickly.  I&#x27;d personally vouch for Rails (or perhaps Padrino) and Ruby as an introduction to those concepts, seeing as that&#x27;s where my own personal experience is, and seeing as Ruby is generally regarded to be an easy and programmer-friendly language, but feel free to make a choice based on your own personal language preference (Django if you like Python, Catalyst or Mojolicious if you like Perl, Chicago Boss or Phoenix or Sugar if you like Erlang or Elixir (respectively), etc.).  You can&#x27;t go wrong, so long as you learn those underlying concepts.</p><p>Lots of folks around here express distaste for &quot;polyglot&quot; programmers like (probably, at this rate) myself, but I personally appreciate that focusing on thorough understanding of core concepts rather than the ins and outs of specific implementations thereof is really helpful in this context.</p>","created_at":"2015-03-31T00:14:51Z","author":"yellowapple","text":"<p>&gt; What backend do people use? Rails? Django? PHP? Perl? Some Javascript?</p><p>All of the above, and then some.</p><p>If you&#x27;re just starting out with web development, it&#x27;s much more useful that you learn MVC and REST; those are architectural skills that will result in you being able to adapt to most frameworks rather quickly.  I&#x27;d personally vouch for Rails (or perhaps Padrino) and Ruby as an introduction to those concepts, seeing as that&#x27;s where my own personal experience is, and seeing as Ruby is generally regarded to be an easy and programmer-friendly language, but feel free to make a choice based on your own personal language preference (Django if you like Python, Catalyst or Mojolicious if you like Perl, Chicago Boss or Phoenix or Sugar if you like Erlang or Elixir (respectively), etc.).  You can&#x27;t go wrong, so long as you learn those underlying concepts.</p><p>Lots of folks around here express distaste for &quot;polyglot&quot; programmers like (probably, at this rate) myself, but I personally appreciate that focusing on thorough understanding of core concepts rather than the ins and outs of specific implementations thereof is really helpful in this context.</p>","parent_id":9292023,"points":0,"children":[]},{"id":9292275,"key":9292275,"title":"<p>For a beginner I&#x27;d recommend Python&#x2F;Django, and start from there.</p><p>I mainly recommend Django because of its incredibly friendly and well written documentation. It should teach the basics in an approachable way.</p><p>Also you might want to watch some lectures on how the web works at a high level as well, so you have a good idea of how all the pieces fit together.</p>","created_at":"2015-03-30T20:16:25Z","author":"MollyR","text":"<p>For a beginner I&#x27;d recommend Python&#x2F;Django, and start from there.</p><p>I mainly recommend Django because of its incredibly friendly and well written documentation. It should teach the basics in an approachable way.</p><p>Also you might want to watch some lectures on how the web works at a high level as well, so you have a good idea of how all the pieces fit together.</p>","parent_id":9292023,"points":0,"children":[]}]},{"id":9293306,"key":9293306,"title":"<p>Why not let the data make the technology choices for you ? \nThe way I go about making technology choices is by examining the data that I&#x27;ll be working with in conjunction the data access patterns inherent in the features that I&#x27;ll need to support.</p><p>I look at things like projected read&#x2F;write throughput, latency characteristics, total data volume, concurrency, and whether or not the problem domain actually requires highly relational queries.</p><p>I think that a lot of shops don&#x27;t put enough thinking into figuring out what kind of data access patterns they&#x27;ll need to support throughout the life-cycle of the business.  This is no big deal if the product doesn&#x27;t experience growth. But in terms of rich web applications which begin to experience growth the team inevitably ends up with a massive scaling problem unless their system architecture was designed to support these access patterns from the ground up.</p><p>It seems that this &quot;growing pains&quot; scaling nightmare has become almost a right of passage for successful tech startups.  Founders are generally led to believe that it&#x27;s a good thing for them to need to sell equity to outside investors in order to &quot;scale out&quot; a much larger team to build out the infrastructure required to perform in-flight rocket surgery on the application before it either explodes or becomes increasing cost inefficient.</p><p>While this whole process greatly benefits VCs, the high end tech engineering job market, and recruiters, it&#x27;s absolutely terrible the founding team because it means they inevitably get massively diluted as a consequence of experiencing success.  I&#x27;m not saying it&#x27;s a conspiracy, but I am saying there is massive financial incentive to keep this kind of  technical knowledge about best practices an open secret within the highly paid IT consultancy world.</p><p>TLDR: It&#x27;s my supposition that small teams can build scalable, composable, systems by thinking about web scale data access patterns from the beginning.</p>","created_at":"2015-03-30T23:20:17Z","author":"code_reuse","text":"<p>Why not let the data make the technology choices for you ? \nThe way I go about making technology choices is by examining the data that I&#x27;ll be working with in conjunction the data access patterns inherent in the features that I&#x27;ll need to support.</p><p>I look at things like projected read&#x2F;write throughput, latency characteristics, total data volume, concurrency, and whether or not the problem domain actually requires highly relational queries.</p><p>I think that a lot of shops don&#x27;t put enough thinking into figuring out what kind of data access patterns they&#x27;ll need to support throughout the life-cycle of the business.  This is no big deal if the product doesn&#x27;t experience growth. But in terms of rich web applications which begin to experience growth the team inevitably ends up with a massive scaling problem unless their system architecture was designed to support these access patterns from the ground up.</p><p>It seems that this &quot;growing pains&quot; scaling nightmare has become almost a right of passage for successful tech startups.  Founders are generally led to believe that it&#x27;s a good thing for them to need to sell equity to outside investors in order to &quot;scale out&quot; a much larger team to build out the infrastructure required to perform in-flight rocket surgery on the application before it either explodes or becomes increasing cost inefficient.</p><p>While this whole process greatly benefits VCs, the high end tech engineering job market, and recruiters, it&#x27;s absolutely terrible the founding team because it means they inevitably get massively diluted as a consequence of experiencing success.  I&#x27;m not saying it&#x27;s a conspiracy, but I am saying there is massive financial incentive to keep this kind of  technical knowledge about best practices an open secret within the highly paid IT consultancy world.</p><p>TLDR: It&#x27;s my supposition that small teams can build scalable, composable, systems by thinking about web scale data access patterns from the beginning.</p>","parent_id":9291215,"points":0,"children":[]}],"WordIDMapping":{"postgr":[9292290,9292123,9293508],"definitely":[9292290,9294318],"boring":[9292290,9291808,9294109,9291554,9292091,9291604,9293661,9291622,9292019,9291394,9292135,9292538,9293339,9291951,9293572,9292279,9293276,9294026,9291689,9293442,9291786,9294399,9291437,9294012,9294309,9293032,9293408,9293552,9293186,9291738,9293872,9291508,9291520,9291903,9292123,9293479],"lot":[9292290,9293084,9292862,9291852,9292844,9291492,9293374,9291645,9292952,9292978,9293032,9294117,9293652,9293866,9293925,9294509,9293235,9292249,9291903,9292123,9293479,9293536,9293306],"interesting":[9292290,9291885,9292525,9293575,9293116,9291716,9292123],"stuff":[9292290,9291808,9293661,9291630,9291437,9294309,9292123],"happening":[9292290],"databas":[9292290,9292956,9293339,9294026,9291492,9291689,9292249],"think":[9292290,9291803,9294437,9292589,9292083,9292946,9292881,9293137,9292956,9291630,9292241,9292472,9293292,9293297,9292734,9293276,9294026,9291492,9291437,9294309,9292440,9292635,9293171,9293032,9293925,9293982,9293235,9292710,9293306],"author":[9292290,9291530,9293084,9291756,9291815,9292589,9292706,9292917,9293137,9291689,9291719],"her":[9292290,9291622,9291885,9291719,9293671,9292366,9294509,9293536],"should":[9292290,9292928,9291815,9292862,9292897,9292917,9293137,9293950,9291394,9293408,9293552,9293652,9294509,9292249,9292275],"really":[9292290,9291530,9294437,9293302,9292083,9292810,9291394,9292538,9293116,9291951,9293572,9292734,9294026,9291645,9292952,9293415,9294117,9293468,9293552,9293652,9293866,9293925,9292123,9293566,9293536],"making":[9292290,9293661,9292019,9292956,9292882,9293276,9294026,9292915,9293208,9291645,9294117,9293552,9294509,9292249,9293306],"distinction":[9292290],"between":[9292290,9291530,9292120,9291815,9291771,9293032,9291508,9293479],"sexy":[9292290],"&":[9292290,9291808,9293508],"unsexy":[9292290],"great":[9292803,9291630,9293575,9291492,9294309,9292203,9292249,9291508,9291528,9292195],"articl":[9292803,9291815,9292589,9292706,9292810,9292862,9293661,9291885,9291630,9293374,9294509],"howev":[9292803,9291885,9294026,9292710,9293566],"jerry":[9292803],"seinfeld":[9292803],"gif":[9292803],"bit":[9292803,9291603,9293661,9291492,9294309,9292899,9293982,9293235,9293479],"annoying":[9292803],"although":[9292803,9294309],"must":[9292803,9291771,9291882,9291464],"admit":[9292803,9293661],"funny":[9292803],"probably":[9292803,9292956,9291394,9291707,9291630,9292555,9292657,9291689,9294309,9291645,9292195,9293536],"appropri":[9292803,9293925],"hard":[9292803,9292917,9292915,9294117,9293552,9294509,9291528],"read":[9292803,9294437,9292589,9292123],"anything":[9292803,9291437,9292579,9291738,9292457,9292123],"around":[9292803,9292021,9291492,9291645,9292497,9293468,9293866,9291903,9293536],"only":[9292803,9291803,9292897,9291391,9291852,9293304,9291951,9294026,9293374,9294399,9294012,9292366,9293408,9294509,9292249,9292457],"concentr":[9292803],"cont":[9292803,9291645],"when":[9292803,9291808,9292021,9291622,9292956,9291572,9291852,9291630,9292441,9292844,9293116,9294026,9294012,9294309,9292899,9293394,9292203,9292497,9292579,9294117,9293468,9293552,9293652,9293866,9293982,9294318,9292765,9292710,9292123],"outsid":[9292803,9292817,9293866,9293306],"screen":[9292803,9294026,9292978],"understand":[9291530,9292589,9292902,9291885,9291707,9291852,9292441,9291437],"how":[9291530,9294437,9291756,9292706,9292862,9292946,9291885,9291394,9291630,9291437,9293671,9292154,9292720,9292952,9292497,9293468,9293552,9294509,9292023,9293566,9292275],"someon":[9291530,9293137,9293671,9294012,9292579,9292710,9292023],"might":[9291530,9292998,9294026,9292249,9292275],"believ":[9291530,9293235,9293306],"innov":[9291530,9291808,9292120,9291345,9291885,9292917,9291394,9291630,9291951,9293442,9294309,9293032,9293408,9293186,9291738,9291508,9291903,9292123],"token":[9291530,9292862,9292946,9291345,9291603,9291622,9291885,9292917,9292956,9291394,9291951,9293442,9293032,9293408,9291508],"it'":[9291530,9292120,9291803,9294437,9292589,9292946,9293661,9292122,9292917,9292956,9291394,9291572,9291630,9292135,9292538,9292441,9292844,9293620,9292998,9292734,9293276,9294026,9291492,9293374,9291719,9291437,9294309,9293208,9292978,9293408,9294117,9293468,9293652,9293866,9293925,9294318,9292249,9293037,9291528,9292123,9293317,9293479,9293536,9293306],"just":[9291530,9292120,9294109,9292132,9293084,9293661,9292122,9292041,9292917,9291394,9291630,9291437,9293671,9291645,9293080,9292579,9293408,9293552,9293652,9293866,9293925,9293982,9294509,9293235,9292249,9291508,9291903,9293566,9292143,9293536],"confused":[9291530],"way":[9291530,9292083,9291345,9291622,9291394,9293575,9291951,9294026,9294507,9293374,9291437,9294012,9292899,9292579,9293408,9293468,9293552,9291716,9291903,9292056,9293566,9292275,9293306],"look":[9291530,9291808,9292091,9292525,9292440,9292635,9294318,9293037,9293306],"roi":[9291530,9291808],"there'":[9291530,9292120,9292083,9292882,9292555,9292899,9292123,9293566],"inher":[9291530,9293306],"cost":[9291530,9292120,9292956,9291394,9291630,9294026,9293374,9293032,9293408,9293306],"som":[9291530,9292021,9294437,9292132,9292589,9292091,9292897,9292525,9291394,9291630,9292538,9294026,9291689,9291437,9292154,9292366,9293032,9293408,9293925,9291520,9292710,9292023,9293508,9293566,9292143,9293536,9292275],"though":[9291530,9292122,9294026,9291719,9294309,9292497],"our":[9291530,9293302,9293661,9292525,9291882,9292440,9292635,9294117,9294509,9293566],"programm":[9291530,9292589,9292998,9294026,9293536],"already":[9291530,9291391,9291394,9293116,9291437,9293671,9294309,9292978,9294117,9291903],"know":[9291530,9292041,9292525,9291391,9291394,9292882,9291630,9291437,9293671,9292978,9292203,9292579,9293032,9293415,9294117,9293468,9293552,9293925,9291903,9292056,9292710,9292023,9292195],"programming":[9291530,9293137,9291394,9293276],"method":[9291530],"doing":[9291530,9291808,9293950,9291394,9291630,9292844,9292899,9292952,9292978,9293408,9294117,9293552,9293652,9294509,9293604,9293566],"thing":[9291530,9293084,9291815,9291603,9292897,9292525,9291394,9292882,9292844,9292998,9291951,9294026,9294507,9291689,9291437,9293671,9294309,9292366,9292635,9291645,9292952,9292978,9292203,9293408,9293652,9293866,9293982,9292249,9291903,9292710,9293508,9292195,9293306],"seem":[9291530,9293084,9291394,9292882,9291689,9294117,9291508,9293306],"conflating":[9291530],"something":[9291530,9292120,9291756,9292589,9292862,9291885,9292525,9293950,9291391,9291707,9292844,9291492,9291464,9291719,9293671,9292899,9291645,9292978,9292497,9292579,9293408,9294117,9293468,9293925,9293982,9294509,9291528,9292023,9293508,9292143],"you're":[9291530,9291808,9292120,9292021,9292956,9293950,9291394,9291572,9291630,9292135,9293339,9293297,9293572,9292366,9292899,9292497,9293552,9293652,9293925,9293508,9293566,9293536],"less":[9291530,9292589,9291394,9291630,9292555,9294484,9292440,9292899,9292978,9293408,9293566],"familiar":[9291530,9291707,9294507,9293235],"necessarily":[9291530,9291852,9293032],"sam":[9291530,9292083,9292862,9292946,9291852,9291630,9292279,9294026,9294507,9291645,9292579,9293552,9293925,9293479],"risk":[9291530,9292589,9292083,9292862,9291951,9293276,9291492,9291508],"chasing":[9291530],"shiny":[9291530,9292902,9293479,9292195],"new":[9291530,9292120,9291803,9292021,9294437,9293084,9292589,9292083,9292862,9292946,9293661,9292019,9292902,9292956,9293950,9291391,9291394,9291630,9294065,9292817,9294026,9291492,9291437,9293671,9294309,9292154,9292635,9293208,9292978,9292203,9292497,9292579,9293468,9293235,9291508,9291520,9292123],"object":[9291530,9291437],"re":[9291530,9292120,9292862,9293661,9292313,9291882,9292555,9292844,9293575,9293620,9293116,9292899,9292497,9292579,9294509,9292249,9291738,9293566],"sometim":[9291530,9292120,9291603,9292956,9293671,9292366,9292635,9292899,9294117],"thos":[9291530,9292120,9291394,9292313,9291630,9292734,9291492,9291437,9294117,9293468,9293552,9291508,9291520,9291903,9293566,9293536],"can":[9291530,9291808,9292120,9292928,9291803,9294437,9292132,9292589,9292083,9292862,9291622,9292122,9293950,9291572,9291707,9291852,9292882,9294065,9292817,9292844,9293620,9292998,9292279,9294026,9293374,9294309,9292635,9292899,9293080,9292203,9292497,9293408,9293415,9293468,9293866,9293982,9293235,9291508,9291903,9292765,9292710,9292123,9293566,9293306],"actually":[9291530,9292589,9293661,9292956,9291771,9292313,9294360,9293572,9294026,9292635,9293982,9293306],"reduc":[9291530],"tim":[9291530,9291808,9292747,9293084,9292083,9292862,9292902,9292956,9291394,9291707,9291630,9293116,9291951,9292279,9291492,9291689,9294484,9291437,9293671,9292440,9292720,9292899,9292978,9293171,9294509,9293235,9293037,9291508,9294337,9292023],"sp":[9291530,9291951],"accomplish":[9291530,9292998],"go":[9291530,9292143,9292195],"mvp":[9291530],"version":[9291530,9292897,9291622,9293394,9291496],"worth":[9291530,9292862,9291603,9292956,9291630,9292538,9293374,9291528],"innovating":[9291530],"experi":[9291530,9292083,9293661,9292956,9291771,9292998,9292497,9292765,9293536,9293306],"area":[9291530,9292654],"even":[9291530,9291345,9292881,9293137,9291394,9293304,9292844,9293575,9294026,9293208,9293394,9293925,9291738,9293508,9293566],"learn":[9291530,9293084,9291437,9293671,9294309,9292154,9292635,9292899,9292915,9293208,9292497,9292579,9293408,9294509,9291903,9292765,9292023,9293536],"try":[9291530,9294437,9292747,9292091,9291707,9294026,9291437,9293671,9292899,9292023],"time/monetary":[9291530],"0":[9291530,9291554,9292747,9291394,9292555,9294070],"high":[9291530,9292844,9292998,9291492,9292915,9294509,9292275,9293306],"shouldn't":[9291530,9291394,9293276,9292579,9293408,9292249],"improv":[9291530,9292440,9294509],"product":[9291530,9292083,9291394,9291630,9291492,9293374,9294012,9292579,9293032,9293408,9293925,9294509,9293037,9293306],"idea":[9291530,9292120,9294437,9292589,9291345,9292897,9291885,9291394,9291951,9294484,9293671,9294509,9293235,9292275],"limited":[9291530,9292120,9292956,9291852],"resulting":[9291530,9292120],"cumul":[9291530,9292120],"overly":[9291530,9292120],"simplist":[9291530,9292120],"smart":[9291530,9292120,9291572,9291771,9292441,9291437],"found":[9291530,9292120,9292132,9294409,9293552,9293866,9293479,9293306],"recogn":[9291530,9292120],"diff":[9291530,9292120,9291815,9291394,9291852,9292734,9293032,9293235],"yield":[9291530,9292120],"net":[9291530,9292120,9294026],"return":[9291530,9292120],"won't":[9291530,9292120,9292313,9292441,9292952,9292978,9292203,9294509],"problem":[9291808,9292120,9291803,9294437,9292091,9292862,9293661,9291707,9291771,9291882,9291630,9293339,9293304,9292441,9292844,9293575,9293620,9293116,9294026,9291492,9293374,9294399,9291437,9293671,9292154,9292167,9292915,9291645,9292497,9292579,9294117,9293468,9293552,9293982,9294318,9291508,9292710,9292123,9293508,9293306],"person":[9291808,9292132,9291707,9291852,9292844,9292497,9293186,9292123,9293508,9293536],"every":[9291808,9292589,9291707,9292882,9292555,9291437,9294509,9292023,9293566,9292143],"who":[9291808,9292021,9292862,9293661,9291707,9291630,9292472,9291951,9293572,9294399,9292915,9293208,9293415,9294117,9293468,9293866,9293982,9294509,9291738,9291903,9292023],"ev":[9291808,9292882,9293339,9292579,9291508],"work":[9291808,9291803,9293319,9292021,9294109,9292747,9293084,9291345,9293661,9291394,9291572,9291707,9291852,9292882,9291630,9292441,9292817,9292844,9293575,9293116,9292998,9292472,9294026,9291492,9291689,9292635,9292720,9292899,9291645,9293394,9292579,9294117,9293468,9293552,9293652,9293866,9293925,9293982,9294509,9292249,9293037,9292909,9294070,9292710,9292275],"cod":[9291808,9292120,9291803,9292589,9291603,9292844,9294026,9293408,9294117,9293552,9294509,9291738,9292909,9294070,9293566],"futur":[9291808,9292946,9292882,9292441,9292366],"isn't":[9291808,9291630,9292844,9293671,9293032,9293317,9293566],"writing":[9291808,9292706,9294026],"now":[9291808,9293319,9292364,9292897,9291622,9292041,9291394,9291707,9293339,9293374,9293442,9293868,9294509,9294070,9292023,9292195],"next":[9291808,9292589,9291630],"year":[9291808,9292862,9292946,9292897,9292956,9291394,9293339,9294026,9294484,9294509,9293037,9292710],"third":[9291808,9292946,9292123],"party":[9291808,9292123],"library":[9291808,9291492,9293394,9293566],"integr":[9291808,9291707,9292123],"6":[9291808,9291394,9294026,9292195],"month":[9291808,9292021,9292862,9291394,9294026,9291689,9294509,9292195],"unit":[9291808],"test":[9291808,9292120,9292589,9291391,9293468],"don't":[9291808,9294437,9293084,9291604,9292525,9291394,9291630,9292472,9293442,9291437,9292915,9293394,9293080,9292579,9294117,9293652,9293866,9293925,9291903,9293604,9292023,9292195,9293306],"becom":[9291808,9291394,9292555,9292441,9292998,9293374,9294012,9293037,9293306],"crit":[9291808,9293032,9294070],"2":[9291808,9294437,9292555,9292899,9291508],"3":[9291808,9292862,9292917,9291508],"un":[9291808],"ship":[9291808,9291630,9292579],"working":[9291808,9293302,9291630,9292472,9294309,9292366,9293032,9294117,9293925,9292710,9293306],"softwar":[9291808,9294109,9292083,9292657,9294026,9293394,9293037,9293566],"bug":[9291808,9292440,9292579],"you'll":[9291808,9292120,9294437,9291707,9291437,9292203],"spend":[9291808,9291622,9291394,9292023],"becaus":[9291808,9293302,9292589,9292862,9292041,9292525,9291394,9291852,9291882,9291630,9292441,9293116,9292998,9291951,9294026,9291437,9293671,9292440,9293080,9293408,9293468,9293552,9293866,9292249,9291903,9292056,9292710,9292123,9293479,9292275,9293306],"nobody":[9291808,9292897,9293339],"encountered":[9291808],"befor":[9291808,9291345,9293661,9294026,9294509,9291508,9291528,9291903,9293306],"ye":[9291808,9293084,9292706,9292956,9291394,9291951,9293171],"term":[9291808,9291345,9292956,9291394,9291630,9292635,9293408,9293306],"author'":[9291808],"point":[9291808,9293302,9292589,9292862,9292946,9292902,9291885,9294409,9291630,9293304,9293297,9293572,9293276,9293552,9293652,9293925,9294509,9292249,9291903,9292710,9293317,9293566],"engin":[9291808,9292083,9292862,9293661,9291394,9291630,9292135,9292555,9292657,9294065,9293304,9292441,9293620,9292472,9294026,9291437,9293671,9292915,9293208,9293032,9293415,9293468,9294509],"particularly":[9291808],"one":[9291808,9294437,9292132,9292589,9292083,9292946,9292897,9291622,9292525,9291394,9291707,9291852,9291630,9293575,9291951,9292279,9293276,9294026,9291689,9293442,9291437,9293671,9294309,9292899,9292203,9293032,9293408,9294117,9293468,9293925,9293982,9294509,9293186,9293971,9291738,9291520,9291903,9293317,9293566,9292195],"nev":[9291808,9291345,9291622,9292525,9294309,9294509,9293037,9293872,9291508,9292023],"scaled":[9291808],"maintained":[9291808],"system":[9291808,9294437,9292589,9293661,9292844,9291951,9294026,9291492,9293552,9294318,9293566,9293306],"million":[9291808,9294026],"us":[9291808,9292120,9292132,9292734,9294026,9292440,9292635,9293235,9293566],"consistently":[9291808],"underweight":[9291808],"they'v":[9291808,9291492],"tech":[9291808,9292120,9291803,9292091,9292862,9293661,9293950,9291707,9292538,9291492,9293037,9291903,9292710,9292123,9292195,9293306],"oth":[9291808,9292589,9292862,9292946,9291604,9292525,9292956,9291882,9292844,9293276,9294026,9291492,9291437,9294309,9293408,9294117,9293866,9293982,9292765,9293479,9293566],"peopl":[9291808,9292132,9293661,9292639,9292041,9292917,9291394,9291572,9291852,9291882,9291630,9292844,9293276,9294026,9294399,9291437,9294309,9291645,9294117,9293468,9293552,9291903,9292023,9293536],"them":[9291808,9292083,9292946,9292956,9291394,9291707,9291771,9292313,9294026,9294309,9292635,9292915,9293208,9294117,9293866,9292249,9291903,9292056,9293508,9293566,9293306],"solved":[9291808,9291630,9293116,9291492,9293671,9294318],"googl":[9291808,9292810,9292538,9292844,9293925],"answ":[9291808,9292946,9292881,9291771,9291630,9294026,9291437],"pul":[9291808],"bleeding":[9291808,9292897,9293394,9292123,9293317,9293479],"edge":[9291808,9292897,9292019,9291394,9292844,9293116,9293394,9292710,9292123,9293317,9293479],"run":[9291808,9294437,9291603,9292817,9291951,9291492,9291689,9294117,9293866,9293037],"drop":[9291808],"everything":[9291808,9292132,9294026,9292123],"fix":[9291808,9294026,9293652,9293866],"else":[9291808,9292706,9292897,9291852,9291437,9293671,9292899,9292579],"agree":[9292120,9292902,9291852,9293304,9291689,9292978,9293032,9293652],"completely":[9292120,9291630],"furthermor":[9292120],"i'd":[9292120,9294437,9292019,9291492,9292635,9292720,9293925,9294337,9293566,9292195,9293536,9292275],"add":[9292120,9293339,9291645],"view":[9292120,9292946],"mainten":[9292120,9292021],"too":[9292120,9294437,9291951,9294507,9294309,9293552,9292195],"also":[9292120,9291803,9292525,9292881,9293339,9292844,9293276,9293374,9293394,9292978,9293408,9293552,9293652,9293866,9293235,9293037,9293872,9292143,9292275],"effect":[9292120,9293671,9291508],"requir":[9292120,9294026,9293442,9294117,9293866,9293508,9293306],"than":[9292120,9294437,9292747,9292862,9292946,9291394,9292882,9291630,9293304,9292844,9294026,9293374,9294484,9293671,9292440,9292899,9292915,9293208,9291645,9292978,9292579,9293408,9294117,9291738,9293037,9291520,9293342,9294337,9293508,9293566,9293536],"stack":[9292120,9292589,9292946,9292441,9293276,9291437,9293394,9292123,9292143],"wher":[9292120,9293661,9291630,9293339,9293116,9291951,9292279,9293276,9293374,9292978,9294117,9293552,9293652,9293925,9293235,9292249,9292710,9293536],"limit":[9292120,9292917],"known":[9292120,9292349,9292041,9292525,9292881,9294012],"refactor":[9292120],"ballooning":[9292120],"bas":[9292120,9293235,9292275],"mov":[9292120,9292364,9291630,9294026,9293468,9293552,9293652],"clean":[9292120],"cruft":[9292120],"about":[9292120,9294437,9291554,9293302,9292083,9292862,9291604,9293661,9292041,9293137,9291394,9291707,9292882,9292538,9292441,9292844,9291951,9294026,9291437,9293671,9294309,9292154,9292440,9292899,9292952,9293171,9292203,9293408,9293866,9293925,9293982,9291716,9292654,9292710,9292023,9292123,9293306],"integrating":[9292120],"reason":[9292120,9292928,9292589,9291882,9292135,9293339,9294026,9292899,9293982,9293037,9292150,9292654],"end":[9292120,9292928,9292917,9291707,9291645,9292952,9293394,9292978,9293032,9293408,9293479,9292195,9293306],"solution":[9292120,9292928,9292091,9291707,9294026,9291437,9293652],"both":[9292120,9292862,9292019,9291707,9292882,9292135,9292538,9294026,9292154,9292440,9292899,9293866,9291508,9291528,9291903,9292143,9292195],"robust":[9292120,9293866],"effici":[9292120,9292946],"whol":[9292120,9292589,9291885,9294507,9293925,9293982,9293306],"scaling":[9292120,9292083,9293306],"issue":[9292120,9291756,9292862,9291771,9292844,9291492,9293442,9291719,9291437,9294117,9293552,9293566],"perhap":[9292120,9292862,9292946,9293536],"mod":[9292120,9292589,9293572],"jour":[9292120],"assum":[9292120,9291572,9293552],"increased":[9292120],"serv":[9292120,9292132,9292897,9294026,9293374,9293080,9293408,9294117,9292123],"regardless":[9292120,9292589,9293925],"they'r":[9292120,9292946,9293468,9293866],"hosted":[9292120,9293866],"necessary":[9292120,9292946,9291622,9294509],"part":[9292120,9292135,9293297,9294026,9293374,9292366,9293552,9293652,9294509,9292249,9292123],"websit":[9292120,9291689,9292023],"rethinking":[9292120],"help":[9292120,9292946,9294117,9293468,9292710,9293508,9293536],"keep":[9292120,9292862,9293575,9294026,9292143,9293306],"und":[9292120,9294026,9292654],"control":[9292120,9293116],"decision":[9292120,9291852,9291882,9291630,9294026,9292915,9293208,9292203],"wait":[9292120],"until":[9292120,9291492,9294309],"dec":[9292120,9292538],"userbas":[9292120],"stil":[9292120,9292639,9291622,9292956,9292241,9292555,9292538,9292844,9292998,9293297,9294026,9293671,9293080,9293468,9293552,9293925,9291738,9291520,9293604,9292123,9293479,9293566],"good":[9292120,9291803,9293319,9294437,9292589,9292083,9292706,9292862,9291603,9294409,9292917,9291394,9291882,9291630,9293339,9292844,9293620,9293116,9291951,9293276,9293671,9293408,9293186,9293872,9291508,9292710,9292023,9293566,9292143,9292275,9293306],"open":[9292120,9292083,9293306],"minded":[9292120],"benefit":[9292120,9293408,9293925,9293317,9293479,9293306],"bring":[9292120,9291707],"can't":[9292928,9292083,9292956,9291394,9292817,9292844,9294117,9291738,9293536],"mak":[9291803,9292862,9291603,9293661,9292902,9292525,9292956,9291394,9291852,9291882,9291630,9292441,9292998,9292279,9292440,9292203,9294117,9293552,9293652,9293866,9293925,9293235,9292023,9293566,9292143,9293536,9293306],"legacy":[9291803,9292441,9292366,9294509],"once":[9291803,9291689,9293671,9294117],"you've":[9291803,9292956,9294509],"written":[9291803,9291394,9291630,9292978,9294117,9294509,9291716,9294337,9292710,9292275],"app":[9291803,9291622,9291437,9292440,9291645,9292952,9293394,9292978,9293080,9293552,9293235,9294337,9292123],"featur":[9291803,9292882,9291882,9292844,9292579,9294509,9291716,9293235,9293306],"complet":[9291803],"profit":[9291803,9292998],"expending":[9291803],"effort":[9291803,9294509],"rewrit":[9291803,9291951,9292440],"question":[9291803,9292881,9292555,9292998,9294026,9291437,9293566],"valu":[9291803,9292946,9293661,9292882,9294026,9292440,9292579,9293032,9293408,9293552,9293652,9291738],"proposition":[9291803],"actively":[9291803],"danger":[9291803,9291738],"replacing":[9291803,9293319],"ugly":[9291803,9293319],"beauti":[9291803,9293319],"fail":[9291803,9293319,9294437,9292083,9291437],"engineering":[9291803,9293319,9292083,9292882,9291630,9292135,9292241,9292555,9292657,9292844,9293276,9293408,9294117,9291508,9293306],"marketing":[9293319,9292657],"plu":[9292021,9292441,9291689],"going":[9292021,9292956,9293339,9294026,9291437,9293671,9292249,9292123],"trendy":[9292021],"framework":[9292021,9293339,9293276,9291492,9292978,9293080,9293479,9293536],"emerged":[9292021],"last":[9292021,9294026,9291437,9292952,9293394,9292978],"ch":[9292021,9293116],"nee":[9292021,9294437,9292132,9293661,9293950,9291394,9292555,9291492,9293374,9294484,9293671,9292899,9292952,9293394,9292978,9292579,9294117,9293468,9293552,9293652,9293866,9292249,9292457,9293306],"one'l":[9292021],"w":[9292021,9292132,9294026,9293671,9294509,9292249],"mentioned":[9294109,9292946,9291604,9293374,9293982],"exciting":[9294109,9293661,9291464,9293671,9292249,9291903],"technology":[9294109,9291554,9292132,9292083,9292862,9291345,9291604,9291622,9292019,9292902,9292917,9291394,9291630,9292538,9293339,9292844,9293575,9293620,9292279,9293276,9294026,9293374,9291786,9294399,9291437,9293671,9292154,9293208,9292497,9292579,9293032,9293415,9294117,9293468,9293235,9292249,9293037,9291508,9291520,9292710,9293306],"altern":[9294109],"multi":[9294109,9292083,9291689],"datac":[9294109],"servic":[9294109,9294437,9292946,9293032,9293408],"discovery/health":[9294109],"check/config":[9294109],"distribution":[9294109],"that'l":[9294109],"using":[9294437,9291603,9291604,9291394,9291630,9292538,9292998,9292279,9293276,9294026,9291437,9292154,9292366,9291645,9292579,9293408,9293925,9294509,9293037,9291508,9291520,9292150,9292457,9292023],"dn":[9294437],"dynam":[9294437],"zon":[9294437],"simpl":[9294437,9293084,9291492,9294318],"discovery":[9294437],"mechan":[9294437,9291771,9293982,9292710],"sharing":[9294437],"mast":[9294437,9292589],"all":[9294437,9292747,9293084,9292083,9292946,9291622,9292917,9291394,9291707,9292313,9291852,9291882,9291630,9294026,9293374,9293671,9294309,9292915,9293208,9293394,9292497,9293552,9293652,9293925,9294509,9293235,9294070,9292710,9292023,9293317,9293566,9293536,9292275],"environ":[9294437,9292083,9292956,9294026,9294117,9293552],"soon":[9294437],"find":[9294437,9292132,9291885,9292917,9292956,9293950,9292844,9292998,9291951,9294026],"out":[9294437,9293084,9292091,9291885,9292956,9291394,9291707,9291852,9291630,9292538,9293339,9292844,9292472,9293292,9293276,9294026,9294012,9292635,9292899,9294509,9293508,9293536,9293306],"healthchecking":[9294437],"cli":[9294437],"aw":[9294437],"refreshing":[9294437],"st":[9294437,9291508],"from":[9294437,9292132,9291815,9292083,9292364,9291345,9292917,9293137,9291394,9291630,9292441,9292998,9294026,9293671,9292952,9292978,9293552,9293866,9294509,9292249,9293604,9292765,9292123,9293566,9292195,9292275,9293306],"singl":[9294437,9291630,9292472,9291689,9292978],"bad":[9294437,9291882,9291630,9291492,9292457],"larg":[9294437,9292917,9291630,9292135,9292241,9292555,9292657,9292538,9293304,9293408,9294117,9293552,9294509,9293037,9293306],"repl":[9294437,9292589],"finicky":[9294437],"caching":[9294437,9292862],"slow":[9294437,9291603,9292917,9294026],"puppet":[9294437],"puppetdb":[9294437],"sorta":[9294437],"fil":[9294437,9291554,9292657,9293552],"gap":[9294437],"long":[9294437,9292917,9292956,9291630,9293339,9294026,9291492,9292635,9293408,9293415,9293468,9294509,9292056,9293536],"fast":[9294437,9291554,9292083,9292917,9294509,9293037],"converg":[9294437],"few":[9294437,9292589,9291603,9291645,9293394,9294509],"millisecond":[9294437],"away":[9294437,9292083,9293925,9293982],"any":[9294437,9292897,9292917,9292956,9291882,9292657,9292844,9294026,9291492,9292579,9294117,9292457,9293508],"nod":[9294437,9292956,9291394,9291689,9293032,9293408,9294509,9292123,9292195],"consul":[9294437],"may":[9294437,9292441,9291492,9292167,9292635,9293032,9293408,9291738,9292710],"built":[9294437,9293661,9291394,9293339,9294026,9291689,9292635,9292720,9293080,9292249,9293479],"solid":[9294437,9292902,9291394,9292844,9292123],"technolog":[9294437,9293084,9292589,9292862,9291604,9293661,9291394,9291630,9292538,9293339,9292734,9293276,9293442,9293671,9293394,9292579,9293032,9294509,9293235],"pap":[9294437],"1":[9294437,9291394,9291771,9292978,9293235,9291508,9292056,9294070],"underlying":[9294437,9292083,9291951,9293536],"sens":[9294437,9293661,9292525,9292881,9292956,9293652,9293866,9293925],"counteract":[9294437],"sit":[9291554,9292132,9293084,9292019,9291630,9291689,9291716],"currently":[9291554,9294117],"down":[9291554,9292132,9291603,9291951,9294026,9291437],"503":[9291554,9291396],"whil":[9291554,9292917,9291852,9291951,9291492,9293080,9293032,9293408,9294509,9292195,9293306],"we'r":[9291554,9291882,9294117],"talking":[9291554,9293302,9292041,9292440,9293171,9293925,9293982],"pleas":[9291554,9293604],"consid":[9291554,9292946,9291716],"hosting":[9291554,9292132,9294026],"blog":[9291554,9292132,9292747,9293084,9293302,9291607,9293572,9293032],"stat":[9291554,9292132,9292747,9293084,9292525,9292881],"host":[9291554,9291756,9291607,9294026,9291719],"+":[9291554,9294026],"cdn":[9291554],"easi":[9291554,9291630,9291492,9291437,9292978,9294337,9293566],"maintain":[9291554,9294117],"virtually":[9291554],"imposs":[9291554,9291882],"tak":[9291554,9292817,9293297,9294026,9291492,9293171,9293032,9293408,9294318,9294509,9291738],"see":[9292132,9292041,9292313,9292844,9293116,9293235],"recommend":[9292132,9292143,9292275],"gen":[9292132,9291603,9294065,9293552,9293652],"i've":[9292132,9292091,9292349,9292902,9291437,9294309,9292440,9292579,9293982,9293037,9291508],"recently":[9292132,9291689,9294484,9291645,9292249,9292710],"don":[9292132,9292917,9291394,9293374,9294117,9292023,9293566],"research":[9292132,9294309],"couldn't":[9292132,9294026],"gener":[9292132,9293084,9291437],"g":[9292132,9293084,9294360,9291630,9294509,9292654],"wysiwyg":[9292132],"editor":[9292132,9292747],"brows":[9292132,9291645],"let":[9292132,9291951,9293306],"edit":[9292132],"post":[9292132,9294065,9292441,9293572,9291689,9293032,9293508],"pc":[9292132],"tablet":[9292132],"phon":[9292132],"including":[9292132],"pictur":[9292132],"upload":[9292132,9292747],"click":[9292132],"publishing":[9292132,9291645],"eith":[9292132,9293620,9293866,9292195,9293306],"left":[9292132,9292881,9292882,9294026],"editing":[9292132,9292747],"portion":[9292132],"said":[9292132,9294065,9293304,9294026,9291689,9292056,9293566],"use":[9292132,9292747,9293302,9293661,9292902,9293950,9291391,9291394,9292882,9291630,9292844,9293575,9293620,9293116,9293442,9294484,9291437,9293671,9292167,9292366,9293394,9292978,9293080,9294117,9293925,9291716,9292249,9292056,9292457,9292023,9293508,9293566,9292195,9293536],"winscp":[9292132],"html/markdown":[9292132],"wordpress":[9292132,9292747,9293084,9291645],"job":[9292132,9291756,9291604,9292902,9294026,9291719,9294309,9294117,9293306],"writ":[9292132,9291815,9291394,9292978],"thought":[9292132,9291630,9293235],"specif":[9292132,9293661,9292844,9293032,9293552,9294070,9293536],"wyswyg":[9292132],"own":[9292132,9293302,9292862,9291852,9291882,9292366,9293652,9293866,9293982,9293536],"s3":[9292132,9291716],"proprietary":[9292132,9294026],"paid":[9292132,9294309,9293306],"generating":[9292747],"seriously":[9292747],"vim+git":[9292747],"managing":[9292747,9292635],"feel":[9292747,9291885,9294117,9293536],"natur":[9292747],"favorit":[9292747,9293037],"import":[9292747,9291394,9293575],"drag&drop":[9292747],"imag":[9292747],"in":[9293084,9293536],"loc":[9293084,9291630,9292441,9293408],"optima":[9293084],"styl":[9293084,9291645],"gui":[9293084,9294026],"creating":[9293084],"compil":[9293084],"deploy":[9293084,9291630,9294026,9293374,9293408,9293468,9293552,9293925,9294318],"directory":[9293084],"structur":[9293084,9292249],"convention":[9293084],"hoop":[9293084],"jump":[9293084],"through":[9293084,9292882,9294509],"pagin":[9293084],"d":[9293084],"fit":[9293302,9292589,9292457,9292275],"naturally":[9293302,9291707],"hand":[9293302,9292946,9293661,9291630,9294026,9291492,9293552,9293652,9293982,9293479],"document":[9293302,9294026,9293566,9292275],"tool":[9293302,9292902,9292817,9293575,9291689,9291437,9293408,9293235,9292249,9292710],"mkdoc":[9293302],"that'":[9293302,9292862,9292122,9291394,9292555,9292657,9293304,9292844,9291492,9291786,9294399,9292203,9293925,9293235,9293971,9292249,9291508,9293508,9292143,9293536],"gp":[9293302],"pref":[9293302,9293442,9292635,9292720,9292123,9293536],"git+vim":[9293302],"snarky":[9291756,9292366],"according":[9291756,9291852],"i'm":[9291756,9292364,9291885,9292525,9294409,9292956,9294065,9294026,9291492,9291719,9291437,9293671,9292366,9292440,9292497,9292579,9293652,9293866,9293925,9293982,9293342,9293604,9293306],"fighting":[9291756,9291719,9291528],"quota":[9291756,9291719],"dumb":[9291756,9291572,9291771,9291852,9292882,9291882,9291719],"assur":[9291756,9291719],"migrating":[9291756,9291719,9292366],"bett":[9291756,9292589,9291394,9292882,9291630,9291951,9293572,9294026,9293374,9291719,9294399,9293671,9294012,9294117,9292249,9293037,9293604,9292710,9292023],"day":[9291756,9292589,9292946,9291603,9292555,9292998,9291719,9294399,9293394,9293866,9294509],"insight":[9291815],"sub":[9291815,9293925,9292143],"titled":[9291815],"seeing":[9291815,9294065,9291903,9293536],"company":[9291815,9292862,9292902,9291630,9293339,9292441,9291951,9294507,9292915,9294117,9293468,9293552,9293925,9294509],"centr":[9291815],"develop":[9291815,9291707,9292817,9294026,9292366,9292635,9292915,9293394,9293866,9294509,9293235,9293037,9292023,9293566,9292195,9293536],"pov":[9291815],"hat":[9291815],"it":[9291815,9291394,9291630,9292538,9291492,9291437,9292899,9292952,9291508,9291528,9293604,9293317,9293479,9293508,9292275],"having":[9291815,9293661,9291394,9291630,9293339,9291492,9293374,9293468,9294509],"courag":[9291815],"linking":[9292589],"aphyr'":[9292589],"redi":[9292589],"cal":[9292589,9292956,9292555,9292657,9291951,9292279],"mayb":[9292589,9293137,9292657,9294026,9291437,9293671,9294012,9293394,9294117,9293037],"exampl":[9292589,9294360,9292441,9293671,9293032,9293186,9292249,9291738,9292710,9293508],"poss":[9292589,9291603,9294026,9293866,9293235],"troubl":[9292589,9292817],"show":[9292589],"doe":[9292589,9292946,9291603,9291394,9291882,9291630,9293292,9293408,9293468,9293552,9294509,9293566],"wel":[9292589,9291394,9292135,9292441,9293572,9293276,9294026,9291437,9293671,9292167,9292899,9291645,9294117,9294509,9293235,9293037,9292275],"failur":[9292589,9292083,9292441,9293572],"mysql":[9292589,9292956,9291716,9292123,9293508],"itself":[9292589,9292441,9294026,9293604],"id":[9292589,9292083],"failov":[9292589],"slav":[9292589],"asynchron":[9292589],"theory":[9292589,9293415,9293468,9292249],"contradict":[9292589],"happen":[9292589,9291630],"formulated":[9292589],"old":[9292589,9293661,9291394,9291492,9294484,9292899,9292249,9291508,9291520,9292710,9292123],"switch":[9292589],"without":[9292589,9291707,9293208,9292457],"useless":[9292589],"analyz":[9292589],"strenght":[9292589],"used":[9292589,9292897,9292817,9293116,9294026,9291492,9291689,9291464,9294309,9293415,9293468,9294509,9293037,9293872,9291508,9292123],"past":[9292589,9291345,9292555,9294509],"perform":[9292589,9291394,9292150,9292654,9294070,9293306],"much":[9292589,9292862,9292946,9293661,9293137,9291394,9292882,9291630,9291951,9294026,9291437,9293671,9292635,9292720,9292899,9292497,9293408,9294117,9293982,9294509,9293037,9292654,9293604,9293479,9293566,9293536,9293306],"doc":[9292589],"check":[9292589,9291508],"why":[9292589,9292946,9292525,9292882,9291882,9291630,9292135,9292555,9293304,9292817,9292203,9293415,9293468,9293552,9293235,9292056,9293306],"alway":[9292589,9292091,9292349,9292525,9294409,9291630,9292817,9293671,9292899,9294117,9293037],"set":[9292589,9291345,9291630,9292844,9293671,9292720,9293408,9292249,9293037,9291903],"best":[9292589,9292946,9292902,9292881,9291771,9291852,9291630,9292998,9292472,9293292,9294399,9291437,9292915,9293208,9291508,9292195,9293306],"adopt":[9292589,9291492],"lat":[9292589,9293080,9292249],"turn":[9292589,9292844],"obviou":[9292589,9291492],"brav":[9292589],"crazy":[9292589],"fact":[9292589,9292083,9294409,9294012,9294509,9293317],"extremely":[9292083,9291630,9293866],"betray":[9292083],"originator'":[9292083],"anoth":[9292083,9292364,9291572,9294026,9294012,9294117,9293186],"chang":[9292083,9292862,9292946,9291622,9294117],"three":[9292083,9291630,9291951],"axe":[9292083],"process":[9292083,9292364,9292882,9294509,9293566,9293306],"choosing":[9292083,9293032,9293408],"allow":[9292083],"progress":[9292083],"likely":[9292083,9291882,9291492,9293671,9292635,9293925,9293566],"success":[9292083,9292882,9291630,9292135,9292441,9291508,9293306],"two":[9292083,9292862,9292956,9291394,9291707,9294360,9292135,9293374,9291689,9294117,9293866,9293982,9292123],"yourself":[9292083,9292167,9292366,9293208,9292203,9293652,9293866,9293925,9293566],"non":[9292083,9291604,9292956,9293339,9292441,9291645,9293552,9293037],"trivi":[9292083,9293037,9293566],"mean":[9292083,9292902,9291852,9293374,9292978,9293415,9293468,9293306],"project":[9292083,9292862,9292946,9291391,9291394,9291707,9292817,9294026,9294484,9291437,9293671,9294309,9292154,9292635,9292915,9294117,9293925,9293508,9293566],"nifty":[9292083],"talk":[9292083,9292862,9291394,9291951,9293080],"stev":[9292083],"mcconnel":[9292083],"judg":[9292083,9291852,9293925,9291508],"goe":[9292083,9292882,9291492,9293982],"kind":[9292083,9292862,9293661,9292019,9292917,9292817,9292844,9293575,9292710,9293306],"analysi":[9292083,9291951],"deb":[9292083],"matt":[9292083,9291630,9292366,9293415,9293468,9293552],"weighing":[9292083],"conclusion":[9292083,9291852],"pushing":[9292083],"boundar":[9292083],"equ":[9292083],"structurally":[9292083],"fam":[9292083],"cheap":[9292083],"triangl":[9292083],"start":[9292083,9291951,9292366,9292952,9292978,9294318,9292195,9292275],"hitting":[9292083],"hom":[9292083],"team":[9292083,9291707,9291630,9293671,9294012,9293032,9293408,9293468,9294509,9293186,9292710,9293306],"say":[9292083,9292525,9291394,9292844,9292635,9293408,9294509,9294070,9292765,9293566,9292195],"50":[9292083,9292538,9291738],"had":[9292091,9292897,9291394,9292538,9293339,9293572,9294026,9293671,9294012,9294509,9293037,9291903,9292710],"soft":[9292091],"spot":[9292091],"choos":[9292091,9291394,9291630,9293620,9291508],"argu":[9292091,9294026,9293032,9294509],"poor":[9292091,9292279],"match":[9292091],"rath":[9292091,9292946,9291707,9292279,9292915,9293208,9291645,9293508,9293536],"each":[9292091,9292862,9292946,9291622,9291707,9291852,9291951,9292279],"objectively":[9292091,9292882],"decid":[9292091],"select":[9292091],"accordingly":[9292091],"attributed":[9292349],"unknown":[9292349,9292810,9292041,9292525,9292881],"etc":[9292349,9292956,9291630,9292657,9293276,9293374,9293408,9293468,9293925,9292249,9291508,9292023,9293536],"nassim":[9292349],"taleb":[9292349],"rumsfeld":[9292349,9292810,9291885,9292041,9292525],"polit":[9292706],"dig":[9292706],"lazy":[9292706],"blemish":[9292706],"otherwis":[9292706],"first":[9292810,9292862,9291630,9291951,9294026,9293671,9292899,9292915,9293982,9292457],"hit":[9292810],"wikipedia":[9292810],"immediately":[9292810,9293235],"mention":[9292810,9292862,9293982],"starting":[9292862,9291630,9294309,9292143,9293536],"choic":[9292862,9291603,9292538,9292844,9292998,9293276,9294117,9292023,9293536,9293306],"many":[9292862,9291622,9291394,9291882,9292998,9293652,9293866,9293235,9293604,9293508],"applying":[9292862,9292579],"advic":[9292862],"world":[9292862,9292313,9291882,9292538,9294484,9292899,9294509,9293566,9293306],"intertwining":[9292862],"seper":[9292862],"limiting":[9292862,9292917],"organis":[9292862,9292946],"incorporating":[9292862],"mind":[9292862,9293566],"strateg":[9292862],"secondly":[9292862],"notion":[9292862],"big":[9292862,9293116,9291528,9293306],"obviously":[9292862,9292946,9291882,9292844,9294309,9293925],"switching":[9292862],"languag":[9292862,9292897,9293137,9292956,9291630,9292441,9292817,9292844,9292998,9292472,9293292,9291951,9292734,9293276,9293374,9293925,9292249,9292457,9292710,9292123,9293566,9292195,9293536],"bigg":[9292862],"librar":[9292862,9292203,9292023,9292123,9293508,9293566],"thirdly":[9292862],"s":[9292862,9293652,9294509],"created":[9292862,9292946],"~300":[9292862,9292946],"microservic":[9292862,9292946,9293415,9294117,9293468,9293552],"allowed":[9292862,9294026],"900":[9292862],"alon":[9292862],"unmanag":[9292862],"fourthly":[9292862],"strategy":[9292862,9292635],"cultur":[9292862,9292882,9291630,9293394,9294509],"prototyp":[9292862],"seen":[9292862,9291345,9292579,9293982,9294509,9291738,9292710],"wast":[9292862,9293037],"dev":[9292862,9291951],"jeal":[9292862],"considered":[9292862],"invest":[9292862],"mitig":[9292862],"lead":[9292862,9292441,9294026],"prototyping":[9292862],"experiment":[9292862],"unfortunately":[9292946,9291882],"'it":[9292946],"depends'":[9292946],"inertia":[9292946],"plac":[9292946,9292917,9293339,9293620,9293374,9292440,9292915,9292195],"specifically":[9292946,9294117,9293652,9293866,9293566],"taking":[9292946,9291492],"pragmat":[9292946],"imagin":[9292946,9292897],"based":[9292946,9291852,9293408,9293866,9294509,9292056,9293536],"pattern":[9292946,9293671,9293306],"apply":[9292946,9291394,9291771,9292497],"individu":[9292946,9291572,9291707,9291771,9291852,9292882],"microservivc":[9292946],"least":[9292946,9291707,9293208,9293394,9293866,9292023],"p":[9292946,9293925],"pretty":[9292946,9294409,9293408,9294117,9293468,9294318,9292195],"you'd":[9292946,9292817,9293566],"unless":[9292946,9291492,9291437,9292952,9292978,9292579,9293408,9294509,9293306],"hah":[9292364],"right":[9292364,9291604,9293950,9291394,9291852,9291630,9292135,9291689,9291437,9292952,9293652,9294070,9293306],"helping":[9292364],"group":[9292364,9291572,9291707,9291771,9291852,9292882,9291882,9293037],"cv":[9292364],"git":[9292364],"concept":[9291345,9292902,9291508,9293536],"expand":[9291345,9293235],"board":[9291345],"structured":[9291345,9293566],"remov":[9291345,9291882],"standard":[9291345,9293950,9292538,9293339,9291437,9293671,9292123],"protection":[9291345],"sheet":[9291345],"twitt":[9291345],"account":[9291345,9292915],"manag":[9291345,9292657,9293408],"rethink":[9291345],"offic":[9291345,9294065],"los":[9291345,9292956,9291707,9292817,9292899],"multipl":[9291603,9292952,9293394,9292978],"lucky":[9291603,9293394],"generally":[9291603,9293032,9293536,9293306],"optim":[9291603,9291630,9292441,9291951,9292734,9293408,9293925],"lin":[9291603,9291630,9294026,9292899,9293925,9291738],"boilerpl":[9291603],"dependenc":[9291603,9292203],"respect":[9291603],"cpu":[9291603],"cycl":[9291603,9293306],"needed":[9291603,9291707,9293116,9294117],"pick":[9291604,9293671,9293032,9292143,9292195],"worry":[9291604],"elast":[9291607],"cloud":[9291607,9294026,9293552,9293866,9293925,9293982,9293508],"foolish":[9293661],"reality":[9293661],"senior":[9293661],"stag":[9293661],"car":[9293661,9292844,9292366,9292915,9292710],"build":[9293661,9292844,9293671,9292720,9293032,9293408,9291738,9292023,9293306],"fun":[9293661,9291951,9292899,9291645],"focused":[9293661],"building":[9293661,9292844,9293408,9292249],"provid":[9293661,9292956,9293575],"compan":[9293661,9292917,9293137,9292538,9293339,9293575,9293866,9293925,9291528],"looking":[9293661,9294026,9291903,9292123],"assess":[9293661],"industry":[9293661,9291508,9293508],"doesn't":[9293661,9293137,9291394,9291882,9293415,9293468,9293982,9293306],"advantag":[9293661,9293116,9292710],"wer":[9292639,9291394,9294026,9293394,9293925,9294509],"thinking":[9292639,9291630,9293306],"guy":[9292639,9294409,9292881],"living":[9292639],"cav":[9292639],"rul":[9292897,9293950,9291391,9291394,9291738],"thumb":[9292897,9293950,9291391,9291394],"littl":[9292897,9291622,9291852,9292882,9293575,9291951,9294309,9294509,9292123],"dated":[9292897],"5":[9292897,9293304,9294026],"10":[9292897,9292135],"ago":[9292897,9293339],"installed":[9292897],"via":[9292897,9293374,9291645,9294070],"default":[9292897],"o":[9292897,9293925],"packag":[9292897],"weird":[9292897,9293137],"unusu":[9292897],"daemon":[9292897],"rest":[9292897,9291630,9294509,9293566,9292143,9293536],"stock":[9292897],"ironically":[9291622,9291882],"rail":[9291622,9292019,9291437,9291508,9294337,9292023,9292123,9293536],"category":[9291622,9292525],"major":[9291622],"introduc":[9291622,9294026],"enough":[9291622,9292122,9292956,9292555,9292657,9293032,9294117,9293925,9293982,9293037,9293306],"breaking":[9291622],"api":[9291622,9291689,9291437,9292952,9292978,9293080,9293415,9293468,9293566],"updated":[9291622,9294026],"pain":[9291622,9292122,9294484,9292123,9293306],"spending":[9291622,9291508],"pleasur":[9291622],"smal":[9291622,9291492,9294117,9293652,9293866,9294509,9291528,9293566,9293306],"loosely":[9291622],"coupled":[9291622],"modul":[9291622,9294026,9293566],"fraction":[9291622],"revert":[9291622],"back":[9291622,9291630,9293297,9294026,9293394,9292249,9291508,9293317],"argue":[9292019],"busi":[9292019,9293950,9292882,9291630,9291951,9293306],"h":[9292019],"breakag":[9292019,9292122],"true":[9292122,9294409,9291771,9291903,9293566],"monolith":[9292122],"expression":[9292902],"heard":[9292902],"sum":[9292902,9292882],"aft":[9292902,9294065,9294012,9292249],"school":[9292902],"club":[9292902],"playing":[9292902],"money":[9292902,9291852,9292440],"most":[9292902,9291852,9291882,9293116,9294026,9293374,9291645,9292952,9293394,9293032,9294509,9292249,9292909,9292123,9293508,9293566,9293536],"everyon":[9292902,9291394,9291951,9293572,9291492],"compelling":[9291885],"didn't":[9291885,9293566],"cam":[9291885,9294509,9291903],"play":[9291885,9294509],"did":[9291885,9291394,9291951,9294026,9291689,9293671,9293394,9293552,9293925,9292150,9292654],"somebody":[9291885,9293339],"missing":[9291885],"ridiculed":[9292041,9292525],"ridicul":[9292041,9294409,9291951],"phrasing":[9292041],"interestingly":[9292041],"becam":[9292041],"common":[9292041,9293394,9293508],"unknow":[9292041],"perfectly":[9292041,9294409,9292956],"sound":[9292041,9292917,9294507,9294309,9294318],"log":[9292041,9293080,9292249],"weirdly":[9292041],"associated":[9292041],"fan":[9292525,9294409,9293982,9293604],"understood":[9292525,9293572,9294026,9291492,9293235],"quot":[9292525,9294065,9292441],"below":[9292525],"perfect":[9292525,9293374],"report":[9292525],"hasn't":[9292525],"happened":[9292525,9291951],"throughout":[9292525,9293306],"history":[9292525],"country":[9292525],"free":[9292525,9293468,9293566,9293536],"countr":[9292525],"latt":[9292525],"tend":[9292525,9291852,9292882,9292657,9291492],"difficult":[9292525,9292441,9294026,9293925],"yeah":[9294409,9292881,9291719],"odd":[9294409],"disastrously":[9294409],"proven":[9294409,9292441],"quickly":[9294409,9292917,9293137,9291394,9291630,9293536],"mad":[9292881,9292882,9291630,9294026,9293866],"despit":[9292881,9293566],"liking":[9292881],"knowing":[9292881,9291951],"cours":[9292881,9291852,9291882,9292555,9292998,9291951,9294026,9292366,9293032],"dougla":[9292881],"adam":[9292881],"supply":[9292917,9292956],"fixed":[9292917,9294026],"hackernew":[9292917],"buying":[9292917,9292956,9293339,9294026],"plain":[9292917,9292123],"wrong":[9292917,9291771,9293552,9293652,9293536],"organ":[9292917,9291630,9292135,9292241,9292555,9292657,9292844,9293276,9294026,9293374,9293408,9293652,9293866,9293925,9294509],"properly":[9292917,9293566],"focu":[9292917,9293137,9292538,9293408,9292195],"lack":[9292917,9293137,9293276],"agility":[9292917,9293137,9292956],"prev":[9292917,9293137],"experimenting":[9292917,9293137],"failing":[9292917,9293137,9291437],"get":[9292917,9293468,9293925,9293982,9293566],"inability":[9292917],"evaluate/adopt/discard":[9292917],"granted":[9292917],"ability":[9292917,9291707,9291852],"ish":[9292917,9293479],"willingly":[9292917],"recip":[9292917],"death":[9292917],"gentleman":[9292917],"box":[9292917],"19th":[9292917],"century":[9292917,9291437,9292952,9293394],"himself":[9292917],"jab":[9292917],"cross":[9292917],"hook":[9292917],"entering":[9292917],"modern":[9292917],"mma":[9292917],"fight":[9292917,9291528],"wow":[9293137],"totally":[9293137,9293304,9291437],"got":[9292956,9293339,9294309,9293868,9294318],"com":[9292956,9291771,9291852,9291630,9292441,9292844,9292472,9293671,9291645,9294509,9291528,9292457,9292710],"trying":[9292956,9291394,9293339,9291951,9291437,9292154,9292366,9291645,9292497,9293468],"whatev":[9292956,9292441,9292899],"ten":[9292956,9294026],"python":[9292956,9291630,9291951,9292366,9292440,9293032,9293408,9293552,9292056,9293342,9292150,9292457,9292909,9293604,9293536],"95":[9292956],"codebas":[9292956,9291630,9292441,9293374,9292366,9294117,9291508,9292710],"data":[9292956,9293671,9291716,9292249,9293037,9293306],"stored":[9292956],"gain":[9292956],"introducing":[9292956],"mongodb":[9292956,9291394,9291951,9292123],"mix":[9292956],"trad":[9292956],"productivity":[9292956,9292654],"boost":[9292956,9291630],"maintaining":[9292956,9293080,9294337],"build/test/deploy":[9292956],"benefici":[9292956],"usually":[9292956,9292844,9291645,9291738,9292123],"often":[9292956,9291394,9291707,9292882,9291882,9292710,9292123],"short":[9292956,9294026],"analogy":[9292956,9292710],"somewhat":[9292956],"leaky":[9292956],"abstraction":[9292956],"sinc":[9292956,9292844,9294026,9291689,9291437],"trading":[9292956],"meaning":[9292956],"clear":[9292956,9293925,9293235],"fault":[9292956,9292279],"bal":[9293950,9294309],"reli":[9293950],"isol":[9293950,9292203,9293415],"corollary":[9293950],"hir":[9293950,9291394,9292817,9292844,9293116,9294026,9294012,9293408,9293415,9293468,9294509],"ramp":[9293950],"hous":[9293950],"deadlin":[9291391,9292915],"compon":[9291391,9294026,9294117],"intern":[9291391,9294026],"monkey":[9291394,9291630],"perspect":[9291394],"flinging":[9291394],"poo":[9291394],"boing":[9291394],"designed":[9291394,9293866,9293306],"mess":[9291394],"poorly":[9291394],"engineered":[9291394],"erlang":[9291394,9294117,9292123,9293317,9293479,9293508,9293566,9293536],"glob":[9291394,9292441,9293925],"lock":[9291394],"whos":[9291394],"hyp":[9291394],"exceeded":[9291394],"quality":[9291394,9292579],"monkey'":[9291394],"tel":[9291394],"supported":[9291394,9291630,9292135,9293339,9294509],"popularity":[9291394],"elixir":[9291394,9293479,9293536],"20":[9291394,9293339],"been":[9291394,9292135,9294026,9293671,9291645,9292579,9294117,9294509,9293037,9291508,9292023],"couchbas":[9291394],"nearly":[9291394],"decad":[9291394],"couchdb":[9291394],"memcach":[9291394],"silv":[9291394],"bullet":[9291394],"market":[9291394,9291707,9294360,9291852,9292882,9293116,9292579,9293306],"silly":[9291394],"4":[9291394,9291630,9294509],"taken":[9291394],"12":[9291394],"clos":[9291394,9291852,9292555,9292657],"wacky":[9291394],"web":[9291394,9291437,9292440,9293394,9292978,9294117,9293235,9292056,9292023,9293566,9293536,9292275,9293306],"platform":[9291394,9294509,9293317],"cutting":[9291394,9291707,9292844,9293116],"took":[9291394,9293866],"production":[9291394,9294026,9294509],"four":[9291394,9291771,9292313],"experienced":[9291394],"finding":[9291394],"tal":[9291394,9292882,9292998],"able":[9291394,9291437,9293415,9293468,9293652,9293866,9291738,9293536],"monk":[9291394],"human":[9291394,9291572,9291771,9291882,9292998],"hiring":[9291572,9292441,9292817,9293468],"personally":[9291572,9293866,9291508,9293536],"filt":[9291572,9291707],"saf":[9291572,9292195],"stupid":[9291572],"resorting":[9291707],"label":[9291707],"low":[9291707,9293116],"pass":[9291707,9292441],"abilit":[9291707],"compos":[9291707,9293306],"teach":[9291707,9294026,9292275],"commun":[9291707,9293394],"memb":[9291707,9291852],"bound":[9291707],"enthusiast":[9291707],"particular":[9291707,9292817],"cut":[9291707],"complex":[9291707,9293171,9294509],"half":[9291707,9292497],"simply":[9291707],"telling":[9291707],"independently":[9291707,9291852],"togeth":[9291707,9293235,9292275],"reintroducing":[9291707],"hassl":[9291707],"throw":[9291707,9294026],"alien":[9291707],"worked":[9291707,9294026,9293671,9294117,9293552,9294509],"confus":[9291707],"custom":[9291707,9293394,9294509],"brand":[9291707,9293671],"equity":[9291707,9293306],"exactly":[9291771,9291951,9293408,9294509],"behaviour":[9291771],"economist":[9291771],"sociologist":[9291771],"gon":[9291771,9292538,9294026,9291508],"beyond":[9291771],"anecdot":[9291771],"systematically":[9291771],"studied":[9291771],"surprising":[9291771,9293276],"capturing":[9291771],"‘collective’":[9291771],"wisdom":[9291771,9291852],"solv":[9291771,9293620,9291492,9291437,9292154,9292167,9291645,9292497,9293982],"cognit":[9291771],"condition":[9291771,9292313,9291852],"diversity":[9291771],"opinion":[9291771],"independ":[9291771,9293866],"correl":[9291771,9293116],"decentralis":[9291771],"suit":[9291771],"aggreg":[9291771],"sre":[9292313],"spher":[9292313],"cow":[9292313],"assumption":[9292313,9291882,9292635,9292720],"machin":[9294360],"learning":[9294360,9293575,9293671,9292440,9292720,9293208,9291738,9292023],"crowd":[9291852,9293552],"=":[9291852,9291951],"behav":[9291852],"action":[9291852],"pursu":[9291852],"constrained":[9291852],"collect":[9291852],"impl":[9291852],"cruci":[9291852],"function":[9291852],"inform":[9291852,9292882],"everybody":[9291852],"iconoclast":[9291852],"stand":[9291852,9291508],"forc":[9291852,9293235],"statist":[9291852],"error":[9291852],"contribut":[9291852],"arriving":[9291852],"occur":[9291852],"communicated":[9291852],"weakest":[9291852],"quantifying":[9292882],"pow":[9292882,9291951,9291437,9293566],"differenti":[9292882],"assessing":[9292882],"prediction":[9292882],"energy":[9292882],"hierarch":[9292882],"posturing":[9292882],"soci":[9292882],"signalling":[9292882],"relatively":[9292882,9293394,9293925,9293566],"pract":[9292882],"intellig":[9292882,9291951],"org":[9292882,9294117],"break":[9292882,9292844,9292710],"astounding":[9292882],"rooted":[9292882],"sci":[9292882],"historically":[9292882],"amplifi":[9292882],"configur":[9292882],"unst":[9292882],"far":[9292882,9292915,9293408,9294509,9293566],"stick":[9292882,9294026,9291492,9294309,9293080,9293925],"perman":[9292882],"oversimplifying":[9291882],"cas":[9291882,9291630,9294012,9294117,9293925,9292249,9292710],"study":[9291882],"context":[9291882,9292978,9293536],"precis":[9291882,9293866],"belonging":[9291882],"safest":[9291882,9292195],"reinforc":[9291882],"assuming":[9291882,9293620],"appl":[9291882,9293374,9293408,9294509,9292056,9293566,9293306],"xyz":[9291882,9292899],"bright":[9291882],"etsy":[9291630,9292441,9292817,9292472,9293374],"witnessed":[9291630],"typ":[9291630,9292844,9293374,9293408],"missed":[9291630],"tiny":[9291630],"instead":[9291630,9291951,9294026,9292366,9292440,9292635,9293080,9293552,9293652,9292195],"medium":[9291630,9293304,9292844],"120+":[9291630],"qualified":[9291630],"solving":[9291630,9293304,9292441,9292844,9293575],"within":[9291630,9293306],"mass":[9291630,9292998,9293925,9293306],"org/codebas":[9291630],"directly":[9291630,9293080],"differ":[9291630,9293304,9292734,9293276,9293671,9293408,9293468,9293552,9293925,9294509,9292123],"existing":[9291630,9291492,9293374,9293408,9293468,9294509,9293479],"overhead":[9291630,9293374],"almost":[9291630,9292538,9293671,9293306],"tempting":[9291630],"easy":[9291630,9292899,9293208,9293925,9294509,9292249,9293536],"reach":[9291630,9294026],"frustr":[9291630],"reasoning":[9291630],"wasting":[9291630],"'old'":[9291630],"'newstuff'":[9291630],"door":[9291630,9294012],"week":[9291630,9294026,9291689,9292899],"level":[9291630,9293116,9293276,9293394,9292579,9294509,9293235,9292275],"especially":[9291630,9294026,9294309],"continu":[9291630,9294026,9292366],"beginning":[9291630,9294509,9293306],"eventually":[9291630,9292167],"direction":[9291630,9293442],"shipping":[9291630,9292579,9293408],"technologiesno":[9291630],"organiz":[9291630],"entir":[9291630,9293408,9293925,9294509],"yet":[9291630,9292579,9292195],"php":[9291630,9292441,9292844,9293116,9292998,9292472,9293292,9291689,9291719,9292366,9292440,9293032,9293408,9293552,9294509,9293186,9291716,9292023,9292123,9292195,9293536],"ruby":[9291630,9293032,9293408,9293552,9293604,9293536],"universally":[9291630],"correct":[9291630],"picking":[9291630,9293671,9293235],"wors":[9291630,9294026,9291520],"infrastructur":[9291630,9293374,9293408,9293468,9293552,9293652,9293866,9293925,9294509,9293306],"agreeing":[9291630,9294509],"certainly":[9291630,9293032,9293408],"quit":[9291630,9292135,9294117],"opposit":[9291630],"ped":[9292135],"not":[9292135,9293442],"scal":[9292135,9292241,9292555,9292657,9292538,9293652,9293866,9292457,9292123,9293306],"addition":[9292135,9294026,9293566],"zero":[9292135],"ord":[9292135,9291951,9293306],"magnitud":[9292135],"000+":[9292135],"java":[9292135,9294026,9293374,9293394,9293468,9293552,9294509,9292710,9292123,9293566],"measur":[9292241,9292555],"facebook":[9292241,9292555,9292538,9293508],"i'll":[9292241,9292844,9294026,9291492,9291437,9293306],"stop":[9292241,9293671,9293037,9292150],"9":[9292555],"199":[9292555],"employee":[9292555,9292538,9292817,9293982],"decemb":[9292555],"31":[9292555],"2014":[9292555],"metr":[9292555,9292657],"10k+":[9292555],"minut":[9292555,9293671],"looked":[9292555],"they'd":[9292555],"grow":[9292555],"myspac":[9292555],"root":[9292555],"convincing":[9292555],"1/5th":[9292657],"sort":[9292657,9294026,9292579,9293566],"sal":[9292657],"admin":[9292657],"staff":[9292657],"qa":[9292657,9293408],"sysadmin":[9292657],"nic":[9294065,9293620,9293652,9293866,9293982],"catch":[9294065],"misread":[9294065],"sur":[9294065,9294026],"retract":[9294065],"senti":[9294065],"previ":[9294065],"aren't":[9292538],"9000":[9292538],"000":[9292538],"contrast":[9292538],"microsoft":[9292538],"128":[9292538],"hp":[9292538],"300":[9292538],"ibm":[9292538,9293339,9294026,9293866],"400":[9292538],"peak":[9292538],"startup":[9292538,9291437,9291508,9293306],"rightly":[9292538],"growth":[9292538,9293575,9293306],"remembering":[9292538],"gi":[9292538,9293339,9293866],"seg":[9292538],"mainfram":[9292538,9294026],"db2":[9292538],"cobol":[9292538,9294026],"saying":[9293339,9291437,9292440,9293306],"govern":[9293339],"depart":[9293339],"tax":[9293339],"pay":[9293339,9292249],"road":[9293339],"handl":[9293339],"insur":[9293339],"banking":[9293339],"chos":[9293339],"wasn't":[9293339,9294026,9294509],"entit":[9293339],"hug":[9293339,9293604,9292710],"off":[9293339,9294026,9294509,9292249],"1980":[9293339],"1990":[9293339],"bought":[9293339],"insolv":[9293339],"fired":[9293339],"behind":[9293339,9293080,9293037],"main":[9293304,9292899,9293925,9293982,9294509],"radically":[9293304],"20+":[9293304],"it'll":[9292441],"curr":[9292441,9294117,9291508],"prohibitively":[9292441],"expens":[9292441,9294026,9292366,9293468],"shop":[9292441,9292844,9294026,9294509,9291508,9291520,9293306],"surely":[9292441,9292279],"pres":[9292441],"form":[9292441,9294484,9291508],"hired":[9292441],"staying":[9292441],"unmaintain":[9292441],"spaghetti":[9292441],"blob":[9292441],"duck":[9292441],"tap":[9292441],"everywher":[9292441],"explain":[9292817,9293235],"it'd":[9292817],"successfully":[9292817],"analogously":[9292817],"promot":[9292817],"extern":[9292817],"hemorrhag":[9292817],"internally":[9292817],"stay":[9292817],"sandbox":[9292817],"de":[9292844,9293306],"incid":[9292844,9292998],"groan":[9292844],"workplac":[9292844],"annoy":[9292844],"somewher":[9292844],"amazing":[9292844],"cafeteria":[9292844],"food":[9292844],"suck":[9292844],"anecdotally":[9292844],"practic":[9292844,9294509,9293306],"brought":[9292844],"averag":[9292844],"numb":[9292844,9294509],"foot":[9292844,9291508,9291903,9292056,9293342],"gun":[9292844],"terr":[9292844,9293306],"unfortun":[9292844],"self":[9292844,9292366,9292440],"evid":[9292844],"dilig":[9292844],"c++":[9292844,9293116],"graphics/gam":[9292844,9293116],"truth":[9293575,9292915,9292249],"plenty":[9293575,9292710,9293508],"crud":[9293575],"personal/profession":[9293575],"new/differ":[9293575],"scenario":[9293620],"strength":[9293116],"memory/cpu":[9293116],"optimized":[9293116],"heck":[9293116],"encount":[9293116],"proxy":[9293116],"deciding":[9293116,9293032,9293408],"impact":[9292998],"developers'":[9292998],"being":[9292998,9291689,9292915,9292978,9293032,9293408,9293566,9293536],"themselv":[9292998],"incredibly":[9292998,9291437,9292710,9292275],"frustrated":[9292998],"ego":[9292998],"propert":[9292998],"frustrating":[9292998],"certain":[9292998,9292734],"mindset":[9292998],"suppos":[9292998],"anyon":[9292998,9291396,9292167,9292579],"unwilling":[9292998],"sacrific":[9292998],"happi":[9292998,9294509],"altar":[9292998],"corporation'":[9292998],"dubi":[9292998],"wheth":[9292998,9292579,9293306],"affect":[9292998],"recruit":[9292998,9293306],"retention":[9292998],"mediocr":[9292998],"turnov":[9292998,9292915],"therenota":[9292472],"ben":[9292472],"cre":[9292472,9293374,9291645,9293552,9293652,9294509],"hey":[9292472],"thank":[9292472],"fair":[9293297,9293342],"guess":[9293297,9292899,9292056,9292195],"sorry":[9293297,9292579,9293652,9293866],"rasmu":[9293297],"awesom":[9293297,9291437,9294318,9292710],"trop":[9291951],"frequently":[9291951,9292635],"weaponized":[9291951],"shut":[9291951,9293508],"people'":[9291951],"voic":[9291951],"realized":[9291951,9292249],"blogpost":[9291951],"consumerist":[9291951],"algorithm":[9291951,9293276,9293508],"comput":[9291951],"paradigm":[9291951],"express":[9291951,9292123,9293536],"hypersimplified":[9291951],"plan":[9291951,9291492],"evalu":[9291951,9291492,9292203],"tradeoff":[9291951,9293276],"amok":[9291951],"architectur":[9291951,9291437,9291716,9293235,9293971,9293536,9293306],"n^2":[9291951],"network":[9291951,9293394],"transfered":[9291951,9292279],"rdbm":[9291951,9293572,9292279],"row":[9291951,9292279],"dragged":[9291951],"knew":[9291951,9293572,9294026,9293671,9294309],"sprint":[9291951],"micro":[9291951],"fundamentally":[9291951,9293276,9293408,9294509],"weekend":[9291951],"reimplementing":[9291951],"scary":[9291951,9293276],"dammit":[9291951],"embracing":[9291951],"boredom":[9291951],"damaged":[9291951],"brain":[9291951],"mending":[9291951],"succeeded":[9291951],"embrac":[9291951],"demonstrating":[9293572],"would'v":[9293572],"recognised":[9293572],"design":[9292279,9292734,9293276,9293866,9292710],"easily":[9292279,9293080,9293235],"mistak":[9292279],"latest":[9292279,9291645,9293037],"greatest":[9292279],"nuanced":[9292734],"afford":[9292734],"expos":[9292734],"misbehavior":[9292734],"du":[9292734],"par":[9293276],"terminology":[9293276],"abrog":[9293276],"responsibility":[9293276],"cargo":[9293276,9291437],"cult":[9293276],"intention":[9293276],"cogniz":[9293276],"opted":[9293276],"discussion":[9293276],"ultimately":[9293276],"opt":[9293276],"discussing":[9293276],"complexity":[9293276,9293508],"speak":[9293276],"sophist":[9293276],"maturity":[9293276],"institution":[9293276],"sev":[9294026,9293982,9291508],"15":[9294026],"tot":[9294026,9293306],"transaction":[9294026],"workload":[9294026],"pre":[9294026,9294509,9291508],"rel":[9294026,9293566,9293306],"qu":[9294026,9293306],"query":[9294026,9292249],"result":[9294026,9293536],"1500":[9294026],"byt":[9294026,9294070,9293508],"tried":[9294026,9293235],"piec":[9294026,9291492,9293037,9292275],"dollar":[9294026],"hot":[9294026,9293037],"unix":[9294026],"hardwar":[9294026],"volum":[9294026,9293306],"grossly":[9294026],"utilized":[9294026],"ask":[9294026,9293671],"messag":[9294026,9291716],"queue":[9294026,9291716],"licens":[9294026],"support":[9294026,9291492,9293408,9293468,9293552,9292457,9293306],"contract":[9294026],"essentially":[9294026],"idle":[9294026],"moving":[9294026,9292654],"window":[9294026,9293394],"microfocu":[9294026],"tied":[9294026],"conceptually":[9294026],"path":[9294026,9291437,9291508,9292023],"wrap":[9294026],"green":[9294026],"ui":[9294026],"greenscreen":[9294026],"muscl":[9294026],"memory":[9294026,9293508],"complained":[9294026],"stuck":[9294026,9292899],"revers":[9294026],"25+":[9294026],"documented":[9294026],"busy":[9294026],"emergency":[9294026],"retir":[9294026],"cheapest":[9294026],"painfully":[9294026],"vari":[9294026,9291437],"shor":[9294026,9294509],"remaining":[9294026],"died":[9294026],"retired":[9294026],"cleaned":[9294026],"story":[9294026],"fac":[9294026,9293032,9293408,9292123,9293566],"anci":[9294026],"largely":[9294026,9292123],"priced":[9294026],"outcom":[9294026],"stayed":[9294026],"sourced":[9294026],"workforc":[9294026],"felt":[9294026,9293468],"happy":[9294026],"strong":[9294026],"position":[9294026],"paying":[9294026],"farm":[9294026],"z/o":[9294026],"oracl":[9294026],"supposed":[9294026],"arr":[9294026],"racked":[9294026],"ready":[9294026],"talked":[9294026],"automat":[9294026],"transl":[9294026],"literally":[9294507],"'innovation'":[9291492],"coupl":[9291492],"weak":[9291492],"fully":[9291492],"surfacing":[9291492],"disappearing/becoming":[9291492],"unsupported":[9291492],"valid":[9291492],"factor":[9291492],"myself":[9291492,9293671,9292579,9293235,9293536],"wary":[9291492],"funda":[9291492],"underpinning":[9291492],"cautiously":[9291492],"superiority":[9291492],"overwhelmingly":[9291492],"willing":[9291492,9293671,9293235,9293342],"replac":[9291492,9291508],"awry":[9291492],"totality":[9291492],"prior":[9291492],"testing":[9293374,9293468,9293508],"frameworks/qa":[9293374],"setup":[9293374,9293925,9291716],"marginally":[9293374],"faster/bett":[9293374],"inst":[9293374],"faceted":[9293374],"searching":[9293374],"solr":[9293374,9293872],"fitting":[9293374],"bringing":[9293374],"knock":[9291689],"'the":[9291689],"job'":[9291689],"scrap":[9291689],"auto":[9291689],"refresh":[9291689],"tag":[9291689],"step":[9291689],"latency":[9291689,9293306],"could'v":[9291689],"turned":[9291689],"aha":[9293442],"toothpast":[9293442],"tub":[9293442],"shift":[9293442,9294509],"surpris":[9293442],"causality":[9293442],"temporarily":[9291396],"unavail":[9291396],"mirror":[9291396],"irony":[9291719],"killing":[9291719],"here'":[9291719,9293552],"pdf":[9291719],"snark":[9294399],"wouldn't":[9294399,9293032,9293408],"+1":[9294399],"forced":[9294484,9293925],"xamarin":[9294484],"suited":[9294484,9293866],"somehow":[9294484],"sav":[9294484,9293235],"spin":[9291437],"following":[9291437,9292635],"honestly":[9291437],"excus":[9291437,9292154,9292579,9293235],"pinning":[9291437],"'unknown":[9291437],"unknown'":[9291437],"invariably":[9291437],"crop":[9291437],"this'l":[9291437],"sup":[9291437],"html":[9291437,9292978,9293508],"ugh":[9291437,9292952],"json":[9291437,9292952,9292978,9293080,9292123],"consum":[9291437],"output":[9291437],"n":[9291437,9292654,9292123,9293566],"mobil":[9291437,9291645],"c":[9291437,9294070,9293566],"io":[9291437],"waffling":[9291437],"'wel":[9291437],"whiz":[9291437],"bang":[9291437],"simplest":[9291437],"miserably":[9291437],"watched":[9291437],"funded":[9291437],"delivering":[9291437,9292440,9292579],"convinc":[9291437,9293208],"buzzword":[9291437],"laden":[9291437],"'right'":[9291437],"deliv":[9291437],"culting":[9291437],"geared":[9293671],"against":[9293671],"normalized":[9293671],"sql":[9293671,9292249],"schema":[9293671,9294012,9294309],"analyt":[9293671],"badly":[9293671],"reinv":[9293671,9293468],"established":[9293671],"learnt":[9293671],"star":[9293671,9294012,9294309],"ended":[9293671],"shap":[9293671],"releas":[9293671,9294509],"shortened":[9293671],"btw":[9293671],"precisely":[9293671],"warehousing":[9293671],"becoming":[9293671],"profici":[9293671],"selected":[9293671],"fwiw":[9294012],"approach":[9294012,9292203,9292275],"tradition":[9294012],"norm":[9294012],"unten":[9294012],"whom":[9294012,9293552,9293925],"put":[9294012,9293479,9293306],"researched":[9294012],"“exotic”":[9294012],"unfamiliar":[9294012],"early":[9294012,9293866],"guarant":[9294012],"landed":[9294012],"eehhh":[9294309],"cursory":[9294309],"knowledg":[9294309,9292056,9293306],"caused":[9294309],"op":[9294309,9292457],"conserv":[9294309],"we'v":[9294309,9294318],"ourselv":[9294309],"timefram":[9292167],"besid":[9292167],"anyone'":[9292366],"interest":[9292366],"except":[9292366,9292579,9292123],"your":[9292366],"wanting":[9292366],"boss":[9292366,9292440,9292635,9293536],"lov":[9292366,9293925,9291716],"prospect":[9292366],"unlikely":[9292440],"kindly":[9292440,9292635],"interested":[9292440],"decided":[9292440],"1mm":[9292440],"fixing":[9292440,9292579],"asked":[9292440],"explicit":[9292635,9292720,9293566],"upfront":[9292635,9292720,9292915],"1k":[9292635],"sid":[9292635,9293080,9294509],"resourc":[9292635],"allowing":[9292635],"woot":[9293868],"minion":[9293868],"unbounded":[9292720],"unguess":[9292720],"item":[9292720],"schedul":[9292720,9292915,9292579],"spec":[9292899],"conventionally":[9292899],"pad":[9292899],"unconvention":[9292899],"fashioned":[9292899],"win":[9292899],"parallel":[9292899],"wal":[9292899,9292978],"clock":[9292899,9292915,9293208,9292978],"delay":[9292899],"imposed":[9292899],"waiting":[9292899],"til":[9292899],"unblocked":[9292899],"adjust":[9292915],"required":[9292915,9293925,9293306],"tight":[9292915],"ensur":[9292915],"baked":[9292915],"combin":[9292915,9291716],"unmotivated":[9292915],"secret":[9292915,9293208,9293306],"caus":[9292915],"companyy":[9293208],"possibly":[9293208],"consciously":[9293208],"const":[9293208],"remind":[9293208],"pitfal":[9293208],"curv":[9293208,9292654],"upsid":[9293208],"undervalu":[9293208],"downsid":[9293208],"cring":[9291645],"worthy":[9291645],"basically":[9291645,9292123,9293566],"hacking":[9291645],"instagram":[9291645],"fee":[9291645],"be":[9291645],"friend":[9291645],"min":[9291645],"enjoying":[9291645],"fin":[9291645,9293925],"techn":[9291645,9291738,9293317,9293306],"cared":[9291645],"front":[9292952,9293394,9292978,9292249,9291508],"today":[9292952,9293394,9292123],"100":[9292952,9292978,9294509],"simplif":[9292952,9292978],"absolutely":[9293394,9292579,9293408,9293652,9293866,9294509,9291716,9293508,9293306],"rememb":[9293394],"mac":[9293394],"linux":[9293394],"enabled":[9293394],"bunch":[9293394],"corba":[9293394],"dcom":[9293394],"rmi":[9293394],"marsh":[9293394],"binary":[9293394],"protocol":[9293394,9293566],"entrenched":[9293394],"enterpris":[9293394],"smartass":[9292978],"presum":[9292978],"backbon":[9292978],"emb":[9292978],"react":[9292978,9292123,9292195],"knockout":[9292978],"batman":[9292978],"angular":[9292978,9292123,9292195],"whichev":[9292978],"j":[9292978,9293080,9292123],"pag":[9292978],"appeared":[9292978],"30":[9292978],"second":[9292978,9293982,9292710],"emit":[9292978],"consumed":[9292978],"javascript":[9292978,9292023,9292143,9293536],"defin":[9292978],"requiring":[9292978],"showing":[9292978],"mvc":[9293080,9293479,9293536],"cor":[9293080,9293536],"rendering":[9293080],"datastor":[9293080],"'what":[9293080],"know'":[9293080],"flexibility":[9293080],"restricting":[9292203],"like/dislik":[9292203],"clouded":[9292203],"arbitrary":[9292203],"int":[9292203],"dink":[9292497],"vagu":[9292579],"initially":[9292579],"should'v":[9292579],"answered":[9292579],"elsewher":[9292579,9293037],"referring":[9292579],"behalf":[9292579],"given":[9292579],"opportunity":[9292579,9294509],"adding":[9292579],"identifying":[9292579],"attacking":[9292579],"pressur":[9292579],"presumed":[9292579],"accept":[9292579],"skil":[9292579,9293536],"promis":[9292579],"arbitrarily":[9293032],"defined":[9293032],"popular":[9293032,9292710],"comfort":[9293032],"costly":[9293032,9293408],"let'":[9293408,9293552,9294509],"acqui":[9293408,9294509],"nodej":[9293408,9293552,9294509,9293186],"push":[9293408,9293552,9294509,9293508],"gotcha":[9293408],"relev":[9293408],"domain":[9293408,9293508,9293306],"autom":[9293408,9294509],"getting":[9293408,9293479],"forget":[9293408,9293552],"describing":[9293408],"definitionally":[9293408],"depend":[9293415,9293508],"incr":[9293415],"suffici":[9293415,9293468],"haven't":[9294117],"divers":[9294117],"relying":[9294117,9293235],"e":[9294117],"erlang/cowboy":[9294117],"bottleneck":[9294117],"changing":[9294117],"fal":[9294117],"chunk":[9294117],"modify":[9294117],"reviewed":[9294117],"shipped":[9294117,9291508],"concern":[9294117],"wid":[9294117],"ranging":[9294117],"exacerb":[9294117],"mostly":[9294117],"~10k":[9294117],"amount":[9293468],"friction":[9293468],"f":[9293468],"hel":[9293468,9293552,9293566],"wheel":[9293468,9293552,9293652,9292249],"yike":[9293468],"firing":[9293468],"hugely":[9293468],"avoid":[9293468,9292710],"paas":[9293552,9293982],"foundry":[9293552,9293866,9293925,9293982],"buildpack":[9293552,9293866,9293982],"kept":[9293552],"cool":[9293552,9293652,9293925],"kid":[9293552],"godep":[9293552],"intended":[9293552,9293652],"work™":[9293552,9293652,9293866],"surprisingly":[9293552],"unalik":[9293552],"identically":[9293552],"heroku":[9293552,9293925,9293982],"body":[9293552],"derived":[9293552],"connected":[9293552],"disconnected":[9293552],"r":[9293552,9293652,9293536],"instal":[9293552,9293652],"paa":[9293552,9293652,9293925],"along":[9293552,9293652,9291903],"inventing":[9293552,9293652],"sounding":[9293552,9293652],"paass":[9293652,9293866],"emphasi":[9293652],"added":[9293652],"tailor":[9293652,9293866],"again":[9293652],"owning":[9293652,9293925],"neith":[9293652],"rolled":[9293866],"nothing":[9293866,9291716,9294070,9292023],"2000":[9293866],"publ":[9293866,9293982],"priv":[9293866],"pivot":[9293866,9293982],"amongst":[9293866,9293317],"pe":[9293866],"opensourc":[9293866],"ip":[9293866],"belong":[9293866],"awar":[9293866],"fork":[9293866],"top":[9293866],"modified":[9293866],"works™":[9293866],"forking":[9293925],"nam":[9293925],"draw":[9293925],"grad":[9293925],"black":[9293925],"whit":[9293925],"toolset":[9293925],"suggest":[9293925],"suggesting":[9293925],"500":[9293925],"rang":[9293925,9293982],"vast":[9293925],"majority":[9293925],"globally":[9293925],"phras":[9293925],"called":[9293925],"justwork":[9293925],"pion":[9293982],"extension":[9293982],"heroku'":[9293982],"cf":[9293982,9294318],"weinberg":[9293982],"observed":[9293982],"worst":[9293982,9292710],"promotion":[9293982],"buzz":[9293982],"hn":[9293982],"eyed":[9293982],"bigoted":[9293982],"whenev":[9293982],"lab":[9293982],"agil":[9293982,9291528],"consulting":[9293982],"gigantoglobomegacorp":[9293982],"choking":[9293982],"impossibly":[9293982],"heavyweight":[9293982],"deployment/op":[9293982],"bor":[9293982],"mo":[9294318],"breakdown":[9294318],"we'l":[9294318],"substitut":[9294509],"described":[9294509],"situ":[9294509],"acquiring":[9294509],"invested":[9294509],"acquired":[9294509],"thread":[9294509],"advis":[9294509],"npm":[9294509],"compared":[9294509,9291738],"50/50":[9294509],"split":[9294509],"divid":[9294509],"ful":[9294509],"shock":[9294509],"forwarding":[9294509],"4+":[9294509],"bulk":[9294509],"company'":[9294509],"significantly":[9294509],"convoluted":[9294509],"branching":[9294509],"meeting":[9294509],"ton":[9294509],"delivered":[9294509],"continually":[9294509],"github":[9294509,9293508],"flow":[9294509],"drama":[9294509],"bugs/downtim":[9294509],"cmo":[9294509],"advocated":[9294509],"acquisition":[9294509],"pervad":[9294509],"team'":[9294509],"across":[9294509],"performed":[9294509],"recognized":[9294509],"vision":[9294509],"blueprint":[9294509],"follow":[9294509],"sampl":[9294509],"hardly":[9294509],"conclus":[9294509],"yep":[9293186],"what'":[9293186],"vic":[9293186],"versa":[9293186],"/":[9293186,9292195],"maciej":[9291716,9293235],"cegłowski":[9291716],"describ":[9291716,9292249],"pinboard":[9291716,9293235],"perl":[9291716,9292056,9293342,9292150,9292023,9292123,9293536],"storag":[9291716],"sphinx":[9291716,9293037],"search":[9291716,9293037],"beanstalk":[9291716],"appli":[9291716],"amazon":[9291716],"stor":[9291716],"backup":[9291716],"implement":[9291716,9293235,9293536],"interview":[9293235],"clev":[9293235],"actu":[9293235],"included":[9293235],"seduced":[9293235],"burn":[9293235],"rigging":[9293235],"joy":[9293235],"tinkering":[9293235],"nowaday":[9293235],"fairly":[9293235],"uninteresting":[9293235],"technically":[9293235],"sweet":[9293235],"designing":[9293235],"ste":[9293235],"tempt":[9293235],"vanilla":[9293235,9292123,9293566],"wherev":[9293235],"wank":[9293235,9293971],"dictionary":[9293971],"nosql":[9292249],"reinventing":[9292249],"shin":[9292249],"slightly":[9292249],"keeping":[9292249],"organized":[9292249],"excel":[9292249],"longevity":[9292249],"math":[9292249],"univers":[9292249],"mathematical/log":[9292249],"encoded":[9292249],"elegantly":[9292249],"word":[9291738],"subject":[9291738],"'wannab":[9291738],"entrepreneur":[9291738],"wordpress'":[9291738],"insan":[9291738],"ecommerc":[9291738],"forum":[9291738],"exception":[9291738],"groupon":[9291738],"cached":[9291496],"'boring'":[9293037],"six":[9293037],"thrown":[9293037],"option":[9293037,9292654],"purpos":[9293037],"act":[9293037],"explor":[9291508,9291528],"design/implement":[9291508,9291528],"spac":[9291508,9291528,9292123],"committing":[9291508,9291528],"leveraged":[9291508],"principl":[9291508],"shoot":[9291508,9291903,9292056],"tfa":[9291508,9291903],"focsu":[9291508],"daft":[9291508],"constantly":[9291508],"rolling":[9291508],"lesson":[9291508],"learned":[9291508],"shared":[9291508],"era":[9291508],"web/backend":[9291508],"screamed":[9291508],"horror":[9291508],"assimilated":[9291508],"thu":[9291508],"dodging":[9291508],"shared/encapsulated":[9291508],"recreated":[9291508],"trit":[9291508],"pol":[9291508],"dedicated":[9291508],"occasion":[9291508],"ongoing":[9291508,9294070],"cycling":[9291508],"evaluating/understanding":[9291508],"researching":[9291508],"art":[9291508],"{process":[9291508],"}":[9291508],"related":[9291508],"wasteland":[9291520],"inbetween":[9291520],"paththi":[9291528],"god":[9291528],"corp":[9291528],"anyway":[9291528],"miss":[9291903],"feet":[9291903],"shot":[9291903],"smoking":[9291903],"hol":[9291903],"discov":[9291903],"cgi":[9292056,9293342,9294337],"wrot":[9292056],"cgi2":[9292056],"python3":[9292056],"bet":[9293342,9292195],"shooting":[9293342],"haskel":[9294337,9292654,9292123,9292195],"concurrency":[9292654,9293306],"principally":[9292654],"tcl":[9292457,9294070],"wav":[9292457],"taught":[9292457],"jit":[9292457],"aot":[9292457],"toolchain":[9292457],"scripting":[9292457],"pypy":[9292909,9293604],"matur":[9293604],"suff":[9293604],"deficienc":[9293604],"community":[9293604,9293566],"rubiniu":[9293604],"compiled":[9294070],"target":[9294070,9292195],"llvm":[9294070],"punting":[9294070],"coding":[9294070],"orchestrating":[9294070],"“you":[9292765],"”":[9292765],"warren":[9292765],"buffett":[9292765],"“but":[9292765],"people’":[9292765],"'legacy'":[9292710],"vary":[9292710],"10+":[9292710],"rough":[9292710],"bak":[9292710],"‘bulb’":[9292710],"spok":[9292710],"respons":[9292710],"hated":[9292710],"closest":[9292710],"diagnos":[9292710],"sensor":[9292710],"familiarity":[9292710],"beat":[9292710],"determin":[9292023],"resist":[9292023],"overwhelmed":[9292023],"interfac":[9292023,9293566],"superseded":[9292023],"pro":[9292023],"backend":[9292023,9293536],"django":[9292023,9292123,9292195,9293536,9292275],"2002":[9292123],"2007":[9292123],"interchang":[9292123],"jquery":[9292123],"2012":[9292123],"deploying":[9292123],"iphone/android":[9292123],"rpc":[9292123],"guic":[9292123],"dagg":[9292123],"dependency":[9292123],"injection":[9292123],"polym":[9292123],"rust":[9292123],"erlang/elixir":[9292123],"runtim":[9292123],"rock":[9292123],"mainstream":[9292123,9293508],"hack":[9292123],"battl":[9293317,9293508],"hardened":[9293317,9293508],"conservatively":[9293317,9293508],"evolving":[9293317,9293508],"dating":[9293317],"1986":[9293317],"selling":[9293317],"bloody":[9293479],"ecosystem":[9293479],"uniquely":[9293479],"grew":[9293508],"telecom":[9293508],"chat":[9293508],"whatsapp":[9293508],"messaging":[9293508],"string":[9293508,9293566],"list":[9293508,9293566],"blow":[9293508,9293566],"seri":[9293508,9293566],"parsing":[9293508],"protobuf":[9293508],"avail":[9293508],"apple":[9293508],"notifications/googl":[9293508],"guy'":[9293508],"gotten":[9293508],"widespread":[9293508],"stackoverflow":[9293508],"unicod":[9293566],"integ":[9293566],"manipul":[9293566],"passing":[9293566],"binar":[9293566],"nowher":[9293566],"near":[9293566],"nul":[9293566],"terminated":[9293566],"charact":[9293566],"array":[9293566],"nonetheless":[9293566],"buff":[9293566],"format":[9293566],"bert":[9293566],"abandoned":[9293566],"sprawl":[9293566],"bear":[9293566],"deducing":[9293566],"program'":[9293566],"sourc":[9293566],"program":[9293566],"virtu":[9293566],"otp":[9293566],"primit":[9293566],"efficiently":[9293566],"confid":[9293566],"random":[9293566],"binding":[9293566],"rol":[9293566],"heroku/postgres/python/django/jquery":[9292143],"python/django":[9292143,9292275],"ruby/rail":[9292143],"employ":[9292143,9292195],"outdated":[9292195],"arcan":[9292195],"respectively":[9292195,9293536],"seek":[9292195],"frontend":[9292195],"abov":[9293536],"adapt":[9293536],"vouch":[9293536],"padrino":[9293536],"introduction":[9293536],"regarded":[9293536],"friendly":[9293536,9292275],"catalyst":[9293536],"mojolici":[9293536],"chicago":[9293536],"phoenix":[9293536],"sugar":[9293536],"folk":[9293536],"distast":[9293536],"polyglot":[9293536],"appreci":[9293536],"focusing":[9293536],"thorough":[9293536],"understanding":[9293536],"thereof":[9293536],"beginn":[9292275],"mainly":[9292275],"watch":[9292275],"lectur":[9292275],"examining":[9293306],"conjunction":[9293306],"access":[9293306],"projected":[9293306],"read/writ":[9293306],"throughput":[9293306],"characterist":[9293306],"highly":[9293306],"figuring":[9293306],"they'l":[9293306],"lif":[9293306],"rich":[9293306],"begin":[9293306],"inevitably":[9293306],"ground":[9293306],"growing":[9293306],"nightmar":[9293306],"passag":[9293306],"led":[9293306],"sel":[9293306],"investor":[9293306],"flight":[9293306],"rocket":[9293306],"surgery":[9293306],"explod":[9293306],"increasing":[9293306],"ineffici":[9293306],"greatly":[9293306],"vc":[9293306],"founding":[9293306],"massively":[9293306],"diluted":[9293306],"consequ":[9293306],"experiencing":[9293306],"conspiracy":[9293306],"financi":[9293306],"incent":[9293306],"consultancy":[9293306],"tldr":[9293306],"supposition":[9293306]},"TotalComments":163}