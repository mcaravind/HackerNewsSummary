{"id":9248174,"created_at":"2015-03-22T20:52:22Z","author":"ics","title":"ImplicitCAD: Powerful, Open-Source, Programmatic CAD","url":"http://www.implicitcad.org/","text":"","points":60,"children":[{"id":9248598,"key":9248598,"title":"<p>best opensource CAD application is FreeCAD: <a href=\"http://www.freecadweb.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.freecadweb.org&#x2F;</a></p><p>It is not very easy to learn but has many features of commercial applications including scripting via python.</p>","created_at":"2015-03-22T22:49:58Z","author":"doczoidberg","text":"<p>best opensource CAD application is FreeCAD: <a href=\"http://www.freecadweb.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.freecadweb.org&#x2F;</a></p><p>It is not very easy to learn but has many features of commercial applications including scripting via python.</p>","parent_id":9248174,"points":0,"children":[{"id":9248640,"key":9248640,"title":"<p>Working with FreeCAD means maintaining OpenCASCADE, here&#x27;s my notes (hopefully this will help you get a sense for what you&#x27;re signing up for): <a href=\"http://diyhpl.us/wiki/cad/opencascade/\" rel=\"nofollow\">http:&#x2F;&#x2F;diyhpl.us&#x2F;wiki&#x2F;cad&#x2F;opencascade&#x2F;</a></p><p>I think that OpenCASCADE is very difficult to maintain. At least half the variable names are &quot;aMPBLPB&quot; and &quot;aMPBLI&quot;, the other half are some strange combination of Russian, English and French. I think that to insulate yourself from the actual CAD engine it would be a good idea to use cadquery, a python library that is aiming to let you switch out the actual CAD implementation without (dramatically) rewriting your source code.</p><p>At the moment, I think the two biggest players in the CAD kernel landscape are verbnurbs ( <a href=\"http://verbnurbs.com/\" rel=\"nofollow\">http:&#x2F;&#x2F;verbnurbs.com&#x2F;</a> ) and solvespace ( <a href=\"http://solvespace.com\" rel=\"nofollow\">http:&#x2F;&#x2F;solvespace.com</a> ) (which includes parametric modeling and constraint solving, btw). Both are very well written, well documented, and well tested. BRLCAD also has surface-surface intersection for NURBS, although I don&#x27;t remember all the caveats....</p>","created_at":"2015-03-22T23:07:47Z","author":"kanzure","text":"<p>Working with FreeCAD means maintaining OpenCASCADE, here&#x27;s my notes (hopefully this will help you get a sense for what you&#x27;re signing up for): <a href=\"http://diyhpl.us/wiki/cad/opencascade/\" rel=\"nofollow\">http:&#x2F;&#x2F;diyhpl.us&#x2F;wiki&#x2F;cad&#x2F;opencascade&#x2F;</a></p><p>I think that OpenCASCADE is very difficult to maintain. At least half the variable names are &quot;aMPBLPB&quot; and &quot;aMPBLI&quot;, the other half are some strange combination of Russian, English and French. I think that to insulate yourself from the actual CAD engine it would be a good idea to use cadquery, a python library that is aiming to let you switch out the actual CAD implementation without (dramatically) rewriting your source code.</p><p>At the moment, I think the two biggest players in the CAD kernel landscape are verbnurbs ( <a href=\"http://verbnurbs.com/\" rel=\"nofollow\">http:&#x2F;&#x2F;verbnurbs.com&#x2F;</a> ) and solvespace ( <a href=\"http://solvespace.com\" rel=\"nofollow\">http:&#x2F;&#x2F;solvespace.com</a> ) (which includes parametric modeling and constraint solving, btw). Both are very well written, well documented, and well tested. BRLCAD also has surface-surface intersection for NURBS, although I don&#x27;t remember all the caveats....</p>","parent_id":9248598,"points":0,"children":[{"id":9248829,"key":9248829,"title":"<p>First off, thank you for mentioning Cadquery and Verb. I&#x27;ve never heard of either, and they&#x27;re both interesting. Cadquery in particular looks very promising.</p><p>Solvespace is a genuine joy to use. If making chamfers, path-based operations, and other such features were better supported, I&#x27;d gladly make it my primary CAD package.</p><p>It was released as open source pretty recently. I really hope some more development takes off.</p>","created_at":"2015-03-23T00:27:00Z","author":"Sodel","text":"<p>First off, thank you for mentioning Cadquery and Verb. I&#x27;ve never heard of either, and they&#x27;re both interesting. Cadquery in particular looks very promising.</p><p>Solvespace is a genuine joy to use. If making chamfers, path-based operations, and other such features were better supported, I&#x27;d gladly make it my primary CAD package.</p><p>It was released as open source pretty recently. I really hope some more development takes off.</p>","parent_id":9248640,"points":0,"children":[]}]}]},{"id":9248647,"key":9248647,"title":"<p>Relevant: <a href=\"https://news.ycombinator.com/item?id=8631804\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=8631804</a></p>","created_at":"2015-03-22T23:09:53Z","author":"vic20forever","text":"<p>Relevant: <a href=\"https://news.ycombinator.com/item?id=8631804\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=8631804</a></p>","parent_id":9248174,"points":0,"children":[]},{"id":9248701,"key":9248701,"title":"<p>So I&#x27;ve looked at potentially working with OpenSCAD before, but unfortunately had to go back to something like Autodesk Inventor before really starting. The biggest problem I have with all open source 3D CAD systems are the lack of parametric modeling.</p><p>If you&#x27;re unfamiliar with this, this basically is setting constraints on your geometry. For example, you can say that edge A has the same length as edge B, and it mirrors across plane C, which is 10 cm away from the primary XY plane.</p><p>This is essential to my workflow in 3D modeling and makes most geometry based operations (such as specifying that edge A is 10cm and starts at 3,4) obsolete. It also allows easy assemblies: you can specify the axis of shaft A need to be coincidental with the axis of hole B.</p><p>Plain text based 3D modelling would be awesome as you can use reasonable revision controls and have reasonable merge strategies.. but the lack of parametric modelling, at least for me, is a deal breaker. I&#x27;ve looked into writing a library for parametric modelling in Python, but then I realized that you probably need to be a PhD in geometry to write a correct implementation with reasonable speed....</p>","created_at":"2015-03-22T23:32:58Z","author":"pwnna","text":"<p>So I&#x27;ve looked at potentially working with OpenSCAD before, but unfortunately had to go back to something like Autodesk Inventor before really starting. The biggest problem I have with all open source 3D CAD systems are the lack of parametric modeling.</p><p>If you&#x27;re unfamiliar with this, this basically is setting constraints on your geometry. For example, you can say that edge A has the same length as edge B, and it mirrors across plane C, which is 10 cm away from the primary XY plane.</p><p>This is essential to my workflow in 3D modeling and makes most geometry based operations (such as specifying that edge A is 10cm and starts at 3,4) obsolete. It also allows easy assemblies: you can specify the axis of shaft A need to be coincidental with the axis of hole B.</p><p>Plain text based 3D modelling would be awesome as you can use reasonable revision controls and have reasonable merge strategies.. but the lack of parametric modelling, at least for me, is a deal breaker. I&#x27;ve looked into writing a library for parametric modelling in Python, but then I realized that you probably need to be a PhD in geometry to write a correct implementation with reasonable speed....</p>","parent_id":9248174,"points":0,"children":[{"id":9249305,"key":9249305,"title":"<p>Author of ImplicitCAD here. I completely agree.</p><p>At first, I tried to implement constraints in a Haskell DSL. Unfortunately, constraints usually only partially describe your object. Even a well-constrained object can be flipped and maintain the constraints, in most systems. I coudln&#x27;t find a reasonable way to implement a text-based interface for this. It really needs to be graphical.</p><p>I abandoned ImplicitCAD to write a constraint-based CAD program with my friend Rob Gilson. (I handled constraint solving with gradient descent, which worked surprisingly well, and a dab of grobner bases here and there.) We got some neat stuff working, but eventually got pulled away to other projects.</p><p>I think there&#x27;s a lot of interesting work to be done linking programmatic and graphical CAD. In particular, I think there&#x27;s neat connections between constraint based CAD which is a form of visual logic programming, and functional programming. (Aside: I like Bret Victor&#x27;s talk &quot;Stop Drawing Dead Fish&quot; which is on a kind of related topic.)</p><p>Unfortunately, I&#x27;m too busy with ML research these days to work on this stuff!</p>","created_at":"2015-03-23T03:05:39Z","author":"colah3","text":"<p>Author of ImplicitCAD here. I completely agree.</p><p>At first, I tried to implement constraints in a Haskell DSL. Unfortunately, constraints usually only partially describe your object. Even a well-constrained object can be flipped and maintain the constraints, in most systems. I coudln&#x27;t find a reasonable way to implement a text-based interface for this. It really needs to be graphical.</p><p>I abandoned ImplicitCAD to write a constraint-based CAD program with my friend Rob Gilson. (I handled constraint solving with gradient descent, which worked surprisingly well, and a dab of grobner bases here and there.) We got some neat stuff working, but eventually got pulled away to other projects.</p><p>I think there&#x27;s a lot of interesting work to be done linking programmatic and graphical CAD. In particular, I think there&#x27;s neat connections between constraint based CAD which is a form of visual logic programming, and functional programming. (Aside: I like Bret Victor&#x27;s talk &quot;Stop Drawing Dead Fish&quot; which is on a kind of related topic.)</p><p>Unfortunately, I&#x27;m too busy with ML research these days to work on this stuff!</p>","parent_id":9248701,"points":0,"children":[]},{"id":9248799,"key":9248799,"title":"<p>Same here. I&#x27;m stuck with SolidWorks and thus Windows. My workflow involves running the output of the CAD program through a simulation and using that to optimize the parameters of the CAD model, relying on the various geometry constraints being solved by the CAD program. SolidWorks is great for modeling the devices in a parametrized fashion, but it really isn&#x27;t meant to be scriptable.</p>","created_at":"2015-03-23T00:13:14Z","author":"wtallis","text":"<p>Same here. I&#x27;m stuck with SolidWorks and thus Windows. My workflow involves running the output of the CAD program through a simulation and using that to optimize the parameters of the CAD model, relying on the various geometry constraints being solved by the CAD program. SolidWorks is great for modeling the devices in a parametrized fashion, but it really isn&#x27;t meant to be scriptable.</p>","parent_id":9248701,"points":0,"children":[]},{"id":9248808,"key":9248808,"title":"<p>BRLCAD is working on a constraint solver: <a href=\"http://brlcad.org/wiki/Geometric_Constraint_Solver\" rel=\"nofollow\">http:&#x2F;&#x2F;brlcad.org&#x2F;wiki&#x2F;Geometric_Constraint_Solver</a></p>","created_at":"2015-03-23T00:17:46Z","author":"jakeogh","text":"<p>BRLCAD is working on a constraint solver: <a href=\"http://brlcad.org/wiki/Geometric_Constraint_Solver\" rel=\"nofollow\">http:&#x2F;&#x2F;brlcad.org&#x2F;wiki&#x2F;Geometric_Constraint_Solver</a></p>","parent_id":9248701,"points":0,"children":[]},{"id":9248832,"key":9248832,"title":"<p>I&#x27;ve been doing some work on this -- not a full-on parametric solver, but setting a directed acyclic graph of relationships then evaluating the graph to produce a set of solid models.</p><p>The tool is being beta-tested in fab academy [1] this semester; shoot me an email (in my profile) if you&#x27;re interested in learning more.</p><p>[1] <a href=\"http://www.fabacademy.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.fabacademy.org&#x2F;</a></p>","created_at":"2015-03-23T00:27:40Z","author":"mkeeter","text":"<p>I&#x27;ve been doing some work on this -- not a full-on parametric solver, but setting a directed acyclic graph of relationships then evaluating the graph to produce a set of solid models.</p><p>The tool is being beta-tested in fab academy [1] this semester; shoot me an email (in my profile) if you&#x27;re interested in learning more.</p><p>[1] <a href=\"http://www.fabacademy.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;www.fabacademy.org&#x2F;</a></p>","parent_id":9248701,"points":0,"children":[]},{"id":9248734,"key":9248734,"title":"<p>&gt; I&#x27;ve looked into writing a library for parametric modelling in Python, but then I realized that you probably need to be a PhD in geometry to write a correct implementation with reasonable speed....</p><p>Well, here&#x27;s a video of sympy + OpenCASCADE for parametric modeling: <a href=\"https://www.youtube.com/watch?v=ZUCv7COgzU0&amp;t=25s\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ZUCv7COgzU0&amp;t=25s</a> but see also my other comment for my thoughts regarding OpenCASCADE..</p>","created_at":"2015-03-22T23:43:59Z","author":"kanzure","text":"<p>&gt; I&#x27;ve looked into writing a library for parametric modelling in Python, but then I realized that you probably need to be a PhD in geometry to write a correct implementation with reasonable speed....</p><p>Well, here&#x27;s a video of sympy + OpenCASCADE for parametric modeling: <a href=\"https://www.youtube.com/watch?v=ZUCv7COgzU0&amp;t=25s\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ZUCv7COgzU0&amp;t=25s</a> but see also my other comment for my thoughts regarding OpenCASCADE..</p>","parent_id":9248701,"points":0,"children":[]},{"id":9248745,"key":9248745,"title":"<p>&gt; The biggest problem I have with all open source 3D CAD systems are the lack of parametric modeling.</p><p>I remember doing that in FreeCAD. Maybe I didn&#x27;t get all the intrincacies and you mean something bigger than what I tried, but there was definitely a constraint system.</p><p>EDIT: Found a video <a href=\"https://www.youtube.com/watch?v=qY_GGTa9-mU\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=qY_GGTa9-mU</a> Is this what you mean?</p>","created_at":"2015-03-22T23:48:28Z","author":"kaoD","text":"<p>&gt; The biggest problem I have with all open source 3D CAD systems are the lack of parametric modeling.</p><p>I remember doing that in FreeCAD. Maybe I didn&#x27;t get all the intrincacies and you mean something bigger than what I tried, but there was definitely a constraint system.</p><p>EDIT: Found a video <a href=\"https://www.youtube.com/watch?v=qY_GGTa9-mU\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=qY_GGTa9-mU</a> Is this what you mean?</p>","parent_id":9248701,"points":0,"children":[{"id":9248748,"key":9248748,"title":"<p>AFAIK FreeCAD has a 2D constraint system. I need a 3D one to really work efficiently.</p>","created_at":"2015-03-22T23:49:34Z","author":"pwnna","text":"<p>AFAIK FreeCAD has a 2D constraint system. I need a 3D one to really work efficiently.</p>","parent_id":9248745,"points":0,"children":[{"id":9248972,"key":9248972,"title":"<p><a href=\"http://www.freecadweb.org/wiki/index.php?title=Basic_Part_Design_Tutorial\" rel=\"nofollow\">http:&#x2F;&#x2F;www.freecadweb.org&#x2F;wiki&#x2F;index.php?title=Basic_Part_De...</a></p><p>The above looks pretty 3d to me.</p>","created_at":"2015-03-23T01:15:49Z","author":"monochr","text":"<p><a href=\"http://www.freecadweb.org/wiki/index.php?title=Basic_Part_Design_Tutorial\" rel=\"nofollow\">http:&#x2F;&#x2F;www.freecadweb.org&#x2F;wiki&#x2F;index.php?title=Basic_Part_De...</a></p><p>The above looks pretty 3d to me.</p>","parent_id":9248748,"points":0,"children":[]}]}]}]},{"id":9248448,"key":9248448,"title":"<p>How does this differ from OpenSCAD? The example looks nearly identical.</p>","created_at":"2015-03-22T22:06:16Z","author":"TD-Linux","text":"<p>How does this differ from OpenSCAD? The example looks nearly identical.</p>","parent_id":9248174,"points":0,"children":[{"id":9248521,"key":9248521,"title":"<p><a href=\"http://www.implicitcad.org/faq#implicitcad-and-openscad\" rel=\"nofollow\">http:&#x2F;&#x2F;www.implicitcad.org&#x2F;faq#implicitcad-and-openscad</a></p>","created_at":"2015-03-22T22:26:52Z","author":"maaku","text":"<p><a href=\"http://www.implicitcad.org/faq#implicitcad-and-openscad\" rel=\"nofollow\">http:&#x2F;&#x2F;www.implicitcad.org&#x2F;faq#implicitcad-and-openscad</a></p>","parent_id":9248448,"points":0,"children":[]},{"id":9248556,"key":9248556,"title":"<p>They&#x27;re using different representations for solid geometry.</p><p>ImplicitCAD is using implicit surfaces &#x2F; functional representations, while OpenSCAD is using a boundary representation (which is a lot more common in commercial packages).</p><p>Implicit surfaces are a very nice representation and make certain operations very easy: booleans become MIN or MAX functions between two functions.  However, it becomes much harder to do feature-based operations -- a task like &quot;bevel that edge&quot; is tricky when the edge is an emergent property of the function, rather than as part of the model&#x27;s explicit representation.</p>","created_at":"2015-03-22T22:37:14Z","author":"mkeeter","text":"<p>They&#x27;re using different representations for solid geometry.</p><p>ImplicitCAD is using implicit surfaces &#x2F; functional representations, while OpenSCAD is using a boundary representation (which is a lot more common in commercial packages).</p><p>Implicit surfaces are a very nice representation and make certain operations very easy: booleans become MIN or MAX functions between two functions.  However, it becomes much harder to do feature-based operations -- a task like &quot;bevel that edge&quot; is tricky when the edge is an emergent property of the function, rather than as part of the model&#x27;s explicit representation.</p>","parent_id":9248448,"points":0,"children":[{"id":9249325,"key":9249325,"title":"<p>Author of ImplicitCAD here!</p><p>I had some neat tricks that made beveling most edges really easy! (Though, when the didn&#x27;t work, it was pretty messy.)</p><p>Please keep in mind that I abandoned this project 2+ years ago, and started it four years ago. Things have come always since then. OpenSCAD was less mature when I started.</p>","created_at":"2015-03-23T03:12:26Z","author":"colah3","text":"<p>Author of ImplicitCAD here!</p><p>I had some neat tricks that made beveling most edges really easy! (Though, when the didn&#x27;t work, it was pretty messy.)</p><p>Please keep in mind that I abandoned this project 2+ years ago, and started it four years ago. Things have come always since then. OpenSCAD was less mature when I started.</p>","parent_id":9248556,"points":0,"children":[]}]},{"id":9248503,"key":9248503,"title":"<p>The example is the same. ImplicitCAD is a prototype project written in Haskell. OpenSCAD is mature, active, and written in C++ and other languages.</p>","created_at":"2015-03-22T22:21:24Z","author":"irickt","text":"<p>The example is the same. ImplicitCAD is a prototype project written in Haskell. OpenSCAD is mature, active, and written in C++ and other languages.</p>","parent_id":9248448,"points":0,"children":[]}]},{"id":9249268,"key":9249268,"title":"<p>Author here. Sorry, I abandoned this two or three years ago. Please look at this in the context of a project done several years ago and never completed. (I do ML research these days -- you can see my blog here: <a href=\"http://colah.github.io/\" rel=\"nofollow\">http:&#x2F;&#x2F;colah.github.io&#x2F;</a>)</p><p>Julia Longtin took up working on ImplicitCAD a few months ago. I&#x27;m not sure how much she&#x27;s progressed with it.</p><p>Honestly, I no longer believe ImplicitCAD was the right approach to the problem, or that there&#x27;s even as much of a problem as I originally thought. In particular, the system ImplicitCAD uses to represent objects, a variant of f-rep (<a href=\"http://en.wikipedia.org/wiki/Function_representation\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Function_representation</a>) has issues. (f-rep is awesome, I just tried to have my cake and eat it too with some trade offs, and thought I was being really clever! :P)</p><p>After ImplicitCAD, I worked with Rob Gilson on a SVG&#x2F;WebGL constraint-based modelling tool, mech.ly. We got some neat stuff working, but never got to a point where we wanted to release things. I&#x27;m pretty persuaded this is the right direction to go.</p><p>I learned a lot from both projects. I also matured a lot intellectually. For example, I now review academic literature before diving into solving hard problems! :)</p>","created_at":"2015-03-23T02:53:09Z","author":"colah3","text":"<p>Author here. Sorry, I abandoned this two or three years ago. Please look at this in the context of a project done several years ago and never completed. (I do ML research these days -- you can see my blog here: <a href=\"http://colah.github.io/\" rel=\"nofollow\">http:&#x2F;&#x2F;colah.github.io&#x2F;</a>)</p><p>Julia Longtin took up working on ImplicitCAD a few months ago. I&#x27;m not sure how much she&#x27;s progressed with it.</p><p>Honestly, I no longer believe ImplicitCAD was the right approach to the problem, or that there&#x27;s even as much of a problem as I originally thought. In particular, the system ImplicitCAD uses to represent objects, a variant of f-rep (<a href=\"http://en.wikipedia.org/wiki/Function_representation\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Function_representation</a>) has issues. (f-rep is awesome, I just tried to have my cake and eat it too with some trade offs, and thought I was being really clever! :P)</p><p>After ImplicitCAD, I worked with Rob Gilson on a SVG&#x2F;WebGL constraint-based modelling tool, mech.ly. We got some neat stuff working, but never got to a point where we wanted to release things. I&#x27;m pretty persuaded this is the right direction to go.</p><p>I learned a lot from both projects. I also matured a lot intellectually. For example, I now review academic literature before diving into solving hard problems! :)</p>","parent_id":9248174,"points":0,"children":[{"id":9249330,"key":9249330,"title":"<p>As the submitter I just want to say thanks for dropping in to comment. As a professional CAD user and hobby Haskell learner, I found the project very interesting and thought it was worth sharing. If you ever feel like sharing I&#x27;d be very interested in reading a post-mortem of your work on ImplicitCAD or any other CAD-related software.</p>","created_at":"2015-03-23T03:15:04Z","author":"ics","text":"<p>As the submitter I just want to say thanks for dropping in to comment. As a professional CAD user and hobby Haskell learner, I found the project very interesting and thought it was worth sharing. If you ever feel like sharing I&#x27;d be very interested in reading a post-mortem of your work on ImplicitCAD or any other CAD-related software.</p>","parent_id":9249268,"points":0,"children":[]}]},{"id":9248761,"key":9248761,"title":"<p>Back in &#x27;91, there was a mini putsch by the TAs of Columbia  GSAPP&#x27;s CAD course. The existing course and supporting software were based on computational geometry and a scripting language to go with it. The new regime brought in Maya, et al. I think I was the only one who lamented and found it a step backwards..</p>","created_at":"2015-03-22T23:53:29Z","author":"eternalban","text":"<p>Back in &#x27;91, there was a mini putsch by the TAs of Columbia  GSAPP&#x27;s CAD course. The existing course and supporting software were based on computational geometry and a scripting language to go with it. The new regime brought in Maya, et al. I think I was the only one who lamented and found it a step backwards..</p>","parent_id":9248174,"points":0,"children":[]}],"WordIDMapping":{"best":[9248598],"opensourc":[9248598],"cad":[9248598,9248640,9248829,9248701,9249305,9248799,9248745,9249330,9248761],"appl":[9248598],"freecad":[9248598,9248640,9248745,9248748],"easy":[9248598,9248701,9248556,9249325],"learn":[9248598,9249330],"many":[9248598],"featur":[9248598,9248829,9248556],"commerci":[9248598,9248556],"including":[9248598],"scripting":[9248598,9248761],"via":[9248598],"python":[9248598,9248640,9248701,9248734],"working":[9248640,9248701,9249305,9248808,9249268],"mean":[9248640,9248745],"maintaining":[9248640],"opencascad":[9248640,9248734],"here'":[9248640,9248734],"not":[9248640],"hopefully":[9248640],"help":[9248640],"sens":[9248640],"you're":[9248640,9248701,9248832],"signing":[9248640],"think":[9248640,9249305,9248761],"difficult":[9248640],"maintain":[9248640,9249305],"least":[9248640,9248701],"half":[9248640],"vari":[9248640,9248799,9249268],"nam":[9248640],"ampblpb":[9248640],"ampbli":[9248640],"oth":[9248640,9248829,9249305,9248734,9248503,9249330],"som":[9248640,9248829,9249305,9248832,9249325,9249268],"strang":[9248640],"combin":[9248640],"russian":[9248640],"english":[9248640],"french":[9248640],"insul":[9248640],"yourself":[9248640],"from":[9248640,9248701,9248448,9249268],"actu":[9248640],"engin":[9248640],"good":[9248640],"idea":[9248640],"use":[9248640,9248829,9248701,9249268],"cadquery":[9248640,9248829],"library":[9248640,9248701,9248734],"aiming":[9248640],"let":[9248640],"switch":[9248640],"out":[9248640],"implement":[9248640,9248701,9248734],"without":[9248640],"dramatically":[9248640],"rewriting":[9248640],"sourc":[9248640,9248829,9248701,9248745],"cod":[9248640],"mo":[9248640],"two":[9248640,9248556,9249268],"biggest":[9248640,9248701,9248745],"play":[9248640],"kernel":[9248640],"landscap":[9248640],"verbnurb":[9248640],"solvespac":[9248640,9248829],"includ":[9248640],"parametr":[9248640,9248701,9248832,9248734,9248745],"modeling":[9248640,9248701,9248799,9248734,9248745],"constraint":[9248640,9248701,9249305,9248799,9248808,9248745,9248748,9249268],"solving":[9248640,9249305,9249268],"btw":[9248640],"both":[9248640,9248829,9249268],"wel":[9248640,9249305,9248734],"written":[9248640,9248503],"documented":[9248640],"tested":[9248640,9248832],"brlcad":[9248640,9248808],"also":[9248640,9248701,9248734,9249268],"surfac":[9248640,9248556],"intersection":[9248640],"nurb":[9248640],"although":[9248640],"don't":[9248640],"rememb":[9248640,9248745],"all":[9248640,9248701,9248745],"caveat":[9248640],"first":[9248829,9249305],"off":[9248829,9249268],"thank":[9248829,9249330],"mentioning":[9248829],"verb":[9248829],"i've":[9248829,9248701,9248832,9248734],"nev":[9248829,9249268],"heard":[9248829],"eith":[9248829],"they'r":[9248829,9248556],"interesting":[9248829,9249305,9249330],"particular":[9248829,9249305,9249268],"look":[9248829,9248972,9248448,9249268],"promising":[9248829],"genuin":[9248829],"joy":[9248829],"making":[9248829],"chamf":[9248829],"path":[9248829],"based":[9248829,9248701,9249305,9248556,9249268,9248761],"oper":[9248829,9248701,9248556],"wer":[9248829,9248761],"bett":[9248829],"supported":[9248829],"i'd":[9248829,9249330],"gladly":[9248829],"mak":[9248829,9248701,9248556],"primary":[9248829,9248701],"packag":[9248829,9248556],"released":[9248829],"open":[9248829,9248701,9248745],"pretty":[9248829,9248972,9249325,9249268],"recently":[9248829],"really":[9248829,9248701,9249305,9248799,9248748,9249325,9249268],"hop":[9248829],"develop":[9248829],"tak":[9248829],"relev":[9248647],"looked":[9248701,9248734],"potentially":[9248701],"openscad":[9248701,9248448,9248556,9249325,9248503],"befor":[9248701,9249268],"unfortunately":[9248701,9249305],"had":[9248701,9249325],"back":[9248701,9248761],"something":[9248701,9248745],"autodesk":[9248701],"inventor":[9248701],"starting":[9248701],"problem":[9248701,9248745,9249268],"system":[9248701,9249305,9248745,9248748,9249268],"lack":[9248701,9248745],"unfamiliar":[9248701],"basically":[9248701],"setting":[9248701,9248832],"geometry":[9248701,9248799,9248734,9248556,9248761],"exampl":[9248701,9248448,9248503,9249268],"can":[9248701,9249305,9249268],"say":[9248701,9249330],"edge":[9248701,9248556,9249325],"sam":[9248701,9248799,9248503],"length":[9248701],"mirror":[9248701],"across":[9248701],"plan":[9248701],"away":[9248701,9249305],"essenti":[9248701],"workflow":[9248701,9248799],"most":[9248701,9249305,9249325],"specifying":[9248701],"10cm":[9248701],"start":[9248701],"obsolet":[9248701],"allow":[9248701],"assembl":[9248701],"specify":[9248701],"axi":[9248701],"shaft":[9248701],"nee":[9248701,9249305,9248734,9248748],"coincid":[9248701],"hol":[9248701],"plain":[9248701],"text":[9248701,9249305],"modelling":[9248701,9248734,9249268],"awesom":[9248701,9249268],"reason":[9248701,9249305,9248734],"revision":[9248701],"control":[9248701],"merg":[9248701],"strateg":[9248701],"de":[9248701],"break":[9248701],"writing":[9248701,9248734],"realized":[9248701,9248734],"probably":[9248701,9248734],"phd":[9248701,9248734],"writ":[9248701,9249305,9248734],"correct":[9248701,9248734],"spee":[9248701,9248734],"author":[9249305,9249325,9249268],"implicitcad":[9249305,9248556,9249325,9248503,9249268,9249330],"her":[9249305,9248799,9249325,9249268],"completely":[9249305],"agree":[9249305],"tried":[9249305,9248745,9249268],"impl":[9249305],"haskel":[9249305,9248503,9249330],"dsl":[9249305],"usually":[9249305],"only":[9249305,9248761],"partially":[9249305],"describ":[9249305],"object":[9249305,9249268],"even":[9249305,9249268],"constrained":[9249305],"flipped":[9249305],"coudln't":[9249305],"find":[9249305],"way":[9249305],"interfac":[9249305],"graph":[9249305,9248832],"abandoned":[9249305,9249325,9249268],"program":[9249305,9248799],"friend":[9249305],"rob":[9249305,9249268],"gilson":[9249305,9249268],"handled":[9249305],"gradi":[9249305],"desc":[9249305],"worked":[9249305,9249268],"surprisingly":[9249305],"dab":[9249305],"grobn":[9249305],"bas":[9249305],"got":[9249305,9249268],"neat":[9249305,9249325,9249268],"stuff":[9249305,9249268],"eventually":[9249305],"pulled":[9249305],"project":[9249305,9249325,9248503,9249268,9249330],"there'":[9249305,9249268],"lot":[9249305,9248556,9249268],"work":[9249305,9248832,9248748,9249325,9249330],"don":[9249305,9249268],"linking":[9249305],"programmat":[9249305],"connection":[9249305],"between":[9249305,9248556],"form":[9249305],"visu":[9249305],"log":[9249305],"programming":[9249305],"function":[9249305,9248556],"asid":[9249305],"bret":[9249305],"victor'":[9249305],"talk":[9249305],"stop":[9249305],"drawing":[9249305],"dead":[9249305],"fish":[9249305],"kind":[9249305],"related":[9249305,9249330],"top":[9249305],"i'm":[9249305,9248799,9249268],"too":[9249305,9249268],"busy":[9249305],"research":[9249305,9249268],"day":[9249305,9249268],"stuck":[9248799],"solidwork":[9248799],"thu":[9248799],"window":[9248799],"involv":[9248799],"running":[9248799],"output":[9248799],"through":[9248799],"simul":[9248799],"using":[9248799,9248556],"optim":[9248799],"paramet":[9248799],"model":[9248799,9248832],"relying":[9248799],"being":[9248799,9248832,9249268],"solved":[9248799],"great":[9248799],"devic":[9248799],"parametrized":[9248799],"fashion":[9248799],"isn't":[9248799],"me":[9248799],"script":[9248799],"solv":[9248808,9248832],"been":[9248832],"doing":[9248832,9248745],"ful":[9248832],"directed":[9248832],"acycl":[9248832],"relationship":[9248832],"evaluating":[9248832],"produc":[9248832],"set":[9248832],"solid":[9248832,9248556],"tool":[9248832,9249268],"beta":[9248832],"fab":[9248832],"academy":[9248832],"semest":[9248832],"shoot":[9248832],"email":[9248832],"profil":[9248832],"interested":[9248832,9249330],"learning":[9248832],"video":[9248734,9248745],"sympy":[9248734],"see":[9248734,9249268],"com":[9248734,9249325,9249330],"thought":[9248734,9249268,9249330],"regarding":[9248734],"mayb":[9248745],"didn't":[9248745,9249325],"intrincac":[9248745],"bigg":[9248745],"than":[9248745,9248556],"definitely":[9248745],"edit":[9248745],"found":[9248745,9249330,9248761],"afaik":[9248748],"one":[9248748,9248761],"efficiently":[9248748],"abov":[9248972],"how":[9248448,9249268],"doe":[9248448],"diff":[9248448],"nearly":[9248448],"id":[9248448],"differ":[9248556],"represent":[9248556],"implicit":[9248556],"whil":[9248556],"boundary":[9248556],"common":[9248556],"nic":[9248556],"certain":[9248556],"boolean":[9248556],"becom":[9248556],"min":[9248556],"max":[9248556],"howev":[9248556],"much":[9248556,9249268],"hard":[9248556,9249268],"task":[9248556],"bevel":[9248556],"tricky":[9248556],"when":[9248556,9249325],"emerg":[9248556],"property":[9248556],"rath":[9248556],"part":[9248556],"model'":[9248556],"explicit":[9248556],"trick":[9249325],"mad":[9249325],"beveling":[9249325],"though":[9249325],"messy":[9249325],"pleas":[9249325,9249268],"keep":[9249325],"mind":[9249325],"year":[9249325,9249268],"ago":[9249325,9249268],"started":[9249325],"four":[9249325],"thing":[9249325,9249268],"alway":[9249325],"sinc":[9249325],"less":[9249325],"matur":[9249325,9248503],"prototyp":[9248503],"act":[9248503],"c++":[9248503],"languag":[9248503,9248761],"sorry":[9249268],"three":[9249268],"context":[9249268],"sev":[9249268],"completed":[9249268],"blog":[9249268],"julia":[9249268],"longtin":[9249268],"took":[9249268],"few":[9249268],"month":[9249268],"sur":[9249268],"she'":[9249268],"progressed":[9249268],"honestly":[9249268],"long":[9249268],"believ":[9249268],"right":[9249268],"approach":[9249268],"originally":[9249268],"repres":[9249268],"rep":[9249268],"issue":[9249268],"just":[9249268,9249330],"cak":[9249268],"eat":[9249268],"trad":[9249268],"clev":[9249268],"aft":[9249268],"svg/webgl":[9249268],"mech":[9249268],"point":[9249268],"wher":[9249268],"wanted":[9249268],"releas":[9249268],"persuaded":[9249268],"direction":[9249268],"learned":[9249268],"matured":[9249268],"intellectually":[9249268],"now":[9249268],"review":[9249268],"academ":[9249268],"literatur":[9249268],"diving":[9249268],"submitt":[9249330],"dropping":[9249330],"profession":[9249330],"us":[9249330],"hobby":[9249330],"worth":[9249330],"sharing":[9249330],"ev":[9249330],"feel":[9249330],"reading":[9249330],"post":[9249330],"mortem":[9249330],"any":[9249330],"softwar":[9249330,9248761],"'91":[9248761],"mini":[9248761],"putsch":[9248761],"ta":[9248761],"columbia":[9248761],"gsapp'":[9248761],"cours":[9248761],"existing":[9248761],"supporting":[9248761],"comput":[9248761],"new":[9248761],"regim":[9248761],"brought":[9248761],"maya":[9248761],"who":[9248761],"lamented":[9248761],"step":[9248761],"backward":[9248761]},"TotalComments":21}