{"id":9214464,"author":"pbowyer","title":"PHP7 Gains Scalar Type Hints","url":"https://wiki.php.net/rfc/scalar_type_hints_v5#vote","text":null,"children":[{"id":9215238,"author":"ZeroCoin","text":"<p>I love PHP.</p><p>I think of it as the English language of programming. Picking and choosing all of the best bits from every other language, and bastardizing them into it&#x27;s own everyday use.</p>","children":[{"id":9215790,"author":"jhall1468","text":"<p>I think the part where you said &quot;best bits&quot; is debatable.</p>","children":[]},{"id":9215854,"author":"draders","text":"<p>I too love PHP!</p>","children":[]},{"id":9215382,"author":"brianpgordon","text":"<p>Have you heard of <a href=\"https://en.wikipedia.org/wiki/Stockholm_syndrome\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stockholm_syndrome</a>?</p>","children":[{"id":9215417,"author":"elros","text":"<p>Have you heard of <a href=\"https://en.wikipedia.org/wiki/Poe&#x27;s_law\" rel=\"nofollow\">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Poe&#x27;s_law</a>?</p>","children":[{"id":9215743,"author":"sigzero","text":"<p>It&#x27;s very clearly not sarcasm.</p>","children":[]}]}]}]},{"id":9215250,"author":"1ris","text":"<p>Can somebody explain this to a non-phper? So PHP got strict types, but only for Scalars (Ints and floats) and they can be enabled on a per-file basis. Right?</p>","children":[{"id":9215284,"author":"TazeTSchnitzel","text":"<p>PHP has had type hints for classes for more than a decade now:</p><p><pre><code>  function foobar(MyClass $foo) {\n     &#x2F;&#x2F; do stuff\n  }\n  foobar(new NotMyClass()); &#x2F;&#x2F; throws an error\n</code></pre>\nThis just adds type hints for the scalar types (integer, float, string and boolean).</p><p>Since PHP has a long tradition of weak typing and this is what PHP&#x27;s built-in and extension functions use, weak is the default behaviour, allowing some conversions:</p><p><pre><code>  function foo(int $x) {\n     var_dump($x);\n  }\n  foo(&quot;12&quot;); &#x2F;&#x2F; produces int(12)\n  foo(null); &#x2F;&#x2F; throws an error\n</code></pre>\nBut, you can optionally turn on a strict type-checking mode for scalars on a per-file basis, which doesn&#x27;t allow conversions:</p><p><pre><code>  &lt;?php\n  declare(strict_types=1);\n\n  function foo(int $x) {\n     var_dump($x);\n  }\n  foo(&quot;12&quot;); &#x2F;&#x2F; throws an error\n  foo(null); &#x2F;&#x2F; throws an error</code></pre></p>","children":[]},{"id":9215313,"author":null,"text":null,"children":[]},{"id":9215741,"author":"Danack","text":"<p>PHP has had type-hints for parameters for several version, but they could only be used for classes. The new types-hints cover the &#x27;scalar&#x27; values (aka not object) and are int, float, string and bool. They  allow a function to declare what they types of the variables it receives should be like:</p><p>function foo(int $x) {\n    &#x2F;&#x2F; x is guaranteed to be an int.\n}</p><p>The type-hinting for scalars has two modes:</p><p>* strict - the parameter passed to the function must be of the exact* type.\n* weak - the parameter passed to the function will be converted to the correct type.</p><p>The strictness depends on what mode PHP was in when the function was called. This is the right choice as it:</p><p>* Allows library authors to write their code in either strict or weak mode.</p><p>* End-users to write their code in either strict or weak mode. Or even without using scalar type-hints.</p><p>* End-user to be able to choose when they are writing their code do they want their variables to be converted to the type expected by the library automatically, or do they want PHP to give them an error if they accidentally pass the wrong type of variable to a function that is expecting an int.</p><p>*except for some widening rules, e.g. you can pass an int where a float is expected, as ints can be converted into float without data loss (for ints less than 2^53).</p>","children":[]}]},{"id":9215512,"author":"pbiggar","text":"<p>That&#x27;s right, the PHP community _votes_ on language features.</p>","children":[{"id":9215534,"author":"TazeTSchnitzel","text":"<p>Though there is a lot of controversy about who is allowed to vote. Currently it&#x27;s anyone with a php.net account, which is:</p><p>* People who have commit access to git&#x2F;svn</p><p>* Documentation contributors</p><p>* Documentation translators</p><p>* PEAR package maintainers</p><p>* PECL package maintainers</p><p>* <i>Very</i> few &quot;community representatives&quot;</p>","children":[{"id":9215646,"author":"pbiggar","text":"<p>Agreed. I think I still have a vote, and I haven&#x27;t been involved in PHP for about 6 years.</p>","children":[]}]},{"id":9215831,"author":"wvenable","text":"<p>Since PHP has switched to community voting, the language has expanded smartly by leaps and bounds while maintaining a great degree of compatibility.</p>","children":[]}]},{"id":9215275,"author":"awalGarg","text":"<p>Yay! &lt;3 PHP.</p><p>Also, the moment I read <i>declare(strict_types...</i>, for some reason <i>&quot;use strict&quot;;</i> from ECMAScript flashed in front of me :D</p>","children":[{"id":9215735,"author":"some_furry","text":"<p>Same idea, except `use \\Foo\\Bar\\Baz as SomeAlias` is already reserved for namespaces.</p>","children":[{"id":9215788,"author":"TazeTSchnitzel","text":"<p>Also, we already have use strict; as an easter egg ;)</p>","children":[{"id":9215852,"author":"scintill76","text":"<p>Exactly how do you trigger the easter egg, and what does it do?</p>","children":[]}]},{"id":9215832,"author":"scintill76","text":"<p></p><p><pre><code>    &quot;use strict&quot;;\n</code></pre>\n(note &#x27;use&#x27; is part of a string) should work in PHP for the same reason it does in ECMAScript -- it is a no-op at the language level (creating a string literal and doing nothing with it), that is unlikely to appear in old code, and can be given new meaning in the next-level language spec.</p>","children":[]}]}]},{"id":9215032,"author":"arenaninja","text":"<p>Hooray! \\o&#x2F;</p><p>I haven&#x27;t had a use for this yet, but I&#x27;m always amazed by how PHP manages to move forward without breaking BC.</p>","children":[{"id":9215169,"author":"AlexMax","text":"<p>&gt; I haven&#x27;t had a use for this yet, but I&#x27;m always amazed by how PHP manages to move forward without breaking BC.</p><p>This.  If I were a Python developer (of the language itself), I would be paying very close attention to how PHP has handled deprecation and breaking changes.</p>","children":[{"id":9215173,"author":"TazeTSchnitzel","text":"<p>There&#x27;s been an effort with PHP 7 to try and avoid a Python 2&#x2F;3-style situation. The PHP 5 to 7 jump should be much smaller than from 4 to 5.</p>","children":[{"id":9215680,"author":"Danack","text":"<p>&gt;The PHP 5 to 7 jump should be much smaller than from 4 to 5.</p><p>And also the jump from 5.4+ to 7 is probably smaller than the jump from 5.2 to 5.3.</p><p>Although I think the PHP project does need to support versions for longer, the adoption rate of 7 is going to be quite rapid due to the low barrier of doing it, and the massive performance and language gains.</p>","children":[]}]}]}]},{"id":9215311,"author":"eduard44","text":"<p>Good. Now I just need to wait for PHPStorm to support them ;)</p>","children":[{"id":9215464,"author":"TazeTSchnitzel","text":"<p>Submit a feature request! ;)</p>","children":[]}]},{"id":9215312,"author":"spion","text":"<p>I can&#x27;t find it anywhere in the document - are these statically checked types or just run time checks (contracts)?</p>","children":[{"id":9215433,"author":"TazeTSchnitzel","text":"<p>Runtime (like PHP&#x27;s existing type hints), but they could be checked statically by IDEs and such. One benefit of strict mode is that it enables much better static checking than weak mode, because validity is determined by type and never value.</p>","children":[]}]},{"id":9214585,"author":"Danack","text":"<p>To explain the slightly horrible fact that there are two modes, strict and weak with strict mode being enabled on a per file basis; people just couldn&#x27;t agree on whether the types should be strict or if they should use PHP&#x27;s existing coercion rules. (Or even a 3rd new set of conversion rules, but lets ignore them).</p><p>Having an optional mode per file allows:</p><p>People who want to write code with strict types can do so.\nPeople who want to write code with weak types can do so.\nPeople who want to write code without these new fangled types can continue to do so.</p><p>All without any issues of compatibility between running code on the current version of PHP and what will be the next one, and without any compatibility issues for libraries that are solely written in one mode, being used in applications that are written in the other mode.</p><p>\\o&#x2F;</p><p>To be honest, I&#x27;m completely in the strict camp - but it&#x27;s awesome that we&#x27;ve gotten a solution that should allow everyone to use the mode they want, without splitting the PHP ecosystem.</p>","children":[{"id":9214702,"author":"TazeTSchnitzel","text":"<p>The big benefit is you don&#x27;t end up with &quot;weakly-typed&quot;, &quot;strongly-typed&quot; and &quot;untyped&quot; APIs. There are just &quot;typed&quot; and &quot;untyped&quot; ones, and you can choose the behaviour that suits you best.</p>","children":[]}]},{"id":9215359,"author":"Chintagious","text":"<p>Wow, interesting:</p><p>&quot;Whether or not the function being called was declared in a file that uses strict or weak type checking is irrelevant. The type checking mode depends on the file where the function is called.&quot;</p><p>That means that my function can have a parameter defined as an int in its strict file, but if it&#x27;s called from outside of it, anything can still be passed to that parameter, right?</p><p>I&#x27;m not sure how I like that. What if you&#x27;re passing input from class A into class BStrict then using BStrict to call a function in CStrict? BStrict and CStrict are defined as strict, where A is not. Would BStrict then be the one throwing the error because the &quot;caller&quot; is the issue?</p><p>From the description it seems that the parameters are effectively ignored in BStrict when A calls it.</p><p>Am I missing something or does this sound iffy?</p><p>Edit: Link for quote - <a href=\"https://wiki.php.net/rfc/scalar_type_hints_v5#parameter_type_declarations\" rel=\"nofollow\">https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;scalar_type_hints_v5#parameter_type...</a></p>","children":[{"id":9215386,"author":"MAGZine","text":"<p>Sounds right to me. If you&#x27;re using untyped code, you shouldn&#x27;t care what you&#x27;re calling into. strict mode should only apply when both parties agree to it, otherwise strict mode would be the default and you&#x27;d have to explicitly mark code as unstrict.</p>","children":[]},{"id":9215397,"author":"TazeTSchnitzel","text":"<p>&gt; That means that my function can have a parameter defined as an int in its strict file, but if it&#x27;s called from outside of it, anything can still be passed to that parameter, right?</p><p>Not at all. It&#x27;s &quot;weak&quot; typing, not no typing.</p><p>A small set of convertible values can be passed and will be converted to the type you asked for, while other values error as usual.</p><p>See the rest of the RFC.</p>","children":[{"id":9215414,"author":"Chintagious","text":"<p>You&#x27;re right, I see that now. That&#x27;s why they went into describing type conversions too. Thanks for the insight!</p>","children":[]}]}]},{"id":9214901,"author":"amyjess","text":"<p>What happened to PHP6?</p>","children":[{"id":9215155,"author":"vectorpush","text":"<p>Eloped with Windows 9.</p>","children":[]},{"id":9214914,"author":"leeoniya","text":"<p>most of it was rolled into 5.4. i think some of the more contentious unicode parts were dropped.</p>","children":[]},{"id":9214916,"author":"agumonkey","text":"<p>It got a call from ECMAScript 4.</p>","children":[]},{"id":9214946,"author":"Washuu","text":"<p>It was partly voted to skip the number 6 due to the numerous books available for sale that covered the original PHP 6 draft.  This would cause confusion for people attempting to learn the new specification.</p><p>Examples on Amazon: <a href=\"http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&amp;field-keywords=PHP%206\" rel=\"nofollow\">http:&#x2F;&#x2F;www.amazon.com&#x2F;s&#x2F;ref=nb_sb_noss_1?url=search-alias%3D...</a></p><p>The vote: <a href=\"https://wiki.php.net/rfc/php6\" rel=\"nofollow\">https:&#x2F;&#x2F;wiki.php.net&#x2F;rfc&#x2F;php6</a></p>","children":[{"id":9215150,"author":"aarondf","text":"<p>From the voting page:</p><p>&gt; The decimal system (or more accurately the infinite supply of numbers we have) makes it easy for us to skip a version, with plenty more left for future versions to come.</p><p>Hard to argue with that!</p>","children":[]}]},{"id":9214951,"author":"TazeTSchnitzel","text":"<p>PHP6 was supposed to be this all-singing all-dancing Unicode support release. It dragged on for years but didn&#x27;t get finished due to various issues, and in 2008 they decided to just scrap it and roll what they could salvage into 5.3</p><p>Since PHP6 died, it made sense to avoid confusion and not name the new major version 6, since we&#x27;d then have two different PHP 6es.</p><p>This is not unlike what happened with ECMAScript 4.</p>","children":[{"id":9215321,"author":"duskwuff","text":"<p>That&#x27;s funny; I used nearly the exact same phrasing to describe PHP 6 a few months ago:</p><p><a href=\"https://www.reddit.com/comments/2qyuhc/new_rfc_for_scalar_types_in_php_7/cnavjpe\" rel=\"nofollow\">https:&#x2F;&#x2F;www.reddit.com&#x2F;comments&#x2F;2qyuhc&#x2F;new_rfc_for_scalar_ty...</a></p>","children":[{"id":9215467,"author":"TazeTSchnitzel","text":"<p>Ah, I may have subconsciously copied the way you said it, I think I&#x27;ve read your comment before. Sorry about that!</p>","children":[]}]},{"id":9215121,"author":"some_furry","text":"<p>Into 5.4, actually.</p>","children":[{"id":9215263,"author":"TazeTSchnitzel","text":"<p>Ah yes, you&#x27;re right of course.</p>","children":[]}]}]}]},{"id":9214908,"author":"jkoudys","text":"<p>Finally! I had a lot of concerns about this, but I think they&#x27;re mostly answered by the discussion. I do like the way union types work (at least nullable types) in Hack, but I think they existing `foo(int $param = null)` approach is fine for 99% of cases, and those that it doesn&#x27;t work for can go back to type-checking at the top of the function (ie do what we have to do for all scalar types right now).</p><p>While I understand the optional strict mode, I do find it quite confusing: it looks similar to javascript&#x27;s &#x27;use strict&#x27;;, and at first glance it sounds like it should be similar to `error_reporting(E_STRICT)`, yet somehow scoped to the &lt;?php ?&gt;. Personally I like the `strict namespace` approach they proposed the most. The argument against is that it will read like everything in that namespace is strict, when it&#x27;s actually limited to the file, but I think it&#x27;s pretty clear if I read in a.php `strict namespace Qaribou;` and in b.php `namespace Qaribou;`, that a.php is strict and b.php is not. I really don&#x27;t see the ambiguity there.</p>","children":[]},{"id":9214920,"author":"leeoniya","text":"<p>speaking of phpng, it now scores 1s better on the wordpress unit tests than just 3 month ago: <a href=\"https://wiki.php.net/phpng\" rel=\"nofollow\">https:&#x2F;&#x2F;wiki.php.net&#x2F;phpng</a></p>","children":[]},{"id":9215724,"author":"cwyers","text":"<p>Is this compatible with what Facebook has done with Hack?</p>","children":[{"id":9215830,"author":"TazeTSchnitzel","text":"<p>There&#x27;s no fundamental incompatibility. Hack files don&#x27;t use &lt;?php tags, they use &lt;?hh tags. I&#x27;m sure Facebook will make HHVM handle PHP type declarations alongside Hack type declarations, though exactly how they&#x27;ll interact remains to be seen.</p>","children":[]}]}],"WordIDMapping":{"lov":[9215238,9215854],"php":[9215238,9215854,9215250,9215284,9215741,9215512,9215534,9215646,9215831,9215832,9215032,9215169,9215173,9215680,9214585,9214946,9214951,9215321,9214908],"think":[9215238,9215790,9215646,9215680,9214914,9215467,9214908],"english":[9215238],"languag":[9215238,9215512,9215831,9215832,9215169,9215680],"programming":[9215238],"picking":[9215238],"choosing":[9215238],"all":[9215238,9214585,9215397,9214951,9214908],"best":[9215238,9215790,9214702],"bit":[9215238,9215790],"from":[9215238,9215275,9215173,9215680,9215359,9215397,9214916,9215150],"every":[9215238],"oth":[9215238,9214585,9215397],"bastardizing":[9215238],"them":[9215238,9215741,9215311,9214585],"it'":[9215238,9215743,9215534,9214585,9215359,9215397,9214908],"own":[9215238],"everyday":[9215238],"use":[9215238,9215284,9215275,9215788,9215832,9215032,9215169,9214585,9215359,9215830],"part":[9215790,9215832,9215386,9214914],"wher":[9215790,9215741,9215359],"said":[9215790,9215467],"debat":[9215790],"too":[9215854,9215414],"heard":[9215382,9215417],"'s_law":[9215417],"clearly":[9215743],"sarcasm":[9215743],"can":[9215250,9215284,9215741,9215832,9214585,9214702,9215359,9215397,9214908],"somebody":[9215250],"explain":[9215250,9214585],"non":[9215250],"got":[9215250,9214916],"strict":[9215250,9215284,9215741,9215275,9215788,9215832,9215433,9214585,9215359,9215386,9215397,9214908],"typ":[9215250,9215284,9215741,9215312,9215433,9214585,9215359,9215397,9215414,9214908],"only":[9215250,9215741,9215386],"scalar":[9215250,9215284,9215741,9214908],"int":[9215250,9215284,9215741,9215359,9215397,9214908],"float":[9215250,9215284,9215741],"enabled":[9215250,9214585],"p":[9215250,9215284,9214585],"fil":[9215250,9215284,9214585,9215359,9215397,9214908,9215830],"basi":[9215250,9215284,9214585],"right":[9215250,9215741,9215512,9215359,9215386,9215397,9215414,9215263,9214908],"had":[9215284,9215741,9215032,9215169,9214908],"hint":[9215284,9215741,9215433],"class":[9215284,9215741,9215359],"than":[9215284,9215741,9215173,9215680,9215433,9214920],"decad":[9215284],"now":[9215284,9215311,9215414,9214908,9214920],"function":[9215284,9215741,9215359,9215397,9214908],"foobar":[9215284],"myclass":[9215284],"foo":[9215284,9215741],"stuff":[9215284],"new":[9215284,9215741,9215832,9214585,9214946,9214951],"notmyclass":[9215284],"throw":[9215284],"error":[9215284,9215741,9215359,9215397],"just":[9215284,9215311,9215312,9214585,9214702,9214951,9214920],"add":[9215284],"integ":[9215284],"string":[9215284,9215741,9215832],"boolean":[9215284],"sinc":[9215284,9215831,9214951],"long":[9215284,9215680],"tradition":[9215284],"weak":[9215284,9215741,9215433,9214585,9215359,9215397],"typing":[9215284,9215397],"php'":[9215284,9215433,9214585],"built":[9215284],"extension":[9215284],"default":[9215284,9215386],"behaviour":[9215284,9214702],"allowing":[9215284],"som":[9215284,9215741,9215275,9214914],"conversion":[9215284,9214585,9215414],"var_dump":[9215284],"produc":[9215284],"nul":[9215284,9214908],"optionally":[9215284],"turn":[9215284],"checking":[9215284,9215433,9215359,9214908],"mod":[9215284,9215741,9215433,9214585,9215359,9215386,9214908],"doesn't":[9215284,9214908],"allow":[9215284,9215741,9214585],"paramet":[9215741,9215359,9215397],"sev":[9215741],"version":[9215741,9215680,9214585,9215150,9214951],"used":[9215741,9214585,9215321],"cov":[9215741],"'scalar'":[9215741],"valu":[9215741,9215433,9215397],"aka":[9215741],"object":[9215741],"bool":[9215741],"declar":[9215741,9215275],"vari":[9215741,9214951],"rec":[9215741],"should":[9215741,9215832,9215173,9215680,9214585,9215386,9214908],"guarant":[9215741],"}the":[9215741],"hinting":[9215741],"two":[9215741,9214585,9214951],"passed":[9215741,9215359,9215397],"must":[9215741],"exact":[9215741,9215321],"converted":[9215741,9215397],"correct":[9215741],"depend":[9215741,9215359],"when":[9215741,9215359,9215386,9214908],"called":[9215741,9215359,9215397],"choic":[9215741],"library":[9215741],"author":[9215741],"writ":[9215741,9214585],"cod":[9215741,9215832,9214585,9215386],"eith":[9215741],"end":[9215741,9214702],"us":[9215741],"even":[9215741,9214585],"without":[9215741,9215032,9215169,9214585],"using":[9215741,9215359,9215386],"able":[9215741],"choos":[9215741,9214702],"writing":[9215741],"expected":[9215741],"automatically":[9215741],"g":[9215741],"accidentally":[9215741],"pass":[9215741],"wrong":[9215741],"expecting":[9215741],"except":[9215741,9215735],"widening":[9215741],"rul":[9215741,9214585],"data":[9215741],"loss":[9215741],"less":[9215741],"2^53":[9215741],"that'":[9215512,9215414,9215321],"community":[9215512,9215534,9215831],"_votes_":[9215512],"featur":[9215512,9215464],"though":[9215534],"lot":[9215534,9214908],"controversy":[9215534],"about":[9215534,9215646,9215467,9214908],"who":[9215534,9214585],"allowed":[9215534],"vot":[9215534,9215646,9214946],"currently":[9215534],"anyon":[9215534],"net":[9215534],"account":[9215534],"peopl":[9215534,9214585,9214946],"commit":[9215534],"access":[9215534],"git/svn":[9215534],"document":[9215534],"contributor":[9215534],"transl":[9215534],"pear":[9215534],"packag":[9215534],"maintain":[9215534],"pecl":[9215534],"few":[9215534,9215321],"repres":[9215534],"agree":[9215646,9214585,9215386],"stil":[9215646,9215359,9215397],"haven't":[9215646,9215032,9215169],"been":[9215646,9215173],"involved":[9215646],"year":[9215646,9214951],"switched":[9215831],"voting":[9215831,9215150],"expanded":[9215831],"smartly":[9215831],"leap":[9215831],"bound":[9215831],"whil":[9215831,9215397,9214908],"maintaining":[9215831],"great":[9215831],"degr":[9215831],"compatibility":[9215831,9214585],"yai":[9215275],"also":[9215275,9215788,9215680],"mo":[9215275],"read":[9215275,9215467,9214908],"strict_typ":[9215275],"reason":[9215275,9215832],"ecmascript":[9215275,9215832,9214916,9214951],"flashed":[9215275],"front":[9215275],"sam":[9215735,9215832,9215321],"idea":[9215735],"`use":[9215735],"\\foo\\bar\\baz":[9215735],"somealias`":[9215735],"already":[9215735,9215788],"reserved":[9215735],"namespac":[9215735,9214908],"east":[9215788,9215852],"egg":[9215788,9215852],"exactly":[9215852],"how":[9215852,9215032,9215169,9215359],"trigg":[9215852],"doe":[9215852,9215832,9215680,9215359],"not":[9215832],"'use'":[9215832],"work":[9215832,9214908],"level":[9215832],"creating":[9215832],"lit":[9215832],"doing":[9215832,9215680],"nothing":[9215832],"unlikely":[9215832],"appear":[9215832],"old":[9215832],"given":[9215832],"meaning":[9215832],"next":[9215832,9214585],"spec":[9215832],"hooray":[9215032],"\\o/i":[9215032],"yet":[9215032,9215169,9214908],"i'm":[9215032,9215169,9214585,9215359],"alway":[9215032,9215169],"amazed":[9215032,9215169],"manag":[9215032,9215169],"mov":[9215032,9215169],"forward":[9215032,9215169],"breaking":[9215032,9215169],"wer":[9215169,9214914],"python":[9215169,9215173],"develop":[9215169],"itself":[9215169],"paying":[9215169],"clos":[9215169],"attention":[9215169],"handled":[9215169],"deprec":[9215169],"chang":[9215169],"there'":[9215173,9215830],"effort":[9215173],"try":[9215173],"avoid":[9215173,9214951],"2/3":[9215173],"styl":[9215173],"situ":[9215173],"jump":[9215173,9215680],"much":[9215173,9215680,9215433],"smal":[9215173,9215680,9215397],"probably":[9215680],"although":[9215680],"project":[9215680],"nee":[9215680,9215311],"support":[9215680,9215311,9214951],"adoption":[9215680],"r":[9215680],"going":[9215680],"quit":[9215680,9214908],"rapid":[9215680],"due":[9215680,9214946,9214951],"low":[9215680],"barri":[9215680],"mass":[9215680],"perform":[9215680],"gain":[9215680],"good":[9215311],"wait":[9215311],"phpstorm":[9215311],"submit":[9215464],"request":[9215464],"can't":[9215312],"find":[9215312,9214908],"anywher":[9215312],"docu":[9215312],"statically":[9215312,9215433],"checked":[9215312,9215433],"run":[9215312],"tim":[9215312],"check":[9215312],"contract":[9215312],"runtim":[9215433],"existing":[9215433,9214585,9214908],"ide":[9215433],"one":[9215433,9214585,9214702,9215359],"benefit":[9215433,9214702],"en":[9215433],"bett":[9215433,9214920],"stat":[9215433],"becaus":[9215433,9215359],"validity":[9215433],"determined":[9215433],"nev":[9215433],"slightly":[9214585],"horr":[9214585],"fact":[9214585],"being":[9214585,9215359],"couldn't":[9214585],"wheth":[9214585,9215359],"coercion":[9214585],"3rd":[9214585],"set":[9214585,9215397],"let":[9214585],"ignor":[9214585],"having":[9214585],"option":[9214585,9214908],"fangled":[9214585],"continu":[9214585],"any":[9214585],"issue":[9214585,9215359,9214951],"between":[9214585],"running":[9214585],"curr":[9214585],"librar":[9214585],"solely":[9214585],"written":[9214585],"appl":[9214585],"\\o/to":[9214585],"honest":[9214585],"completely":[9214585],"camp":[9214585],"awesom":[9214585],"we'v":[9214585],"gotten":[9214585],"solution":[9214585],"everyon":[9214585],"splitting":[9214585],"ecosystem":[9214585],"big":[9214702],"don't":[9214702,9214908,9215830],"weakly":[9214702],"typed":[9214702],"strongly":[9214702],"untyped":[9214702,9215386],"api":[9214702],"suit":[9214702],"wow":[9215359],"interesting":[9215359],"declared":[9215359],"irrelev":[9215359],"mean":[9215359,9215397],"defined":[9215359,9215397],"it":[9215359,9215397],"outsid":[9215359,9215397],"anything":[9215359,9215397],"sur":[9215359],"you're":[9215359,9215386,9215414,9215263],"passing":[9215359],"input":[9215359],"bstrict":[9215359],"cal":[9215359,9214916],"cstrict":[9215359],"throwing":[9215359],"description":[9215359],"seem":[9215359],"effectively":[9215359],"ignored":[9215359],"missing":[9215359],"something":[9215359],"sound":[9215359,9215386,9214908],"iffy":[9215359],"edit":[9215359],"link":[9215359],"quot":[9215359],"shouldn't":[9215386],"car":[9215386],"calling":[9215386],"apply":[9215386],"both":[9215386],"otherwis":[9215386],"you'd":[9215386],"explicitly":[9215386],"mark":[9215386],"unstrict":[9215386],"convert":[9215397],"asked":[9215397],"usu":[9215397],"see":[9215397,9215414,9214908],"rest":[9215397],"rfc":[9215397],"why":[9215414],"w":[9215414],"describing":[9215414],"thank":[9215414],"insight":[9215414],"happened":[9214901,9214951],"php6":[9214901,9214951],"eloped":[9215155],"window":[9215155],"most":[9214914,9214908],"rolled":[9214914],"contenti":[9214914],"unicod":[9214914,9214951],"dropped":[9214914],"partly":[9214946],"voted":[9214946],"skip":[9214946,9215150],"numb":[9214946,9215150],"numer":[9214946],"book":[9214946],"avail":[9214946],"sal":[9214946],"covered":[9214946],"origin":[9214946],"draft":[9214946],"caus":[9214946],"confusion":[9214946,9214951],"attempting":[9214946],"learn":[9214946],"specif":[9214946],"exampl":[9214946],"amazon":[9214946],"pag":[9215150],"decim":[9215150],"system":[9215150],"accurately":[9215150],"infinit":[9215150],"supply":[9215150],"mak":[9215150],"easy":[9215150],"plenty":[9215150],"left":[9215150],"futur":[9215150],"com":[9215150,9215467],"hard":[9215150],"argue":[9215150],"supposed":[9214951],"singing":[9214951],"dancing":[9214951],"releas":[9214951],"dragged":[9214951],"didn't":[9214951],"finished":[9214951],"2008":[9214951],"decided":[9214951],"scrap":[9214951],"rol":[9214951],"salvag":[9214951],"3sinc":[9214951],"died":[9214951],"mad":[9214951],"sens":[9214951],"nam":[9214951],"major":[9214951],"we'd":[9214951],"differ":[9214951],"6e":[9214951],"unlik":[9214951],"funny":[9215321],"nearly":[9215321],"phrasing":[9215321],"describ":[9215321],"month":[9215321,9214920],"ago":[9215321,9214920],"may":[9215467],"subconsciously":[9215467],"copied":[9215467],"way":[9215467,9214908],"i've":[9215467],"befor":[9215467],"sorry":[9215467],"actually":[9215121,9214908],"ye":[9215263],"cours":[9215263],"finally":[9214908],"concern":[9214908],"they'r":[9214908],"mostly":[9214908],"answered":[9214908],"discussion":[9214908],"union":[9214908],"least":[9214908],"hack":[9214908,9215724,9215830],"`foo":[9214908],"param":[9214908],"approach":[9214908],"fin":[9214908],"cas":[9214908],"thos":[9214908],"back":[9214908],"top":[9214908],"understand":[9214908],"confusing":[9214908],"look":[9214908],"similar":[9214908],"javascript'":[9214908],"'use":[9214908],"strict'":[9214908],"first":[9214908],"gl":[9214908],"`error_reporting":[9214908],"e_strict":[9214908],"somehow":[9214908],"scoped":[9214908],"personally":[9214908],"`strict":[9214908],"namespace`":[9214908],"proposed":[9214908],"argu":[9214908],"against":[9214908],"everything":[9214908],"limited":[9214908],"pretty":[9214908],"clear":[9214908],"qarib":[9214908],"`namespac":[9214908],"really":[9214908],"ambiguity":[9214908],"speaking":[9214920],"phpng":[9214920],"scor":[9214920],"wordpress":[9214920],"unit":[9214920],"test":[9214920],"compat":[9215724],"facebook":[9215724],"don":[9215724],"funda":[9215830],"incompatibility":[9215830]},"TotalComments":47}