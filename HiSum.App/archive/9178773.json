{"id":9178773,"author":"YorickPeterse","title":"Goodbye MongoDB, Hello PostgreSQL","url":"http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/","text":"","children":[{"id":9180425,"text":"<p>I think strict mode makes the warning an error</p>","children":[]},{"id":9180455,"text":"<p>&gt; ... we value the following:\n&gt; Consistency</p><p>With all due respect, you should have had this list before selecting MongoDB. Consistency, as in &quot;eventual consistency&quot; and also in the way that you describe it is better supported outside the NoSQL group.</p><p>Also, I don&#x27;t fully agree with the &quot;schemaless&quot; discussion. The moment you think about your data, you build a schema in your head, which, then, is translated into code etc. It&#x27;s about how far you take this rigid model. Maybe you should see it as &quot;flexible schema&quot;.</p>","children":[]},{"id":9181484,"text":"<p>They don&#x27;t write if they looked at other databases. I think there are a lot of alternatives that might have worked better for them than MongoDb and even Mongo 3.0 might have worked better.\nRegarding the schemalessness for simple new properties they should probably have fixed that in the ORM layer, it can add default values if needed. That something is null can actually happen in sql also.</p>","children":[]},{"id":9179197,"text":"<p>Beware of &quot;The Problem Of Schemaless&quot; can occur with a relational DB when you start defining columns as nullable.  You end up with the same problem.</p>","children":[{"id":9179345,"text":"<p>I wouldn&#x27;t call it the same problem.  Something nullable is similar to an Optional type (i.e. in scala Option[String] would map to a nullable varchar).  That is not the same as being schemaless, you at least still have types that are being enforced, even if they might be empty.</p><p>I would agree that having too many nullable fields could indicate a problem with the schema, i.e. you should break things up into more tables.</p>","children":[{"id":9180114,"text":"<p>Agree. I&#x27;ll rephrase to &quot;similar&quot; problem.</p>","children":[]}]}]},{"id":9180226,"text":"<p>Interesting article, did you consider any of the newer NoSQL solutions that offer a data model more similar to MongoDB but more, often configurable, consistency guarantees (like ArangoDB or RethinkDB)? I could imagine that the effort of a migration would have been considerably smaller...</p>","children":[]},{"id":9180483,"text":"<p>MongoDB was never about its benchmarking, scaling or sharding abilities. It was about two things:</p><p>#1: No schema. If you&#x27;re prototyping, schemas just slow you down. Maybe that changes as your application matures.</p><p>#2: Great drivers. The amount of pain to get a basic CRUD app running with a SQL backend is just too high: push the data from the browser to the server in JSON or XML, validate, convert into database schema, sanitize using prepared statements or stored procedures, and send it off. Compare that with MongoDB: <i>it&#x27;s just JSONâ„¢</i>.</p><p>The one thing that killed MongoDB was lack of reliability. Even when you&#x27;re a startup, you may not lose data. I think MongoDB could have easily dropped 50% of performance &amp; scalability for data security and it would be well off now. It was never intended to be the safe, sane choice for big enterprises.</p>","children":[]},{"id":9182534,"text":"<p>It&#x27;s very interesting to see the amount of negative articles about MongoDB, and at the same time see that its very popular on job boards. I&#x27;d honestly like to read an article about a success case</p>","children":[{"id":9182621,"text":"<p>The successes tend to be quiet. And folks who are happy don&#x27;t take to the internet to defend their choices.</p><p>I&#x27;ve been on two straight projects where Mongo has been fine, no better or worse than an SQL database, but certainly nowhere as bad as one would assume reading all the negativity around here. I have experience with it being stable in two different contexts in production (social games, a very common use case, being one). A search for &quot;social games mongo&quot; should show you some success stories.</p><p>The thing that makes it a good choice for me when starting a new project is that you don&#x27;t really think about it, especially if you&#x27;re following lean startup methodology where the goal is to get a product into the hands of the users as quickly as possible &amp; you anticipate changes to your models. Mongo is pretty fantastic for this. And when things stabilize, moving data really isn&#x27;t that bad or expensive if you modeled based on this assumption (which you should). And now that PostgreSQL has a pretty good JSON datatype, it presents a pretty painless path if and when you outgrow Mongo.</p>","children":[]}]},{"id":9179217,"text":"<p>Interesting to read both the article and comments. It&#x27;s cool to hate Mongo nowadays but we use it successfully (for PEPS, open source: <a href=\"https://github.com/MLstate/PEPS\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;MLstate&#x2F;PEPS</a>).</p><p>The version of MongoDb used is not mentioned in the article. The changes between versions is a problem with Mongo but it improved much recently.</p><p>One problem clearly identified is the lack of model. There are solutions to this. For instance, with Opa (<a href=\"http://opalang.org\" rel=\"nofollow\">http:&#x2F;&#x2F;opalang.org</a>) we use strong static typing to generate a database model and guarantee that the whole applications sticks to it. That leaves out model changes, but there are solutions for that.</p><p>Also, there is no need to have the whole collections in RAM, but clearly enough RAM for the &quot;working set&quot; helps.</p><p>In the end, Mongo is no magic so do SQL databases which have their share of problems too.</p>","children":[]},{"id":9181010,"text":"<p>I feel like I&#x27;m missing something.  So many comments in the article and here along the lines of, &quot;just issues a warning and not an error.&quot;</p><p>Am I the only one here who&#x27;s thinking that this is correct behavior on the part of the DBMS? Three result codes from an operation: 1) everything is okay, 2) I&#x27;m sorry Dave, I can&#x27;t do that (error) and 3) Okay, if you insist, but I&#x27;m going to change your data to make it work.</p><p>Am I the only one who thinks: the programmer should be aware of and respond appropriately to ALL THREE, not just 1 and 2.? That anything else is just laziness?</p><p>Or is that just me? Am I missing some subtle consideration here that results in my thought process being naive? If I&#x27;m being naive I do want to understand what I&#x27;m missing, because getting schemas right and having my code react when improper data types are being used is sometimes a pain, ORM or not. But I&#x27;ve always thought it was the right thing to do.</p>","children":[{"id":9181110,"text":"<p>Personally I feel like 3 should not be an option. Either things are okay or not okay, I don&#x27;t like the &quot;sort of okay maybe&quot; option because that implies lots of fuzzy definitions and boundaries that the developer just has to learn.</p><p>Schema says int? Give it an int or fail. Not &quot;it&#x27;s sort of okay if you give it a thing which could be coerced into an int according to the database&#x27;s ideas of coercability&quot;.</p>","children":[]}]},{"id":9180499,"text":"<p>What system is he using to graph his queries response times?</p>","children":[{"id":9180618,"text":"<p>New Relic.</p>","children":[]}]},{"id":9182803,"text":"<p>Thank god for return of sanity.</p>","children":[]},{"id":9180247,"text":"<p>My aversion to NoSQLs is derived from the readiness with which uninformed people dive into them, integrate them with their products, and create a web of complexity around something that should ideally be boring and reliable: the database.</p><p>There are so many things that I&#x27;ve heard you &quot;can&#x27;t do in SQL&quot; that are false, at least pertaining to Postgres. Semi-structured data, full-text search, &quot;web scale&quot; programming, geographical indexes... all of these things, people say &quot;you can&#x27;t do in a relational database&quot; and that&#x27;s not true. Postgres is fucking powerful and can do a lot, very well.</p><p>Arguably, PostgreSQL isn&#x27;t always a &quot;relational database&quot;. You can <i>use</i> it as a key-value store. It just happens that you often <i>want</i> relational logic in a multi-purpose, long-lived data store. The relational database seems to be an attractor; the requirements that accrue to a typical in-house &quot;we can do it better&quot;&#x2F;NIH non-relational database often converge on it.</p><p>NoSQLs have their place at very large scale (100+ TB) and there are plenty of specialized reasons to use alternative databases-- I doubt that Postgres&#x27;s full-text search is competitive with Elasticsearch-- but I feel like most of the anti-SQL sentiment is against <i>the language</i>. And sure, it&#x27;s an ugly and outmoded language, but the database is one place where I&#x27;d rather have an ugly language and rock-solid tech than the other way around.</p><p>Finally, fuck ORMs.</p>","children":[{"id":9181512,"text":"<p>Agree with all of your points. The thing that perhaps annoys me the most is that people seem to assume that nosql is magically fast and that sql is slow... Sure, a key-value pair lookup runs like shit off a shovel, but as soon as you want to run anything more complex than that, it&#x27;s likely faster with a relational database and a few indexes...</p><p>Usually the same people that think running an application on a cloud platform magically makes it fast, when in reality a VPS would be cheaper and faster.</p>","children":[]},{"id":9182802,"text":"<p>&gt; Finally, fuck ORMs.</p><p>Amen to that. Many times I wondered, geez I could&#x27;ve written this with a simple SQL query, here I am reading the docs.</p>","children":[]},{"id":9180774,"text":"<p>Note that just because something is possible with PostgreSQL doesn&#x27;t mean it&#x27;s as easy to do with PostgreSQL than with an alternative database. The question could be rephrased as &quot;why use PostgreSQL when you can do it in x?&quot;.</p>","children":[]}]},{"id":9178969,"text":"<p>Is there anybody here who has run MongoDB at moderate scale with good results?</p><p>As in a few terabytes of data, &gt;10k ops&#x2F;second territory.</p><p>I&#x27;ve been really disappointed with its reliability and performance in situations where I&#x27;ve been around that.</p>","children":[{"id":9179136,"text":"<p>Yes. When implemented correctly Mongo can scale very well.</p>","children":[]},{"id":9179159,"text":"<p>I&#x27;ve been using mongo on 39M+ records (tracking financial tick data) across 73 assets (collections) and my queries take anywhere between 2-3mins depending on complexity.</p><p>You can always run db.currentOp() in the mongo shell to see what process is taking forever as well.</p><p>Let me clarify why though, there methods of optimizing a query by adding another field, but since I have to traverse my records with the sort() cursor my queries take that long.</p>","children":[{"id":9179672,"text":"<p>Jesus Christ!</p><p>I remember querying databases with 100 tables and millions of records in foxpro a century ago and it took less than a second.</p><p>What has happened to the world while I was in cryogenic state? Take me back to the nitrogen pool!</p>","children":[]},{"id":9180852,"text":"<p>I don&#x27;t get this. If any relational database choked with that small number of rows, it would be thrown away immediately. That&#x27;s a couple of orders of magnitude too slow.</p>","children":[]}]},{"id":9179426,"text":null,"children":[]},{"id":9179231,"text":"<p>I did, for nearly three years.  MongoDB was consistently the number one reason for site downtime.</p>","children":[]},{"id":9180038,"text":"<p>High scale public references and links to their presentations are maintained here: <a href=\"http://www.mongodb.com/mongodb-scale\" rel=\"nofollow\">http:&#x2F;&#x2F;www.mongodb.com&#x2F;mongodb-scale</a></p><p>I think scaling any system takes careful planning.</p><p>IMHO, this is an area where MongoDB has improved a lot in the past two years, especially with 3.0, but there is still a lot of work to do.</p>","children":[]},{"id":9179028,"text":"<p>I came into a company that was attempting to use MongoDB for their soft-real time time-series data (I would consider it between low and medium scale) and it was atrocious, in too many ways.</p><p>It doesn&#x27;t scale without tremendous effort and implicit schemas are a very dangerous thing to introduce into your application, they&#x27;re insidious, and require enormous diligence in the application to codify the schemas (I would only feel comfortable using a loose document store with something like Haskell in which I can model the schema with strong types).</p><p>I&#x27;ve encountered MongoDB in three different companies &#x2F; products and expended much effort to immediately move away from it in every case. In each case, the solution (which has been different each time) was far more appropriate to what was needed.</p><p>There&#x27;s a sad inclination by developers to pick &quot;one ring to rule them all&quot; tools and MongoDB I believe even sells itself that way. <i>It is not</i>.</p>","children":[{"id":9179196,"text":"<p>What were the more appropriate solutions?</p>","children":[{"id":9179859,"text":"<p>Postgres for structured data, Riak for high-volume and flatter data, and TempoDB for high-volume time-series data.</p>","children":[]}]}]}]},{"id":9179228,"text":"<p>I had a business based on another company&#x27;s API years ago, and they started changing a lot of their systems to work with mongo. The data lost a few useful points, like IDs and the speed and reliability didn&#x27;t seem to be improved. My thought at the time it was, how about you guys just use postgresql? My comment on the mailing list about that seemed to be taken as an insult or naÃ¯vetÃ©. However, sure enough two or three years later they said they had all sorts of problems with Mongo and were switching toâ€¦ Postgres.</p>","children":[]},{"id":9179230,"text":"<p>The problem of schemaless database mentioned in the article is then replaced with painful migrations.</p><p>The trend to go back to SQL databases now is fueled by the &quot;same&quot; poor reasons why people were going for NoSQL databases. You can&#x27;t have everything...</p>","children":[{"id":9179783,"text":"<p>I have found that the more schema you have, i.e. the more structure you have for your data, the easier migrations become, because there are no surprises.</p>","children":[]}]},{"id":9182815,"text":"<p>I&#x27;m also moving back to Postgres. Postgres was the first DB I used when I learned to code PHP. MySQL came later. Just recently, around a year or two ago, I got introduced to Mongo and all its surrounding hype. Mongo is good for small small apps that need no references and have a low requirement for speed and data integrity.</p>","children":[]},{"id":9180000,"text":"<p>Am I alone in thinking that if a programmer writes a code that allows a string to be sent to an integer field in the database the issue is not with the DBMS?</p>","children":[{"id":9180097,"text":"<p>Yeah. And since they use ActiveRecord, how would they even go about doing that in the first place? Over all the years I&#x27;ve used MySql, that has never been an issue for me. Sure it has its quirks, but show me a mature piece of software that doesn&#x27;t.</p>","children":[]}]},{"id":9178990,"text":"<p>There is a mistake in the article, due to the OP not knowing an arguably basic notion about MySQL.</p><p>&gt; when defining a field as int(11) you can just happily insert textual data and MySQL will try to convert it.</p><p>this is dependent on the SQL Mode, which is quite flexible. for example, the STRICT_ALL_TABLES will prevent strings to be inserted in INT fields:</p><p>mysql&gt; create table example ( `number` int(11) not null );</p><p>mysql&gt; insert into example (number) values (&#x27;wat&#x27;);\nQuery OK, 1 row affected, 1 warning (0,00 sec)</p><p>mysql&gt; SET sql_mode = &#x27;STRICT_ALL_TABLES&#x27;;</p><p>mysql&gt; insert into example (number) values (&#x27;wat&#x27;);\nERROR 1366 (HY000): Incorrect integer value: &#x27;wat&#x27; for column &#x27;number&#x27; at row 1</p><p>There are certainly advantages in choosing PostgreSQL over MySQL... this is just not one of them :-)</p>","children":[{"id":9179743,"text":"<p>When buying a car, would you prefer for it to be safe by default or only after you&#x27;ve enabled half a dozen features such as &quot;air bags&quot; and &quot;seatbelts&quot;?</p>","children":[]},{"id":9179012,"text":"<p>Perhaps the author was aware, but found it unacceptable that clients could choose their own sanity ?</p>","children":[]},{"id":9179049,"text":"<p>Personally, I would not use a database which is &#x27;lax&#x27; by default instead of &#x27;strict&#x27;. What other choices have they made which I need to learn OR it will bite me big in Production?</p>","children":[{"id":9179152,"text":"<p>It&#x27;s not so easy.</p><p>MySQL has a large legacy of being used as a very-immediate-although-somewhat-toy database at its roots.</p><p>For example, in absolute terms, I would find much more troubling the usage of non-transactional tables, justified by meaningless microbenchmarks, which has been somewhat common for some time.</p><p>Nowadays MySQL is definitely reliable, and it has a much more expert surrounding culture than the past, so if a person&#x2F;company is willing to put time and knowledge, it&#x27;s a reasonable choice.</p><p>I don&#x27;t find automatic conversion so damaging that people should stay away just because it&#x27;s default.</p><p>When you reach some level, you definitely need to have a relatively intimate knowledge of your tools, and at such point, one is far from the &quot;defaults&quot;.</p>","children":[{"id":9179824,"text":null,"children":[]}]},{"id":9179163,"text":"<p>You can subtract two DATETIME columns in MySQL and it will not generate any warnings. It will give you an answer that probably is within the ballpark of the actual time difference but isn&#x27;t the actual time difference.</p>","children":[]},{"id":9181489,"text":"<p>utf8 is not really utf8 and doesn&#x27;t support 4 byte characters that exist outside the BMP (you&#x27;ll need the separate utf8mb4 type for that, assuming you&#x27;re not running on a legacy version that doesn&#x27;t support that either).</p>","children":[]},{"id":9179548,"text":"<p>If you feed MYSQL an invalid date for a date&#x2F;timestamp field it will quietly insert 0000-00-00 and produce a warning, not an error.</p>","children":[]},{"id":9179085,"text":"<p>Example: Inserting strings into a varchar() that are longer than the limit will silently truncate them.</p><p>Example: The TIMESTAMP type defaults to the current time instead of null.</p><p>There are more, but those are the two that have bitten me in the past (and no I do not use MySQL at all if I can help it)</p>","children":[{"id":9179143,"text":"<p>See my other comment in this thread RE: string truncation (strict sql mode will default on in MySQL 5.6&#x2F;5.7).</p><p>It is possible to change timestamps to default to Null.  For backwards compatibility, the previous behavior defaults:</p><p><a href=\"http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp\" rel=\"nofollow\">http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-system-variabl...</a></p>","children":[]}]},{"id":9179095,"text":"<p>In a previous life, the lax by default approach of MySQL bit us hard on a regular basis; a number of discrepancies vs. reasonable expectation were had. At the time I left, they were working on migrating toward Postgres, and reports suggest they are <i>extremely</i> happy with pg.</p>","children":[]}]},{"id":9179105,"text":"<p>This is indeed the case.  To clarify a little:</p><p>- STRICT_TRANS_TABLES is on by default for &quot;new installations&quot; starting from MySQL 5.6 (2013).  What this means is that the bundled config files all turn it on.</p><p>- Starting from MySQL 5.7, it is a compiled default, along with several other more &quot;strict&quot; options.  Effectively making it default to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,ERROR_FOR_DIVISION_BY_ZERO,\nNO_ZERO_DATE,NO_ZERO_IN_DATE,NO_AUTO_CREATE_USER.</p><p>I have some sample configuration files to make 5.6 behave like 5.7&#x27;s strictness.  For example: <a href=\"https://github.com/morgo/mysql-compatibility-config/blob/master/mysql-56/mysql-57-proposed.cnf\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;morgo&#x2F;mysql-compatibility-config&#x2F;blob&#x2F;mas...</a></p><p>It does make upgrades harder, so some applications may also need to use a whitelist&#x2F;blacklist approach to transition:\n<a href=\"http://www.tocker.ca/2014/09/01/suggestions-for-transitioning-into-strict-sql-mode.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.tocker.ca&#x2F;2014&#x2F;09&#x2F;01&#x2F;suggestions-for-transitionin...</a></p>","children":[]}]},{"id":9179004,"text":"<p>&gt; Another way of handling this is defining a schema in your models. For example, Mongoid, a popular MongoDB ODM for Ruby, lets you do just that. However, when defining a schema using such tools one should wonder why they arenâ€™t defining the schema in the database itself.</p><p>Bah. It&#x27;s like they didn&#x27;t know that schema-free data stores mean &quot;there is no schema; different objects may have different fields&quot;. This is the whole point of MongoDB: you assume the responsibility of managing the schema. That&#x27;s a &quot;feature&quot;: you get greater flexibility by assuming more responsibility. Whether it&#x27;s a useful feature, I won&#x27;t say.</p><p>Their second reason is much more valid: MongoDB is not consistent&#x2F;durable, all that. It&#x27;s good for a cache, but not for long term data.</p><p>Here&#x27;s a third reason I&#x27;d give against it as your primary data store: it&#x27;s expensive. You have to keep your entire dataset in RAM, but that&#x27;s not always necessary. My favorite example is from Foursquare. They had every single check-in ever in MongoDB in RAM. That&#x27;s absolutely unnecessary, and quite silly to do so. Old check-ins are archived data. You don&#x27;t need them. No user ever wants to know when&#x2F;where they checked in three years ago. This is why at the time they were paying for 68 GB RAM Amazon boxes instead of 4-8 GB boxes. (I have no idea what they do now. I remember chatting with them on HN after a catastrophic out of memory failure when they filled up the entire 68 GB&#x27;s).</p>","children":[{"id":9182811,"text":"<p>I&#x27;m not a fan of MongoDB, but you don&#x27;t know what you&#x27;re talking about.</p><p>MongoDB is durable. While it doesn&#x27;t quite support SQL transactions, it is durable.  The data is journaled before being confirmed, and once confirmed will be written to disk.  It can be consistent, but this sort of breaks the whole idea of scaling and distributing the load in Mongo, or causes massive performance problems, so that is something to consider when using it. Understanding and adopting eventual consistency is tough, but it&#x27;s an issue with every distributed database, not just MongoDB.</p><p>And you don&#x27;t &quot;keep your entire data set in memory&quot;.  You should make sure your <i>indexes</i> fit in memory. Your data can be as large as you like.  Most people with terabytes of data in MongoDB don&#x27;t keep terabytes of RAM in their servers.</p><p>Foursquare did NOT keep every single check-in in RAM. They kept an index of them in RAM, sure. But the problem was they had a sharded MongoDB deployment and one of the shards became unbalanced and exceeded the available RAM.  If that happens (harder to do these days, but not impossible), it can be very difficult to recover.</p><p>MongoDB tries to bridge that gap between NoSQL and SQL. I think the MongoDB folks originally ignored decades of database research when developing MongoDB, but they&#x27;ve been forced to adopt it as the years have passed. Is it an Oracle killer? No.  But it can be a useful and productive tool if you understand and apply it appropriately.</p>","children":[]},{"id":9181320,"text":"<p>&gt; This is the whole point of MongoDB: you assume the responsibility of managing the schema</p><p>Who&#x2F;what is the &#x27;you&#x27; there?  Don&#x27;t &#x27;you&#x27; have the responsibility of managing the schema either way?  It&#x27;s a question of whether you want to manage the schema through an rdbms, or... just in your application logic, I guess?</p>","children":[{"id":9181441,"text":"<p>Manage as in write all the code that ensures adherence to the schema. If you say that the field called &quot;score&quot; is an int in a schema-ful DB, then insert an array, the DB will throw an error. If you do that in a schema-less DB, it will not unless you add a check yourself. If you are not using some type of unified DB access layer, you must perform this check every time you write a value. You must also perform the check every time you read a value, since someone else might have written something different to the DB while you weren&#x27;t looking. This you take on doing much more work, yet gain flexibility and possibly some space savings (as in, you are not storing empty cells if you don&#x27;t want to).</p>","children":[{"id":9181908,"text":"<p>(solely toward your final point) Many RDBMS&#x27; will optimize that for you. PostgreSQL has a bitmap structure on each row that indicates which columns are null and which have data in them. In addition, it automatically compresses certain data types. For example, strings that overflow to the point where they need to be stored in a secondary table (called &quot;toast&quot; in pg) will be automatically compressed.</p>","children":[{"id":9182291,"text":"<p>That&#x27;s pretty cool. I didn&#x27;t know Postgres actually did this, though I figured it was at least possible.</p>","children":[]}]}]}]},{"id":9179074,"text":"<p>We have a dataset much larger than RAM (600gb vs 60gb RAM). It&#x27;s the working set that really matters. Accessing data outside the working set can be slow - unless you have SSDs :)</p><p>Regarding consistent&#x2F;durable: during the past four years, we&#x27;ve not had any problems on this front that weren&#x27;t caused by us in. We&#x27;ve had an issue that was a misconfiguration on our part where we allowed writes to a server because we pulled it out of a replica set. We also ran out of space on the logging volume once and that caused downtime - but, we didn&#x27;t have log rotation or anything setup.</p><p>In general, we&#x27;ve found the failover very reliable and new primaries have come online without any problems.</p><p>That said, schemaless is both a blessing and a curse. Now that Postgres and MySQL have online alter built-in I&#x27;d possibly choose one of them if we were starting everything again.</p>","children":[{"id":9180245,"text":"<p>Well, SSD&#x27;s aren&#x27;t nearly as fast as RAM, even today.</p><p>I think we are in agreement about the working data vs all data. I am saying that in most applications your working dataset is much smaller than your total data set. So why pay for hardware capable of holding your entire dataset in RAM when you don&#x27;t need it?</p><p>I am surprised you are able to do this with Mongo. Last I checked, it simply did not handle this case, and started failing miserably if it was not able to fit all data into RAM.</p><p>Re: durability: I am not talking about the server going down, coming back up. I am talking about whether there is an fsync() when writing data. Set up a test case where you are writing data very rapidly to MongoDB, then pull the plug on the box it&#x27;s running on. It&#x27;ll come back up, but the data it told you it just wrote won&#x27;t be there because it didn&#x27;t checkpoint. Did you check that all your writes succeeded when you had node failures in your cluster? Most applications don&#x27;t have the machinery to do this because generally the state necessary to check this is stored in the database, yet it&#x27;s the database you are testing. The only way to test this is to also write logs (also atomically), and then verify DB data against logs. Or, just use a database that guarantees durability.</p><p>Re: consistency: MongoDB doesn&#x27;t support transactions [1]. That&#x27;s enough to exclude it from a large number of applications. Anything to do with money, for example, is out since you really don&#x27;t want double spending to be a thing.</p><p>[1] <a href=\"http://docs.mongodb.org/manual/core/write-operations-atomicity/\" rel=\"nofollow\">http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;core&#x2F;write-operations-atomici...</a></p>","children":[{"id":9181386,"text":"<p>Fair points - we don&#x27;t allow failed servers back into replica sets and rely on writing to multiple nodes instead of the disk as source of truth.</p><p>This may not suit everyone and absolutely does not suit financial transactions. You can bend Mongo to do it using additional collections and money movement logs... but, why bother when it&#x27;s simpler to use MySQL&#x2F;Postgres?</p>","children":[]}]}]}]},{"id":9179777,"text":null,"children":[]},{"id":9181058,"text":null,"children":[]},{"id":9179786,"text":"<p>So let me ask a question. What should I use when I do need a schemaless database? Is NoSQL never the answer? I&#x27;ve got a project that needs to allow clients to create registration forms for different events that my company hosts. A lot of the registration data will have a defined shema ex: name, email, address. I feel like that stuff should go in a RDMS, but all the event specific stuff needs to be schemaless. I know I can do custom key&#x2F;value tables in a RDMS, but that doesn&#x27;t feel right either. Is MongoDB useless as a database, or are people being bitten for thinking it&#x27;s a silver bullet and throwing it at every problem?</p>","children":[{"id":9179946,"text":"<p>The addition of the json type to databases like Postgres has significantly limited the usefulness of JSON-datastores like MongoDB for me.  It used to be that if you had to store truly schema-less information, and wanted to be able to query it, you needed Mongo.  Now, Postgres can do that inside of an otherwise structured table.</p><p>That said, there are applications for other less-structured datastores like Redis.  When you need to store data with an expiration quickly, and use common datastructures like sets, Redis can be fantastic.</p>","children":[]},{"id":9180997,"text":"<p>&gt;&quot;<i>I feel like that stuff should go in a RDMS, but all the event specific stuff needs to be schemaless.</i>&quot;</p><p>Okay, you lost me there. Why does it <i>need</i> to be schema-less?</p>","children":[{"id":9181206,"text":"<p>I imagine that because if you handle different types of events there is an infinite number of possible registration options. From preferred food type to breed of your dog... and many more. It could be stored as a huge (event, user, key, value) table, but in practice that&#x27;s just how you choose to store a schemaless hash of event attributes.</p>","children":[]}]},{"id":9179852,"text":"<p>Riak is amazing and actually scales. But I would only use Riak for high-volume data storage (similar to S3).</p><p>FoundationDB looks great, I haven&#x27;t used it yet but they appear to have their heads on right.</p><p>PostgreSQL, the newer versions, have indexable BJSON data types so you can get the same exact behavior from Postgres as you do from Mongo but with a true RDBMS along with it, a dependable storage engine, etc...</p><p>Postgres is harder to scale horizontally though - if you have really high-volume data writes, you should be using something else for that.</p><p>I typically use PostgreSQL for all of my highly &quot;structured&quot; data and Riak for high-volume and &quot;flatter&quot; data (Postgres also often serves as an index <i>into</i> those objects).</p>","children":[{"id":9179906,"text":"<p>Awesome, Thanks for the reply. My use cause is barely out of the &quot;toy app&quot; range. We only do a handful of events each year and they only draw around 100 attendants. We&#x27;re talking a very small amount of data. When you do the PostgreSQL and Riak combo is it ever on the same&#x2F;related dataset. What are you using at the application layer? I&#x27;m building this in rails and I feel like it would be better to store the structured fields in MySQL and the variant data in something NoSQL. But I haven&#x27;t read much into using active record with two different persistence layers. That&#x27;s interesting about PostgreSQL with indexable BJSON. I&#x27;ve only ever used MySQL, I really need to check out Postgres.</p>","children":[{"id":9182587,"text":"<p>It&#x27;s easier to go from something more highly structured to something looser. Start with a relational db and let it grow then pay attention to what data gives you the most scale pain and try to move that out to Riak &#x2F; Cassandra &#x2F; etc...</p><p>Don&#x27;t prematurely scale, just pay attention to your metrics, scale vertically first, then tackle the very specific pain points.</p>","children":[]}]}]},{"id":9179855,"text":"<p>MongoDB is a great database and has a really good set of client tools. It has a learning curve and it has not been without problems but I have loved it at a past startup and would absolutely use it again. If you try it out and find you like it, I&#x27;d really suggest getting to one of their MongoDB seminar days. They tend to have good speakers and for sure you&#x27;ll learn something new about databases and MongoDB.</p>","children":[{"id":9179936,"text":"<p>Yea, from the good stuff I&#x27;ve read about MongoDB I really want to like it. There&#x27;s just been so much more negative that I&#x27;ve read.</p>","children":[{"id":9180073,"text":"<p>Every choice you make in software has pros&#x2F;cons. This is true of all database technologies as well. You can probably solve your problem using any of the choices before you. If you decide to use something new (e.g. MongoDB, Riak, whatever) first make sure it lines up with your requirements then see how it goes. Always keep backups. In the worst case, you&#x27;ll restore and migrate to something else. But that&#x27;s kind of what we do as an industry anyways.</p>","children":[]}]}]},{"id":9179882,"text":"<p>Mongo is rarely the answer for high performance, high transaction systems. I use it quite happily to prototype applications due to it&#x27;s very low boilerplate overhead.</p><p>If you <i>need</i> schema-less data storage in a &quot;real&quot; database, use PostgreSQL&#x27;s JSON type.</p><p><a href=\"http://clarkdave.net/2013/06/what-can-you-do-with-postgresql-and-json/\" rel=\"nofollow\">http:&#x2F;&#x2F;clarkdave.net&#x2F;2013&#x2F;06&#x2F;what-can-you-do-with-postgresql...</a></p>","children":[{"id":9179970,"text":"<p>But what about low performance, low transaction? Realistically the stuff I&#x27;d use it for wouldn&#x27;t see much traffic. The big factor for me is schemaless. I don&#x27;t want to create a new table each time there is an event with similar, but not exactly matching data between events. I mean, is MongoDB so bad that in any production setting the reliability is not there? Thanks for the link. I didn&#x27;t know about the JSON type. Maybe I&#x27;ll finally give PostgreSQL a try.</p>","children":[{"id":9180882,"text":"<p>Most people who run into performance issues on Mongo are putting a lot of data into it. I&#x27;ve personally never had problems with it for side projects, but my tolerance for failure and data loss in those scenarios are quite a bit different than what most people expect out of production systems. It&#x27;s definitely possible to use Mongo in production successfully, you just have to be aware of the tradeoffs and plan accordingly.</p>","children":[]},{"id":9182702,"text":"<p>&gt;  is MongoDB so bad that in any production setting the reliability is not there?</p><p>Replication is for high-availability not for consistency.  As long as you can live with that, the reliability is ok.</p>","children":[]}]}]},{"id":9179901,"text":"<p>&gt; Is MongoDB useless as a database, or are people being bitten for thinking it&#x27;s a silver bullet and throwing it at every problem?</p><p>A bit of both really.</p><p>NoSQL databases allow for rapid prototyping, as do weakly and dynamically typed languages. It&#x27;s amazing if you want to just get a product out of the door. NoSQL is the short term answer. And MongoDB is the answer if writing your data to &#x2F;dev&#x2F;null feels like a good idea to you..</p><p>However, strong typing and regular databases offer consistency. You have no way of going wrong because it would have refused to compile twenty times before you even think about pushing your (wrong) code in production. Sure, you can force yourself to get such consistency in MongoDB. But first, it&#x27;s pretty taxing mentally, and secondly if you&#x27;re doing that, why not go the way of a relational DB which offer you tools to enforce that and is faster ?</p><p>KV columns in databases feel wrong to me too, I feel dirty using PGSQL&#x27;s json storage because I feel like I&#x27;m throwing normal forms away. But at the end of the day, what matters is that your product works.</p>","children":[{"id":9179997,"text":"<p>Yea, I&#x27;m going to check out PostgreSQL&#x27;s json storage.</p><p>&gt;But at the end of the day, what matters is that your product works.</p><p>With my requirements, I could just write to a flat file and be fine... I seem to like complicating things just enough that I no longer understand how what I&#x27;m building works. LOL.</p>","children":[{"id":9180145,"text":"<p>SQLite is great for &quot;I really just want a nicer flat file&quot; use cases.</p>","children":[]}]}]}]},{"id":9181841,"text":"<p>&gt; For example, when defining a field as int(11) you can just happily insert textual data...</p><p>My eyes practically fell out of my head when reading this.</p>","children":[]},{"id":9180307,"text":"<p>Yes if you have one MongoDB database that uses `title` and another one that uses `post_title` then you have to adjust your code for that.</p><p>Guess what. Same thing applies to SQL.</p>","children":[{"id":9182788,"text":"<p>In SQL you can&#x27;t have a table whose title field is called either `title` or `post_title` depending on which record you&#x27;re looking at.</p>","children":[{"id":9182816,"text":"<p>You easily could have this in SQL if you designed a poor schema or failed to migrate data from the previous field name.</p>","children":[]}]}]},{"id":9179284,"text":"<p>This post reflects an interesting technical narrative of companies switching off MongoDB to more traditional relational databases as they grow.</p><p>Importantly, I don&#x27;t think that&#x27;s an indictment of MongoDB. Instead, it highlights the key advantages of NoSQL: ease of use and rapid iteration.</p><p>When you&#x27;re first working on a project, MongoDB is very easy to slap in. You don&#x27;t even have to create tables&#x2F;collections. As you iterate, you don&#x27;t have to constantly be updating schemas as your product direction shifts. Thus, MongoDB is perfect for early startups.</p><p>As a company scales, of course it&#x27;s warts start to show. The very attributes (like schemaless storage) which were an asset when just a few developers were hacking on the project become a drawback as the company grows in size. Reliability becomes more of a concern.</p><p>Naturally, people shift to a more traditional database. Personally, I&#x27;m almost ready to switch some of our core functionality from MongoDB to Postgres. This isn&#x27;t an indictment of Mongo though.</p>","children":[{"id":9179420,"text":"<p>Really, you can&#x27;t spend the 10 minutes designing a table structure in a SQL database? And now you have to spend months re-inventing the wheel because you wanted an easy out?</p><p>This post reflects on developers being lazy, instead of doing it right the first time around. Oh no, you have to log in to the db and run a CREATE TABLE statement every few months when you need to scale. Cry some more.</p><p>And even then, &#x27;lazy&#x27; is subjective. I don&#x27;t find SQL that hard to implement. There&#x27;s a library for practically every language you can think of. What&#x27;s your excuse?</p>","children":[{"id":9179695,"text":"<p>You don&#x27;t even need to design the schema, just add the bits you need as you go (updating the schema takes about 20 seconds with rails for instance).</p>","children":[]},{"id":9180801,"text":"<p>I guarantee you&#x27;re not designing your databases correctly if they only take you 10 minutes and only a CREATE TABLE statement every few months.</p>","children":[]},{"id":9180567,"text":"<p>I think you&#x27;re understating the cost of updating the structure of an in-use database.</p>","children":[{"id":9181305,"text":"<p>I&#x27;m not even sure if you&#x27;re referring to an rdbms or Mongo, which is kind of the other side there. I _think_ you&#x27;re referring to an rdbms. But I also think people seriously understate the cost of changing the way your data is stored in a large in-use MongoDb too.</p>","children":[{"id":9181686,"text":"<p>Mostly because an RDBMS will ask you to explain, explicitly, in complete detail, how you propose to consolidate the entire schema and existing data with the new changes without introducing paradoxes or inconsistencies.</p><p>Mongo won&#x27;t. It will take you at your word. Even if that word is wrong.</p>","children":[]}]}]},{"id":9179594,"text":"<p>Actually, I think that&#x27;s a great way to think about it: NoSQL is the &quot;dynamic typing&quot; of the database world.</p><p>Put another way, it&#x27;s like &quot;what? you couldn&#x27;t spend 10 minutes declaring types everywhere?&quot; - yeah, it&#x27;s less robust, yet dynamically typed languages remain popular.</p><p>My excuse: When I&#x27;m just past the mock stage, and still playing with what UI functionality should be, sometimes I just want to get some JSON persisted. I&#x27;m changing the shape of the data a lot, discovering the schema as I build. The persistence is frankly a technical nuisance I wish I didn&#x27;t have to think about.</p><p>Sometimes, the result is &quot;good enough&quot; and I don&#x27;t need to go through the ceremony of glueing in an ORM.</p>","children":[{"id":9182210,"text":"<p>Your given excuse makes you sound more like a naive amateur instead of a pragmatic architect</p>","children":[]},{"id":9180009,"text":"<p>I read this article and was just like &quot;ya. types are important&quot; and reflected on how I used to love Ruby, but now swear against it for serious projects. Glad to see I&#x27;m not the only one who made the analogy in their heads.</p><p>Right now though, I have to write a script to pull some crap out of an Excel file and into my database. I use Scala with the Play framework, but what a nightmare getting typed information out of an Excel sheet is. No thanks, I&#x27;ll just pull it out magically with Ruby and construct the JSON requests to my real server to create the data. It&#x27;s a smart business decision and I would defend it all day. I&#x27;m sure there&#x27;s corollaries for &quot;dynamic databases&quot; such as MongoDB.</p><p>To be clear though, I&#x27;m with the grandparent. I really think decisions for MongoDB are made out of a combination of laziness and eagerness most of the time. I mean honestly, if your data is going to be relatable, why would you employ a scheme that forces you to make those relationships manually? So you go to a <i>relational</i> databases which ironically lacks relationships, but hey there&#x27;s plenty of support and libraries that will do it for you. But really if you had to ask me my personal opinion? Graph databases where relationships are FIRST CLASS CITIZENS are typically the best for serious projects containing lots of relationships.</p>","children":[]}]},{"id":9182442,"text":"<p>Definitely not about spending 10 minutes on SQL Schema. It is all about maintenance. MongoDB is right use case, if you know what it will be there in Table.</p>","children":[]}]},{"id":9179796,"text":"<p>I don&#x27;t know about this, seems like a lot of technical debt to me.</p><p>Choosing mySQL over mongoDB to start with really can&#x27;t add that much time to a project, especially if you&#x27;re doing it in a language like Ruby.  A couple hours extra here seems very worth it to avoid a multi-week migration process a couple years down the road.</p>","children":[]},{"id":9179300,"text":"<p>OP will be back in three years talking about migrating off of Ruby...if they make it that far :-)</p>","children":[{"id":9179476,"text":"<p>Unlikely, we&#x27;ve been running on Ruby for about 5 years and it&#x27;s the one thing we feel safe relying on for our serious internet business. Actually, our entire setup is Ruby (safe from some shell scripts here and there).</p>","children":[]}]},{"id":9179302,"text":null,"children":[]},{"id":9179364,"text":"<p>No, this is bad. You shouldn&#x27;t design a system that won&#x27;t work from the outset. &quot;Plan one to throw away&quot; is about budgeting time, not about knowingly making big technical compromises when you write the first version.</p>","children":[{"id":9179932,"text":"<p>I had to look the quote up, because it didn&#x27;t sound quite right.</p><p>&quot;Plan to throw one away; you will anyway.&quot;</p><p>The quote is Fred Brooks from his book &quot;Mythical Man Month.&quot; It seems to me the author&#x27;s post reflects that quote. Granted they didn&#x27;t throw the entirety of every application out, but arguably it&#x27;s an entirely different application now. I would even wager there&#x27;s months of refactorings ahead of them as they take advantage of Postgresql&#x27;s features.</p>","children":[{"id":9179992,"text":"<p>I think the author of the post has the right approach. They tried hard to build something that would work right, and since it didn&#x27;t, they rewrote most of it. They had enough budget and willingness to rewrite it. The author learned from their mistakes, and probably won&#x27;t be using MongoDB on a future project.</p><p>The author of the comment I&#x27;m replying to seems to advocate a different approach where you choose tech and techniques that are good for short-term but maybe not long-term. This way you have planned technical debt plus unplanned technical debt. Also the comment author seems to be missing one of the post author&#x27;s main points, which is that MongoDB&#x27;s schemalessness is awkward even in the early stages of the app, and this is worked around by a less-than-ideal technique of moving the schema from the database layer to the application layer.</p>","children":[{"id":9182725,"text":"<p>And what most people here have missed is that PGSQL is working for them &#x27;because&#x27; they now know what their data looks like, MongoDB got them to that point.  I can&#x27;t speak for the OP but some of his examples speak to a lack of experience, which, had they started with PGSQL would likely have resulted in an intractable schema and we would now be reading a &#x27;How MongoDB freed us&#x27; post.</p>","children":[]}]}]},{"id":9179432,"text":"<p>But these systems do work - it&#x27;s just that they don&#x27;t necessarily scal as well as others.</p><p>It&#x27;s silly to expect that every single software project requires the same level of correctness or maintainability. A rapidly-developed speculative SaaS for example may be able to trade long-term maintainability or scalability for faster development time (often more important if you have no idea whether or not your idea will even work).</p>","children":[]},{"id":9179582,"text":"<p>Not quite--plan to throw away the <i>internals</i>, not the <i>interface</i>.</p><p>This lets you do things like writing shitty hyperlinear naive solutions to get all the pieces of a system in place, and then going back and optimizing each in turn. You don&#x27;t spend a lot of time fussing over little details, and instead make rapid progress.</p><p>If you don&#x27;t spend time on the interfaces between the pieces, though, you&#x27;re absolutely screwed.</p>","children":[{"id":9180956,"text":"<p>I&#x27;ll say I agree with this corollary: the schema is the interface.</p>","children":[]}]}]}]},{"id":9181076,"text":"<p>As the post explained, one of the big problems of migration off of MongoDB is finding out the &quot;effective&quot; schema of the data, and then migrating it (according to that schema). By &quot;effective&quot; I mean the resulting structure of the data stored in the database.</p><p>I think it would very helpful to use here ToroDB (<a href=\"https://github.com/torodb/torodb\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;torodb&#x2F;torodb</a>). While being MongoDB-compatible, it stores data structured into PostgreSQL tables, automatically identifying the schema of the data. Then, just by looking at the created tables, you very easily have the schema (and the data migrated to that schema). It would make migration easier.</p><p>Disclaimer: I am a ToroDB developer</p>","children":[]},{"id":9179035,"text":"<p><i>In the future we might also move our Rails applications over to Sequel, but considering Rails is so tightly coupled to ActiveRecord weâ€™re not entirely sure yet if this is worth the time and effort.</i></p><p>Actually, with modern versions of Rails, using Sequel in place of ActiveRecord isn&#x27;t bad at all. Nothing in Rails is really tied to ActiveRecord anymore. There are dependencies on ActiveModel, but you can easily make Sequel::Model objects conform to this interface. Sequel-rails helps with most of that: <a href=\"https://github.com/TalentBox/sequel-rails\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;TalentBox&#x2F;sequel-rails</a></p><p>It&#x27;s really just the migration that&#x27;s difficult, as that&#x27;s tough to do piecemeal and requires good test coverage.</p><p>Here&#x27;s a recent side project of mine that I switched from ActiveRecord to Sequel pretty quickly once I remembered how extremely limiting the querying capabilities of ActiveRecord can be: <a href=\"https://github.com/bgentry/portfolio-api\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;bgentry&#x2F;portfolio-api</a></p><p>And if you really want to keep the option for schemaless data storage, Postgres can now do that with better performance than MongoDB, while keeping full indexing capabilities: <a href=\"http://blogs.enterprisedb.com/2014/09/24/postgres-outperforms-mongodb-and-ushers-in-new-developer-reality/\" rel=\"nofollow\">http:&#x2F;&#x2F;blogs.enterprisedb.com&#x2F;2014&#x2F;09&#x2F;24&#x2F;postgres-outperform...</a></p>","children":[{"id":9179572,"text":"<p>I&#x27;ve switched about 50% of our internal applications and all of my side projects completely from ActiveRecord to Sequel and it&#x27;s an absolute joy to to work with once it&#x27;s fully migrated.</p><p>The main reason we started using it the first place was composite primary keys (not supported in AR, at all), and we&#x27;ve never looked back!</p>","children":[]},{"id":9180095,"text":"<p>While certainly possible we simply haven&#x27;t really evaluated it yet in depth. In between releasing a bunch of upcoming features and upgrading Rails from 3.2 to 4.2 I&#x27;d rather wait with _also_ moving from ActiveRecord to Sequel for the time being.</p>","children":[{"id":9180913,"text":"<p>yes, by all means upgrade yourself to the latest release of Rails before attempting to go &quot;off the rails&quot; :)</p>","children":[]}]}]},{"id":9180060,"text":"<p>As soon as you have more then 1 app talking to your database its time to either create a common library that talks to your database that can be shared or wrap it in a service. This has nothing to do with NoSQL vs SQL. It has to do with architecture composition.</p><p>Plus your problem with checking if a field exists is because Ruby doesn&#x27;t support property attributes. This is easily solved in C# using attributes.\nWhich you can fake in Ruby.\n<a href=\"http://stackoverflow.com/questions/1085070/how-do-i-fake-c-sharp-style-attributes-in-ruby\" rel=\"nofollow\">http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1085070&#x2F;how-do-i-fake-c-s...</a></p><p>Data consistency is what your models are for. No data should be inserted before being assigned to a model.</p><p>Again it sounds like you needed a shared library or just a service wrapped around your database.</p>","children":[]},{"id":9180575,"text":"<p>There are ever more use cases for which relational data models are a poor fit.</p><p>For everything else, there are relational DBMS.</p>","children":[]},{"id":9179040,"text":"<p>I did a similar migration last year.  Loving postgres.</p>","children":[]},{"id":9179552,"text":"<p>Isn&#x27;t this a little premature to announce a victory? After all, they&#x27;ve been using MongoDB for 5 years and it delivered for most of the time. Who knows if this new shiny SQL thing will be sufficient for next 5 years? I&#x27;d say it&#x27;s quite likely after few rounds of excited development the database will be slow and crappy again ;)</p>","children":[]},{"id":9179560,"text":"<p>I&#x27;ve been thinking of the same changes for a few months.\nWe are running on MongoDB with a few M entries, and around 10GB of data. We use Scala and ReactiveMongo on the application side. So, my main fear is we&#x27;re going to have a lot of overhead when trying to migrate to something like &quot;ReactivePostgres&quot;.</p>","children":[]},{"id":9179313,"text":"<p>while i&#x27;ve not spent much time with the &quot;nosql&quot; products, its mostly because i&#x27;ve decided to stay SQL.  The bottom line is that most humans think of data the same way SQL thinks about data.  When you talk to people outside of engineering (i.e. mgmt or customers), they expect the product to be able to do things that SQL does naturally (normalized data for easy changes to things like &#x27;user name&#x27;, join and sort based on a variety of cross cutting properties, etc).  You can always make both do the same thing eventually, but one will fight you more than the other....</p>","children":[]},{"id":9179058,"text":null,"children":[]},{"id":9179315,"text":"<p>The concept of moving from one database technology to another, especially something like NoSQL to Postgres, sounds like a huge task.</p><p>Aside from redesigning the schema&#x2F;model and changing all the code, what about new backup&#x2F;restore procedures? Scaling and performance best practices? Did you need to hire a postgres expert?</p>","children":[{"id":9179805,"text":"<p>We didn&#x27;t hire any experts, instead we educated ourselves on the matter. For\nexample, one of the first steps we took was to run some rough benchmarks on Pg\nto see how it behaved compared to MySQL (<a href=\"https://github.com/olery/rds-shootout\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;olery&#x2F;rds-shootout</a>). \nFollowed by this was mainly discussing PostgreSQL vs MySQL with those who used\neither one (or both) in production for a somewhat serious workload.</p><p>Backup&#x2F;restoring is handled by Amazon RDS in our case, in the past we had a\ncustom backup system for Mongo that backed data up to Amazon S3.</p>","children":[{"id":9181239,"text":"<p>Will you publish the results of the benchmark?</p>","children":[]}]}]},{"id":9179317,"text":null,"children":[]},{"id":9179832,"text":"<p>A related read, titled Why You Should Never Use MongoDB:\n<a href=\"https://news.ycombinator.com/item?id=6712703\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=6712703</a></p>","children":[]},{"id":9181628,"text":"<p>For some additional thoughts about schemaless vs. schema-enforcing datastores see</p><p><pre><code>  https:&#x2F;&#x2F;gist.github.com&#x2F;neunhoef&#x2F;9b6749089775e472d44c</code></pre></p>","children":[]},{"id":9181887,"text":"<p>I haven&#x27;t used MongoDB in production (the comments regarding reliability have been around for awhile), but playing around with it, I do like the json format and query structure.</p><p>The issue I have with SQL (MS sql in the case of work) is the amount of cleverness involved in some queries I have seen. Among the old timers, it seems almost a badge of honer to develop the longest, most clever SQL query that does everything in one step. Inevitably, there are problems, and people have trouble figuring out why because they can&#x27;t debug parts of the statement in isolation. In this case, it&#x27;s as if they have written an entire program in one line and can&#x27;t test parts in isolation. No doubt this is abuse of the language... and admittedly my SQL skills are not world class, but I keep scratching my head and wondering why they do this to themselves. If a query is so complex you can&#x27;t tell what it is doing, and it misbehaves, perhaps you would have been better off with some smaller queries you join in the program... nothing against joins... one or two or three of them... but really....</p><p>I keep asking myself if I&#x27;m missing something, but I sort of doubt it.</p>","children":[]},{"id":9182664,"text":"<p>Something that I need to call out here. In talking about how to handle the lack of fixed schemas within Mongo, the OP refers to using if&#x2F;else blocks to get around field name changes. This shows a severe lack of understanding of how to work with Mongo at such a fundamental level. If using Mongoid (which he is) you simply need to run `Post.all.rename(title: :post_title)` to do the schema change. This may seem like a nitpick to some people, but honestly if that concept was lost on the developer then its clear that there is little to no credibility to be had in the reporting of all the other Mongo issues.</p><p>I&#x27;m glad that the OP is growing as a developer and starting to understand the merits of SQL and why having defined schemas is important. SQL is awesome and its not going to be replaced by NoSQL (at least not fully). However please make sure that you are building the foundation of your understanding by fully grasping the technologies that you are already using.</p>","children":[]},{"id":9179597,"text":"<p>The author&#x27;s assertion that &quot;Another problem with MySQL is that any table modification (e.g. adding a column) will result in the table being locked for both reading and writing. This means that any operation using such a table will have to wait until the modification has completed.&quot; is no longer correct as of Mysql 5.6:</p><p><a href=\"http://dev.mysql.com/doc/refman/5.7/en/innodb-create-index-overview.html\" rel=\"nofollow\">http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;innodb-create-index-o...</a></p><p>If you specify ALGORITHM=INPLACE,LOCK=NONE you can alter table without blocking reads and writes. We have used this method successfully in Amazon RDS when updating schemas.</p>","children":[{"id":9182018,"text":"<p>Small clarification:</p><p>&gt; If you specify ALGORITHM=INPLACE,LOCK=NONE you can alter table without blocking reads and writes. We have used this method successfully in Amazon RDS when updating schemas.</p><p>The use-case of ALGORITHM=INPLACE and LOCK=NONE is to produce an error if the modification you are attempting is not supported in this mode.  i.e. even if you don&#x27;t specify LOCK=NONE, that doesn&#x27;t mean it will lock.</p><p>This is useful in preventing guessing games (i.e. you think its LOCK=NONE, but for some reason it&#x27;s not compatible...)</p>","children":[]},{"id":9180156,"text":"<p>It&#x27;s not exactly a common operation either, so basing the choice of rdbms on it seems a bit arbitrary.</p>","children":[]}]},{"id":9179086,"text":"<p>As a greying developer I am most amused by people discovering that &#x27;old&#x27; technologies like SQL databases work really well.</p><p>The only useful piece of advice I can give a younger developer is... be careful when drinking the newtech koolaid.</p><p>And one more thing:</p><p><pre><code>    star = Sequel.lit(&#x27;*&#x27;)\n\n    User.select(:locale)\n      .select_append { count(star).as(:amount) }\n      .select_append { ((count(star) &#x2F; sum(count(star)).over) * 100.0).as(:percentage) }\n      .group(:locale)\n      .order(Sequel.desc(:percentage))\n</code></pre>\njust makes me want to cry. Learn SQL rather than wrapping it.</p>","children":[{"id":9180421,"text":"<p>&gt;As a greying developer</p><p>The problem with being a young person who wants to make his or her mark on the world is that if the people before you did an excellent job, you can only make things worse.  In fact, I think this is one of our larger problems not only in technology but in society (see the recent move to extremism in many aspects of our political and religious life the people who grew up under more moderate times are pushing for).</p><p>Some things should be boring and stable. Build on top of those things.  Redoing the foundation every six months is just sub-optimal. Accept that you may not make that big mark in the world, or if you do, it&#x27;ll be in ways you completely did not expect, just like everyone else who made their mark.</p>","children":[{"id":9180571,"text":"<p>I agree with you.\nAlso, we should be developing products that last. And be proud of that. Why does everything always have to be new?</p>","children":[{"id":9181141,"text":"<p>You sound like someone who thinks we thinks we should still be using Cobol and IBM Series mainframes.</p><p>Technology changes. It improves. It gets faster, easier and more responsive to business requirements. If you don&#x27;t embrace change in the IT industry then get out. Because you simply won&#x27;t survive.</p>","children":[{"id":9182069,"text":"<p>That&#x27;s rather going to extremes with what I said. \nSo, no, I don&#x27;t think like that at all.</p>","children":[]},{"id":9181939,"text":"<p><i>Technology changes.</i></p><p>Yes.</p><p><i>It improves.</i></p><p>Sometimes.</p><p><i>It gets faster, easier and more responsive to business requirements.</i></p><p>Occasionally.</p><p>There are a lot of ideas in technology that are widely accepted, particularly by younger, less experienced generations, as being The Best Way to do things. However, if challenged, most of those people don&#x27;t really know <i>why</i> they believe that. They have never personally seen any hard evidence that The Best Way is actually better than known alternatives. They have never spent significant time trying those alternatives for themselves to gain first-hand experience of the pros and cons. In fact, their belief is usually nothing more than a matter of faith, a blind trust in the dogma of the day and the rhetoric they find on-line or hear from their peers or managers.</p><p>See also: OOP, design patterns, UML and round-trip development processes, frameworks, ORMs, XML, dynamically typed languages, more frameworks, TDD, NoSQL databases, and so on, many of which were either invented or popularised as a way to work around the artificial problems created by one or more of the preceding items.</p><p>Of course I&#x27;m being a little facetious here. But if you think I&#x27;m entirely kidding, just spend a few minutes with Google and see how much advocacy there has been for each of those ideas in their day and how much <i>actual data</i> there has ever been to justify that advocacy. And really I&#x27;m being kind here, because you talked about things that are supposedly &quot;faster, easier and more responsive to business requirements&quot; and I didn&#x27;t even mention words like &quot;agile&quot; or &quot;craftsmanship&quot; in my list.</p><p><i>If you don&#x27;t embrace change in the IT industry then get out. Because you simply won&#x27;t survive.</i></p><p>I embrace using the right tool for the job. Whether it&#x27;s new and shiny or old but tried-and-tested doesn&#x27;t really matter, though if I had to pick one or the other for some bizarre reason, I&#x27;d pick tried-and-tested eight days a week. There have been only a few truly significant advances in the past decade or two, but very many technologies that were initially much-hyped but then failed to stand the test of time for exactly the reasons that critics outside the hype bubble had always predicted.</p>","children":[]}]}]}]},{"id":9179665,"text":"<p>It&#x27;s not so much about not wanting to write&#x2F;understand SQL (both are still very\nmuch required), but about composability. If you want to re-use bits of a SQL\nquery written as a string literal your only option is string concatention or\nusing some kind of string builder&#x2F;template system. In both cases there&#x27;s little\nvalidation of the query&#x27;s correctness (syntax wise) until you actually run it.</p><p>While I agree that many ORMs go too far or even worse, not implement certain\npowerful features, Sequel (and similar tools I imagine) strikes a nice balance.\nThe particular examples I gave on their own are not super useful, but we already\nhave quite a few queries that are composed&#x2F;re-used without having to concat\nstrings.</p><p>So tl;dr: it&#x27;s about composability, not being &quot;lazy&quot; or &quot;ignorant&quot; to SQL.</p>","children":[{"id":9179915,"text":"<p>I once agreed with this, but now I don&#x27;t. I just want to write SQL (dammit!).</p><p>I can never, ever remember the intricacies of the Sequel API or any one of these query builder APIs. I am always looking up something that is rather trivial because I am thinking in SQL, the language, and always have to convert back to Ruby or whatever language I am working in.</p><p>CTEs and SQL functions in PostgreSQL strike a good balance in the composibility department for me, while still being able to write SQL.</p>","children":[{"id":9179982,"text":null,"children":[]},{"id":9180032,"text":"<p>Let&#x27;s say you have a product search screen in your application.  There&#x27;s a text field for filtering on product title (WHERE title LIKE), one for filtering on UPC (WHERE upc LIKE), a couple range filters for min&#x2F;max prices (WHERE price &lt;= and&#x2F;or WHERE price &gt;=), and then on the results screen the user sort on a few different columns (ORDER BY) as well as paginate and set number of results per-page (LIMIT + OFFSET).</p><p>How exactly are you going to just write SQL if the actual query statement needs to change based on the user input?  Are you going to hardcode every possible permutation, or are you going to use a query builder?  Or are there some advanced Postgres features that I&#x27;m not aware of that would allow all these combinations in some kind of prepared statement?</p><p>edit: The question I&#x27;m asking is pointed towards the people who are implying that you can &quot;just use SQL&quot; as static statements that are not dynamically assembled. Like a static function or prepared statement that takes some parameters, and at runtime you only pass in those parameters - not rejigger the actual SQL statement fragments.  Your ad-hoc query builder implementations with SQL injection vulnerabilities are not relevant to what I&#x27;m asking.</p>","children":[{"id":9180184,"text":"<p>That can be solved by writing a SQL function and the user input values are arguments to the function.</p>","children":[]},{"id":9180966,"text":"<p>&gt; Or are there some advanced Postgres features that I&#x27;m not aware of that would allow all these combinations in some kind of prepared statement?</p><p>I can&#x27;t speak specifically to Postgres, but, in my experience, there is nearly always a way to do what you want with bound parameters.  No advanced features are required.  It often results in poor performance and redundant code that is hard on the eyes.  You will get what you deserve, but sometimes you don&#x27;t have a choice.</p><p>Here is an example of the horror:</p><p><pre><code>    WHERE (:1 IS NULL OR :1 = item_id)\n      AND item_num BETWEEN NVL(:2,0) AND NVL(:2,9999999999)\n      AND item_date BETWEEN NVL(:3,&#x27;01-jan-1900&#x27;) AND NVL(:3,&#x27;31-dec-4712&#x27;)\n      AND item_name LIKE NVL(:4,&#x27;%&#x27;)\n    ORDER BY\n      CASE :5 WHEN &#x27;NUM&#x27; THEN item_num WHEN &#x27;DATE&#x27; THEN item_date ELSE item_name END,\n      CASE :6 WHEN &#x27;NUM&#x27; THEN item_num WHEN &#x27;DATE&#x27; THEN item_date ELSE item_name END\n\n</code></pre>\nEdit: I suppose you could also parameterize the ascending vs. descending sort, although I have never tried.  My first thought is to duplicate each line in the ORDER BY clause: one bind parameter for ASC and another for DESC.  Have each CASE return a constant if the bound value is NULL, and then bind NULL for the direction you do <i>not</i> want.  Yuck.</p><p>I am not advocating any of this but am pointing out that bind parameters can be abused in surprising ways if you are backed into a corner.</p>","children":[]},{"id":9181481,"text":"<p>Even with PL&#x2F;pgSQL, there is no way to build a SQL statement dynamically _and_ safely -- it&#x27;s all just string concatenation there, too. However, using `CASE`, `WITH` and `LATERAL` you can have a root `SELECT` that returns one of a few different queryable code paths, and `WITH`&#x2F;`LATERAL` allow you to reuse definitions.</p>","children":[{"id":9181714,"text":"<p>Use format() for safely constructing dynamic queries.</p><p><a href=\"http://www.postgresql.org/docs/9.4/static/functions-string.html#FUNCTIONS-STRING-FORMAT\" rel=\"nofollow\">http:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;9.4&#x2F;static&#x2F;functions-string.h...</a></p>","children":[{"id":9181835,"text":"<p>You end up doing a lot of string concatenation even with that, though. It&#x27;s not quite the same thing as having some kind of literal or combinator based setup.</p><p><pre><code>  select(from(&#x27;tab&#x27;), where(and(like(&#x27;name&#x27;,&#x27;Mo%&#x27;),not(is(&#x27;id&#x27;,NULL)))</code></pre></p>","children":[{"id":9182033,"text":"<p>You can get a similar syntax with format() by nesting format() calls such as:</p><p><pre><code>  EXECUTE format(&#x27;SELECT * FROM tab %s&#x27;, format(&#x27;WHERE %I IS NOT NULL&#x27;, &#x27;id&#x27;));</code></pre></p>","children":[]}]}]}]},{"id":9182801,"text":"<p>Answer : Learn SQL. It is very easy to pass variables.</p>","children":[]},{"id":9182312,"text":"<p>Dynamic prepared(NO ADHOC, THIS IS CRAP) TSQL is a common occurrence for me in production, it is often a better choice that writing a bunch of conditional logic in SQL (to get sargeable queries) or a bunch of really unperformant case statements in where clauses.</p><p>I have written TSQL that changes the entire query (which was on the order of 80 joins) dynamically based on about ~20 different parameters, only a few actually passed into the stored procedure, the rest based on settings and configuration. It took a few hours to grok how everything came together at first, but a few tricks that the optimizer will remove means you can add arbitrary conditionals in whatever order you please.</p><p>The example you give is VERY trivial for dynamic SQL.\npostgres - <a href=\"http://www.postgresql.org/docs/9.1/static/ecpg-dynamic.html\" rel=\"nofollow\">http:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;9.1&#x2F;static&#x2F;ecpg-dynamic.html</a>\nmssql - <a href=\"https://msdn.microsoft.com/en-us/library/ms188001.aspx\" rel=\"nofollow\">https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;ms188001.aspx</a></p>","children":[]},{"id":9180784,"text":"<p>I&#x27;ll deal with the problem when I have to.</p><p>However, the point is that I&#x27;d rather use SQL, it&#x27;s simple as that.</p>","children":[]},{"id":9180101,"text":"<p>You might be over thinking this... something like this might work out just fine. (I wouldn&#x27;t necessarily do things this way, but rather keep a list of clauses and join them with &quot; AND &quot; to avoid keeping track of the &quot;WHERE&quot;s and &quot;AND&quot;s, but you get the point...)</p><p><pre><code>    sql = &#x27;SELECT * FROM products&#x27;\n    args = []\n\n    if title:\n        sql += &#x27; WHERE title LIKE %?%&#x27;\n        args.append(title)\n\n    if upc:\n        if args:\n            sql += &#x27; AND&#x27;\n        else:\n            sql += &#x27; WHERE&#x27;\n        sql += &#x27; upc LIKE %?%&#x27; \n        args.append(upc)\n\n    if price_min:\n        if args:\n            sql += &#x27; AND&#x27;\n        else:\n            sql += &#x27; WHERE&#x27;\n        sql += &#x27; price &gt;= ?&#x27;\n        args.append(price_min)\n\n    if price_max:\n        if args:\n            sql += &#x27; AND&#x27;\n        else:\n            sql += &#x27; WHERE&#x27;\n        sql += &#x27; price &lt;= ?&#x27;\n        args.append(price_max)\n\n    if order_by_name:\n        sql += &#x27; ORDER BY name&#x27;\n    elif order_by_price_low:\n        sql += &#x27; ORDER BY price&#x27;\n    elif order_by_price_high:\n        sql += &#x27; ORDER BY price DESC&#x27;\n\n\n    conn.query(sql, args)</code></pre></p>","children":[{"id":9180206,"text":"<p>Now how is this an improvement over the Sequel example?</p><p>I understand the impulse to &quot;Just write SQL.&quot;  But in practice, with all the string concatenation needed to generate actual queries, you can&#x27;t really see what the SQL will be without running all the code in your head anyway.</p>","children":[{"id":9180232,"text":"<p>In practice, I&#x27;d reduce this to a query building function in my own code, so the readability would be much better. The benefit is that you don&#x27;t need to include another library for it to work. Well, that and it is a strategy that works for all languages, not just Ruby.</p>","children":[{"id":9180314,"text":"<p>And the downside is now you need to spend effort maintaing and debugging your custom query builder.</p>","children":[{"id":9180363,"text":"<p>Yeah but a lot of it is quite generic, so could be reused in a few places and therefore make that extra effort worthwhile. In fact, it might be handy in a few places so you could package it up and then have a single place you have to maintain the query building code for several projects.</p><p>Wait a minute...</p>","children":[]},{"id":9181162,"text":"<p>I think you&#x27;re over estimating the amount of effort that I spend on this.</p>","children":[]}]}]}]},{"id":9180549,"text":"<p>I know this isn&#x27;t central to your point, but I thought I&#x27;d say it anyway. These days I have taken to doing:</p><p><pre><code>    sql = &quot;SELECT * FROM products WHERE TRUE&quot;\n    ....\n    if upc:\n        sql += &#x27; AND upc LIKE %?%&#x27;\n        ....\n</code></pre>\nThis saves having to worry about &quot;AND&quot; and &quot;WHERE&quot;, and the extra &quot;WHERE TRUE&quot; results in the same execution plan (thus the same performance).</p>","children":[{"id":9182527,"text":"<p>I also add an extra column to my SELECTS:</p><p><pre><code>  SELECT\n    users.id,\n    users.email,\n    1\n  FROM\n    users\n</code></pre>\nI can just use &quot;--&quot; to comment out any line without having to manage the last comma. Especially useful when building aggregations.</p>","children":[]},{"id":9181671,"text":"<p>Awesome. That&#x27;s such a straight-forward solution to one of the crappy edge-cases that SQL is so bad about (ending lists without commas, like JSON requires too, being another).</p>","children":[]}]},{"id":9180152,"text":"<p>This is a query builder. If you&#x27;re using your programming language to dynamically assemble the SQL statement fragments at runtime, then you&#x27;re using a query builder regardless of if it is a library with a fancy DSL that assembles an in-memory SQL AST or some kind of ad-hoc string concatenation you rolled yourself like this.</p><p>The question I&#x27;m asking is pointed towards the people who are implying that you can &quot;just use SQL&quot; as static statements that are not dynamically assembled.  Like a static function or prepared statement that takes some parameters, and at runtime you only pass in those parameters - not rejigger the actual SQL statement fragments.</p>","children":[{"id":9180221,"text":"<p>Yes, logically, it&#x27;s a query builder. But it&#x27;s one that doesn&#x27;t force any extra dependencies in my project and is very easy to troubleshoot.</p><p>Seriously, how is this different from &quot;just use SQL&quot;. SQL was never really intended to be used by itself (except for manually typing queries into a console). Yes, what I wrote is code that writes code, but it&#x27;s far different from a larger ORM or querying framework.</p>","children":[{"id":9180764,"text":"<p>&gt; SQL was never really intended to be used by itself.</p><p>Hmm I thought that is how it was intended to be used? If it didn&#x27;t, it would look like datalog, lisp or some binary protocol with prefixed lengths and whatnot.</p><p>It was intended to be typed in by analysts at a console. Who would then print the report on the dot matrix printer and mail to the headquarters or something of that sort.</p>","children":[{"id":9181500,"text":"<p>SQL was often combined with Cobol (might still be where they have Cobol).</p>","children":[]},{"id":9181039,"text":"<p>That data has to get into the RDMBS somehow...</p><p>I guess a better wording may have been to say that SQL was never intended to be used in isolation. It <i>can</i> be, but you&#x27;ve always had interfaces to other languages &#x2F; platforms. SQL is a data manipulation and retrieval language - the rest of the business logic has to be performed somewhere else (excepting complex stored procedures).</p>","children":[]}]},{"id":9180261,"text":"<p>Disregarding my edit and how your query builder is irrelevant to my question anyway, if I change the requirement to allow the user to sort by multiple columns instead of one, that case statement is going to either combinatorially explode or you&#x27;ll also have to add some ad-hoc SQL escaping to guard against SQL injection since you can&#x27;t use bound parameters in ORDER BY clauses.</p><p>It&#x27;s easy to see how libraries like Sequel get invented to help people do this, and I don&#x27;t really see what the problem is when the DSL stays close to SQL semantics.</p>","children":[{"id":9181095,"text":"<p>Dealing with multiple ORDER BY clauses isn&#x27;t any more difficult, but you&#x27;d have to figure out how to get the user input into some kind of list. That will require validation too... Just using an ORM doesn&#x27;t let you ignore input validation. You wouldn&#x27;t trust a user to use their own column names in a WHERE clause anymore than you&#x27;d trust them in an ORDER BY clause.</p><p>Trying to differentiate between a DSL that interfaces with SQL and SQL is nonsensical. SQL is the original DSL.</p>","children":[]}]}]}]},{"id":9180155,"text":"<p>I&#x27;ve done this quite a bit as well: string building is pretty well understood, and works remarkably well.</p>","children":[]}]},{"id":9180107,"text":"<p>You&#x27;ve formulated the composibility reasonably in that sentence but it&#x27;s important to remember that is not the only problem the world faces in data manipulation.</p><p>I think the irony is that much of the problems of sql are related to a lack of tooling.</p><p>The lack of tooling is result of large numbers of devs being distracted by ORM which moves that particular problem into the language ide&#x2F;editor.</p><p>Essentially we lack great *.sql editing, ide, macro, refactoring because of the lack of focus on sql itself.</p><p>edit: as an aside, string concatenation in the language of choice is its own road to hell.</p>","children":[{"id":9180737,"text":"<p>&gt; Essentially we lack great *.sql editing, ide, macro, refactoring because of the lack of focus on sql itself.</p><p>Except that my other tools are just an editor like emacs and makefiles. So now to be productive I have to have and ide for sql, learn sql, learn macros.</p><p>Interesting that SQL came first. If it was so easy and obvious to use it we would not have seen any ORMs by now. But every other project that uses SQL databases ends up with some kind of ORM.</p><p>One of the reason is probably because there is an impedance mismatch. Code is already written dealing with objects, functions, pointers, data. But when it talks to the database it has to talk via a command line string interface so to speak.</p><p>There is another type of impedance mismatch and that is learning a new language. One can argue SQL is there to keep &amp; manipulate the most precious things you have -- data, so one should spend time learning it well. But the other point is, SQL is there to keep &amp; manipulate the most precious things you -- data, so don&#x27;t mess with it if you don&#x27;t know SQL very well. Let someone else learn it (the author of the ORM).</p><p>I am not arguing for one point or the other, just kind saying how it is interesting how we have been going in a circle the last 15 years or so.</p>","children":[{"id":9180833,"text":"<p>I also use emacs(evil-mode actually). An ide is not much different then a fully configured vim or emacs.</p><p>sql-mode for some databases(mysql and oracle iirc) reads the DDL of the tables you are typing about, why is this not better and more general?</p><p>Sql is so well established and general as a solution that not learning it is a poor choice.</p>","children":[]}]},{"id":9180745,"text":"<p>You mean something like this?  <a href=\"https://www.jetbrains.com/dbe/\" rel=\"nofollow\">https:&#x2F;&#x2F;www.jetbrains.com&#x2F;dbe&#x2F;</a></p>","children":[{"id":9181335,"text":"<p>Yes that was in my mind as I was typing it actually :)</p><p>Notice that its only a yearish old I think?</p>","children":[{"id":9182217,"text":"<p>The IntelliJ IDEA Database plugin [1] on which 0xDBE is based on has existed for quite a while.  I&#x27;m not sure when it become very useful as I&#x27;ve only used it for a few years, but it is quite powerful and useful.</p><p>The SQL code completion is quite good (and it caches your entire database schema so it is very quick).  That&#x27;s not particularly special on it&#x27;s own, but what makes this especially useful is IDEA&#x27;s &quot;language injection&quot; [2] feature.  This allows you to, for example, get completion for SQL when it is contained in some other language, which could be anything (e.g. a Java String, Ruby String, XML, etc).  It will also analyze and report errors in this SQL on the fly.</p><p>And SQL statements contained in concatenated strings are no longer a problem because you can edit those in a separate editor window where you are only editing the SQL, and it automatically gets placed into the concatenated string.</p><p>Not sure if it addresses all of your specific concerns, though.</p><p>[1] <a href=\"https://www.jetbrains.com/idea/features/database_tools.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;features&#x2F;database_tools.html</a></p><p>[2] <a href=\"https://www.jetbrains.com/idea/help/using-language-injections.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;help&#x2F;using-language-injection...</a></p>","children":[]}]}]},{"id":9180819,"text":"<p>I am rather fond of Sqitch and pgTAP as tools for database development.</p>","children":[{"id":9181321,"text":"<p>Sqitch problem domain I handle a different way.</p><p>Pgtap is on my list of things to poke around with.</p><p>edit: thanks btw</p>","children":[]}]}]},{"id":9180369,"text":"<p>I would write a SQL function that takes all of those as optional parameters and includes a lot of these:</p><p><pre><code>    WHERE (_title    IS NULL OR title LIKE _title)\n    AND   (_minPrice IS NULL OR price &gt; _minPrice)\n    AND   (_maxPrice IS NULL OR price &lt; _maxPrice)</code></pre></p>","children":[{"id":9180952,"text":"<p>That ends up being very inefficient as the optimizer will come up with one mediocre plan that works for all those criteria.</p>","children":[]},{"id":9180876,"text":"<p>This actually answers the question, although I would imagine the ORDER BY handling will look pretty messy (CASE statement perhaps?).</p><p>And I don&#x27;t know what it would look like if the requirements changed to allow ordering by multiple columns with different possible sort directions... that might get back into dynamic SQL using a RETURN QUERY EXECUTE type of thing, which is basically using a query builder in your query language.</p>","children":[]}]},{"id":9180128,"text":"<p><i>How exactly are you going to &quot;just write SQL&quot; if the actual query statement needs to change based on the user input?</i></p><p>How about something like this:</p><p><pre><code>  s = Select.new\n  s.add &quot;WHERE title LIKE #{title}&quot; if title\n  s.add &quot;WHERE price &lt;= #{price_range}&quot; if price_range\n  s.add &quot;LIMIT #{limit}&quot; if limit\n  s.add &quot;OFFSET #{offset}&quot; if offset\n  s.add &quot;id, blah, boo FROM products&quot;\n  s.execute\n</code></pre>\nNote how I deliberately shuffled the order and didn&#x27;t bother with escaping.</p><p>Also note how anyone who knows SQL could immediately work with this, learning curve: 5 seconds.</p><p>Why is there no ORM that works like this?</p>","children":[{"id":9181193,"text":"<p>&gt; Why is there no ORM that works like this?</p><p>Because you&#x27;re only showing a query builder, the &quot;relational&quot; not the &quot;object mapper&quot;.</p><p>From an OOD point of view, if the end result of that query will be Product instances, why am I using a Select object to create them and why is it having to do some sort of string parsing to determine the objects I&#x27;m loading?</p>","children":[{"id":9181292,"text":"<p><i>if the end result of that query will be Product instances, why am I using a Select object to create them</i></p><p>Because we can just infer the type to be returned via the FROM-clause of the query.</p><p><i>and why is it having to do some sort of string parsing to determine the objects I&#x27;m loading?</i></p><p>Because, to cite the immortal Larry Wall:</p><p><pre><code>   The computer should be doing the hard work.\n   That&#x27;s what it&#x27;s paid to do, after all.\n   -- Larry Wall\n</code></pre>\nIt has to do the string parsing, escaping and intelligent validation so I, the human, can write</p><p><pre><code>   s.add &quot;count(*) &#x2F; sum(count(*)) * 100 as percentage&quot;\n</code></pre>\ninstead of</p><p><pre><code>  .select_append { ((count(star) &#x2F; sum(count(star)).over) * 100.0).as(:percentage) }\n</code></pre>\nThe difference is that most people can read <i>and write</i> the former without thinking.</p><p>The latter version may not look much more complicated at a glance. But as we all know these seemingly trivial fragments,  more often than not, take ungodly amounts of very frustrating trial &amp; error before they play along.</p>","children":[]}]},{"id":9181453,"text":"<p>&gt; Why is there no ORM that works like this?</p><p>Because no one wants to write a SQL fragment parser. You would have write a parser that:</p><p>a) Could be started at an arbitrary place in a query and figure out what it needed to do.</p><p>b) Would be SQL-dialect aware. (Maybe -- it might be possible to skip this.)</p><p>Were it not for (a), I&#x27;d imagine you could quickly build this by using some kind of debug feature of the database -- sending it a query to parse and getting back a parse tree.</p>","children":[]},{"id":9181467,"text":"<p>Micro ORMs usually works very much like this. There is a problem when you want sub records, they are handled differently in each library or not handled at all.</p>","children":[]},{"id":9180710,"text":"<p>What you&#x27;re describing isn&#x27;t an ORM, it&#x27;s a SQL query abstraction.</p><p>Knex is a very convenient, Promise-oriented query abstraction, and it has &quot;raw&quot; methods when only SQL snippets will do. <a href=\"http://knexjs.org/\" rel=\"nofollow\">http:&#x2F;&#x2F;knexjs.org&#x2F;</a></p>","children":[]},{"id":9180973,"text":"<p>Generally I&#x27;ll go with something like this for these conditional search based queries</p><p><pre><code>    select id, blah, boo\n    from products\n    where 1\n    and (title like :title} or if(:title = &#x27;&#x27;, false, true))\n    and (price &lt;= :price_range or if(:price_range = -1, false, true) \n    limit :limit\n    offset :offset\n    </code></pre>\nIts a trade off, bit of extra complexity in the query for simpler code logic. Really, I avoid using sql for these types of &quot;search&quot; &#x2F; find methods, they&#x27;re probably going to be slow as hell as soon as you get a sizable data set.</p><p>I really despise orm&#x27;s its essentially taking a black box (sql&#x2F;database) and throwing it inside a much less tested, less optimized, less documented black box.</p><p>For what reason, I have no idea, nobody has ever been able to convince me there is a problem that needs solving. Almost every argument i&#x27;ve heard amounts to problems sql already solved a decade ago. I can only speculate but I&#x27;ll hazard a guess it comes down to lack of enthusiasm to really learn sql properly (even though the person uses it &#x2F; debugs it daily)</p>","children":[]},{"id":9180251,"text":"<p>There is. MyBatis, which is a minimal ORM that aims to keep you as close to SQL as possible, has support for dynamic SQL: <a href=\"https://mybatis.github.io/mybatis-3/dynamic-sql.html\" rel=\"nofollow\">https:&#x2F;&#x2F;mybatis.github.io&#x2F;mybatis-3&#x2F;dynamic-sql.html</a></p><p>Edit [responding to moe, below]: that&#x27;s a matter of taste. I prefer to have my SQL _outside_ my code. If I have to write a little XML to make it happen, so be it. Additionally, unlike your example, a strict separation of SQL and data ensures SQL injection is not possible. That&#x27;s also a worthy goal.</p>","children":[{"id":9180286,"text":"<p><i>MyBatis</i></p><p>Does MyBatis have an API similar to what I outlined above?</p><p>Because the page that you link to shows a horror that I can&#x27;t even begin to describe:</p><p><pre><code>  &lt;select id=&quot;findActiveBlogWithTitleLike&quot;\n       resultType=&quot;Blog&quot;&gt;\n    SELECT * FROM BLOG\n    WHERE state = â€˜ACTIVEâ€™\n    &lt;if test=&quot;title != null&quot;&gt;\n      AND title like #{title}\n    &lt;&#x2F;if&gt;\n  &lt;&#x2F;select&gt;\n</code></pre>\nSQL mixed with proprietary XML soup?\nTalk about combining the worst from all worlds...</p>","children":[{"id":9180791,"text":"<p>Get rid of the XML and you have a good start, I&#x27;d say.</p>","children":[]}]}]},{"id":9180280,"text":"<p>Python SQLAlchemy works a bit like this, if you use it that way:</p><p><pre><code>    query = session.query(Products)\n\n    if limit:\n        query = query.limit(limit_val)\n\n    if offset:\n        query = query.offset(offset_val)\n</code></pre>\nSort is a bit tricky, but as I&#x27;m a noob at SQL Alchemy, I had some not-so-pretty boilerplate code implemented for decorating queries with custom sorts. But essentially it boiled down to:</p><p><pre><code>    if sort_type == SORT_REVERSE_CONST:\n         sort_obj = sort_obj.desc()\n    else:\n         sort_obj = sort_obj.asc()\n\n    query = query.order_by(sort_obj)\n</code></pre>\nAnd if you want to search through dynamic tables, change the initial query instantiation to something along these lines:</p><p><pre><code>    query = session.query(retrieve_db_object(table_name))\n</code></pre>\nAnd to execute:</p><p><pre><code>    return query.all()</code></pre></p>","children":[{"id":9180387,"text":"<p><i>Python SQLAlchemy works a bit like this</i></p><p>All ORMs work &quot;a bit like this&quot;. I don&#x27;t want &quot;a bit like this&quot;. I want <i>exactly</i> like this.</p><p>Because with my proposed interface I could be productive immediately and permanently. I would never have to refer to any documentation. Not once.</p><p>With every other ORM this is a pipe dream. Their &quot;fancy&quot; chainable wrapper-APIs are nothing but a ball on a chain.</p>","children":[{"id":9180724,"text":"<p>Good news!  Almost every language offers some sort of string concatenation with no protection whatsoever against injection, which seems to be what you&#x27;re asking for.</p>","children":[{"id":9181040,"text":"<p>His proposal is not string concatenation, and it is not vulnerable to injection.</p>","children":[{"id":9181123,"text":"<p>&quot;WHERE price &lt;= #{price_range}&quot; looks like raw interpolation to me. How do you make that not vulnerable to injection unless you&#x27;re escaping all variables that might be used in a query?</p>","children":[{"id":9181393,"text":"<p><i>How do you make that not vulnerable to injection unless you&#x27;re escaping all variables that might be used in a query?</i></p><p>It was just a mockup. But you are right, in reality it would end up looking more like this (and use custom interpolation for escaping):</p><p><pre><code>   s.add &quot;WHERE foo &gt; $(bar)&quot;\n</code></pre>\nLikewise a smart syntax for clause combining (AND&#x2F;OR) and some kind of nesting would <i>probably</i> be needed.</p><p>I believe both of these problems should be solvable without compromising the simplicity of the approach.</p>","children":[{"id":9182102,"text":"<p>Or you could just use Sequel and not have to build up your own library.</p>","children":[]}]},{"id":9181160,"text":"<p>It&#x27;s pseudocode for an implementation that doesn&#x27;t exist. There is nothing in his proposal that requires this hypothetical implementation to copy the value of the price_range variable into the string at all, much less unescaped.</p><p>The strings don&#x27;t even have to be sent to the DB at all. You&#x27;ve utterly missed his point. He wants the language to be intelligent about what the SQL means and do the right thing.</p><p>It&#x27;s not raw SQL, it&#x27;s an abstraction.</p>","children":[]}]}]}]},{"id":9180831,"text":"<p>Well, no, they&#x27;re more than a &quot;ball on a chain&quot; - they&#x27;re a tradeoff - like everything in software.</p><p>They give you the ability to manipulate the query in interesting ways at any point before you execute it. They let you join different queries together, built by different parts of the system, in a safe way. They let you work with the <i>native language you&#x27;re working in</i> instead of having to construct clauses in a foreign language, using strings. They let you post optimise your loading strategies.</p><p>You might want &quot;exactly like that&quot;, but it&#x27;s not going to be as flexible as a chainable wrapper system.</p><p>Hell, I could probably give you pretty close to that in python with a little work, but it&#x27;s not something I&#x27;d want to use myself.</p><p>I get it. I like working in SQL too. I know it really really well, and I cringe when I see developers writing totally sub-optimal code because they don&#x27;t understand the relational data model.</p><p>But there are other ways to do things, and what you&#x27;re describing doesn&#x27;t give you much more than raw SQL, so why not just use raw SQL? You&#x27;ve added some syntactic sugar that, in my language (Python), would be a bit of a horror show (strings access local variables implicitly, no thanks). What else do you gain?</p><p>This is more verbose, granted:</p><p><pre><code>    q = session.query(Products)\n    if title:\n        q = q.filter(Products.title.like(title))\n    if price_range:\n        q = q.filter(Products.price.lte(price_range))\n    if offset:\n        q = q.offset(offset)\n    if limit:\n        q = q.limit(limit)\n    products = q.all()\n</code></pre>\nBut then you get more stuff for free, like drilling down into the other tables:</p><p><pre><code>    p = products[0]\n    p.supplier.contracts[0]\n</code></pre>\nBut that&#x27;s rubbish, because you&#x27;ll be loading in a really inefficient way. That&#x27;s ok though, tell the system how you&#x27;re going to want to load the additional data.</p><p><pre><code>    q = q.options(\n        joinedload(&#x27;supplier&#x27;).\n        subqueryload(&#x27;contracts&#x27;)\n    )\n</code></pre>\nSee what I got with my &quot;ball and chain&quot;? Turns out it was actually the anchor for the whole boat. Sure, you have to learn a new syntax, sure, it&#x27;s not sql, but that doesn&#x27;t make it <i>bad</i> or <i>wrong</i>.</p><p>Use whatever makes sense for your use-case. Don&#x27;t limit yourself because you&#x27;d have to learn something new. Honestly, before using SQLAlchemy I mostly felt the same as you do. Many ORMs get in the way, but that&#x27;s not really a problem <i>intrinsic</i> to ORMs.</p>","children":[]}]}]},{"id":9180344,"text":"<p>Microsoft&#x27;s Entity Framework and LINQ work pretty much like that, only with nice IDE support.</p><p>I&#x27;ll try to write an example like that when I get home.</p><p>Of course, they&#x27;re not &quot;just SQL&quot;, and I do understand where the above comments come from.</p><p>And yes, sometimes I have to go look up how to do things I&#x27;d do trivially on SQL.</p>","children":[]}]},{"id":9180142,"text":"<p></p><p><pre><code>    query = sprintf(&quot;select count(*) from data where %s = ?&quot;, column)\n    results = sql.execute(query, filter_value);\n</code></pre>\nSo long as you leave the &quot;value&quot; portion of the query as a &#x27;?&#x27; (or %s, or whatever your connector requires) and don&#x27;t use direct user input for the column names, you&#x27;re still safe from SQL injection.</p>","children":[]}]},{"id":9180901,"text":"<p>Orms are not about syntax, they&#x27;re about things you can&#x27;t natively &quot;think about&quot; in SQL, like inheritance, composition, references and graph navigation</p>","children":[]}]},{"id":9180951,"text":null,"children":[]},{"id":9180465,"text":"<p>The composability requirement only justifies itself when... your queries need composability.</p><p>I&#x27;m absolutely in favour of using a query builder when it avoids the need to fiddle with strings, but at the same time any decent programmer can write in half a day a query builder that satisfies the vast majority of the use cases.</p><p>So the question is: once you have covered those cases, do you need to use the query builder to write static queries? No. Do you need an extremely complex query builder to build extremely complex queries? Again, no. SQL is great for writing very readable and optimized static queries, which are almost all the SQL queries you need when you&#x27;re not dealing with search forms.</p><p>Bottom line: use your favourite query builder or write a tiny one, but use it only when the resulting code is simpler than the plain SQL + string joining.</p>","children":[{"id":9180475,"text":"<p>We already have quite a bunch of query fragments we use to compose bigger queries, so I&#x27;d say in those cases it&#x27;s more than justified.</p>","children":[]}]},{"id":9181551,"text":"<p>&gt; So tl;dr: it&#x27;s about composability, not being &quot;lazy&quot; or &quot;ignorant&quot; to SQL.</p><p>If you want composability you should factor the common sql fragments out to parameterized views (table valued functions), or just regular views. Doing this across a large project can really improve performance as well.</p>","children":[]},{"id":9181057,"text":"<p>I agree with this 100%. SQL works incredibly well for purely declarive, relatively simple operations. However, the moment you start doing &quot;Do this, then that, then that&quot;, it starts to look (literally the appearance) daunting.</p><p>I myself come from the R&#x2F;Python background, and my hypothesis is this difficulty around composability (especially for dplyr&#x2F;pandas crowd) is what deters data scientists from writing more SQL.</p>","children":[]},{"id":9180048,"text":"<p>How often do you <i>really</i> reuse bits of a SQL query? SQL is the language that an ORM will generate. The question is, how much work is done to avoid using SQL and is it worth it?</p><p>The only time that I&#x27;ve found ORMs useful for composing queries when I have to dynamically create a query at runtime based upon user input. And even in that case, today, I&#x27;d probably still just concatenate strings for a proper SQL statement.</p>","children":[{"id":9180448,"text":"<p>With Sequel I reuse bits all the time, because you can generally very easily chain statements that return dataset&#x27;s until you force evaluation of the query.</p>","children":[]},{"id":9181522,"text":"<p>It happens a lot for me. Basically you have to choose between copy-pasting a lot of sql code or trying to reuse parts when the business logic has multiple cases that are similar but not exactly equal.</p>","children":[]},{"id":9180501,"text":"<p>I use this a lot for report-builder interfaces, and according to my personal experience SQLAlchemy in Python maps really well to raw SQL while adding a lot in terms of DRY, portability and security.</p><p>I guess the underlying question is how much your development style involves meta-programming (and how much someone enjoy reinventing the wheel with their own query builder engine instead of trusting a mature ORM).</p>","children":[]}]},{"id":9180141,"text":"<p>I&#x27;d argue it&#x27;s less about composability, and more about laziness (in the computational sense). As pointed out elsewhere, if you have all of the information needed to generate a dynamic query, it&#x27;s often not a huge leap from an ORM to composing strings (especially given how relatively flexible SQL syntax can be).</p><p><i>However</i>, sometimes I want one part of my program to be responsible for one bit of a query, and a separate piece to be responsible for something else. To take a trivial example, say I want one object&#x2F;function to be responsible for doing the right sorting, another to be responsible for any pagination, and yet another to be able to group results when needed. In that case, having a programmatic abstraction over a query (whether it be an object or a datatype, doesn&#x27;t matter) can be very useful.</p>","children":[{"id":9180541,"text":"<p>I agree with you example, <i>in that case</i> it is useful. It&#x27;s just that it is a pain in the ass in so many other cases.</p><p>I always wonder why developers (usually young and enthusiastic ones...) pick a set of the most challenging requirements they can think of and then use them to justify the usage of some library or pattern that makes life a nightmare in the simpler cases, which are obviously the majority of the use cases.</p><p>It&#x27;s like using a tank for going to work, because the roads might <i>possibly</i> have been destroyed and there <i>might be</i> enemies shooting at you. Then ending up destroying and having to rebuild your own garage because the tank is too big to fit in. Complete nonsense.</p>","children":[{"id":9180703,"text":"<p>&gt; I agree with you example, in that case it is useful. It&#x27;s just that it is a pain in the ass in so many other cases.</p><p>It&#x27;s a pain, because what we really want in such cases is a datatype server, not a relational database. For all of SQL&#x27;s merits, the NoSQL backlash was not without cause. For too long the SQL hammer has been wielded to pound in too many screws.</p><p>Of course, programmers being programmers, NoSQL turned into just another hammer used in just as many inappropriate situations. The example I outlined is not a theoretical one. I&#x27;ve dealt with such situations...but I&#x27;ve done so with Datomic, which is designed with datatype-composability in mind. Similarly, I&#x27;ve found a healthy mix of SQL, Redis, memcache, and Datomic all in moderation can go a long way.</p><p>...but I&#x27;ve still not found a solution where Mongo is the obvious answer.</p>","children":[]},{"id":9180978,"text":"<p>The biggest challenge is to understand and find the simplest case and deal with the hard cases when they happen. I had to learn this over time.</p>","children":[]}]}]},{"id":9180149,"text":"<p>Here&#x27;s an example in C#. Imagine you&#x27;re querying a database of products (here represented by integers). Users can enter filter parameters - you want to build your query dynamically based upon what they enter. With LINQ, you can do this kind of composing with no effort. You also get to run the same code on any kind of Queryable, so if you feel like doing some of the work in RAM and some using a DB, your query is usually going to be very similar, if not the same.</p><p>Yes, you still have to understand what you&#x27;re querying against and how you should build your queries to make best use, but I&#x27;d much rather write this kind of code than try to concatenate SQL.</p><p><pre><code>  IQueryable&lt;int&gt; Source()\n  {\n    return Enumerable.Range(0, int.MaxValue).AsQueryable();\n  }\n\n  class UserFilter\n  {\n    public bool? EvensOnly { get; set; }\n    public int? Minimum { get; set; }\n    public int? Maximum { get; set; }\n  }\n\n  IEnumerable&lt;int&gt; Search(IQueryable&lt;int&gt; source, int currentPage, int pageSize, UserFilter filter)\n  {\n    var result = source;\n\n    if (filter.EvensOnly.HasValue &amp;&amp; filter.EvensOnly.Value)\n    {\n      result = result.Where(i =&gt; i % 2 == 0);\n    }\n\t\t\n    if (filter.Minimum.HasValue)\n    {\n      result = result.Where(i =&gt; i &gt;= filter.Minimum.Value);\n    }\n\t\t\n    if (filter.Maximum.HasValue)\n    {\n      result = result.Where(i =&gt; i &lt;= filter.Maximum.Value);\n    }\n\t\t\n    return result.Skip(currentPage * pageSize).Take(pageSize);\n  }\n\t\n  void Main()\n  {\n    var currentPage = 4;\n    var pageSize = 5;\n\t\t\n    var filter = new UserFilter {\n      EvensOnly = true,\n      Minimum = 1000\n    };\n\t\t\n    var searchResults = Search(Source(), currentPage, pageSize, filter);\n  }</code></pre></p>","children":[{"id":9181201,"text":"<p>Works great until you need some feature that is only implemented in SQL and in my experience that&#x27;s unfortunately about 30% of the time.</p>","children":[]},{"id":9180834,"text":"<p>FYI, you can also write it this way, although you may find it less readable, it emits the exactly same query to the DB, and I personally find it much more pleasing;</p><p><pre><code>  IEnumerable&lt;int&gt; Search(...) {\n     return result\n        .Where(i =&gt; !f.EvensOnly        || i % 2 == 0)\n        .Where(i =&gt; !f.Minimum.HasValue || i &gt;= f.Minimum)\n        .Where(i =&gt; !f.Maximum.HasValue || i &lt;= f.Maximum)\n        .Skip(currentPage * pageSize).Take(pageSize); \n  }\n</code></pre>\nNit: EvensOnly should not be nullable since it has only two states.</p>","children":[]}]}]},{"id":9179156,"text":"<p>Sequel is the best ORM I&#x27;ve ever seen or used, but that is (probably IMO) not a good application of it.</p><p>It gives you total choice over what level of abstraction you want, so this is a particularly egregious use of it, being as nothing about that query is dynamic :)</p><p>You can use it purely to execute handwritten SQL queries loaded from files, or stored procedures, or any level of abstraction between raw SQL and the monstrosity you posted. The model layer is totally optional and is built cleanly <i>on top</i> of the query&#x2F;relational layer, not <i>inside</i> of it.</p><p>The thing is a fucking work of art to be honest. The design shows impeccable taste, ruby&#x27;s more exotic features are deployed only when really needed, everything is so clear, especially if youre used to activerecord.</p><p>BTW also the developer is super helpful and pops up everywhere to answer questions.</p>","children":[{"id":9179416,"text":"<p>jeremy is incredible.  he is more helpful and available (and certainly more knowledgeable) than most paid support people for premium products.</p><p>if you are learning sequel, stop by the irc channel and he&#x27;ll probably answer your question.</p>","children":[{"id":9179460,"text":"<p>seriously the man is a hero. I owe him about a brewerys worth of drinks.</p><p>EDIT: I just went to look at the github: 1821 stars, zero issues. And yes, github is the projects official bug tracker. There are 662 closed issues.</p><p>I must see if I can arrange for work to send him some money...</p>","children":[{"id":9180881,"text":"<p>Or a brewery!</p>","children":[]}]}]}]},{"id":9179423,"text":"<p><i>sigh</i></p><p>Not this argument again. I&#x27;m all for learning SQL (just like one should always learn foundational concepts), but for some reason there&#x27;s this notion popping up that Real Programmers use Raw SQL, just like 20 years ago Real Programmers used Assembly. For the love of God, stop hating on basic software engineering principles like code-reuse and allow us to move up the abstraction hierarchy like we do in literally every  other facet of software development. Here&#x27;s a comment I made on the issue of ORMs vs Raw SQL a while back that goes into more detail: <a href=\"https://news.ycombinator.com/item?id=8134205\" rel=\"nofollow\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=8134205</a></p><p>In the past year I&#x27;ve also grown very fond of type safety within my ORM coding as well, something that&#x27;s hard to achieve at compile time with just raw SQL.</p>","children":[]},{"id":9179430,"text":"<p>I may just be rehashing sibling arguments here, but to me that particular API looks very much what I think an SQL-wrapping library ought to be: a replacement for string concatenation and something that allows you to treat SQL queries as data. I don&#x27;t know anything about Sequel, but that example still feels close enough to SQL.</p><p>My experience with ORMs has been that I eventually end up regretting using one if I try to model my data as objects because with ORMs it&#x27;s easy to code yourself into a corner where you end up wishing that your design supported the relational model instead.</p><p>I do understand the desire for a good ORM, though. SQL is extremely powerful and a well-designed database is a joy to work with, but a sequence of tuples is often not the most convenient datastructure to process in most programming languages.</p>","children":[{"id":9179840,"text":"<p>In my experience, it&#x27;s great to start with ORMs, and they help you go really fast, but if the project is important then sooner or later you&#x27;re going to find a case where you need to go around it and write custom SQL (probably for performance reasons).</p><p>And that&#x27;s fine, but it does mean that you should pick an ORM that plays nicely with that workflow (or otherwise design your ORM to be compatible with it). Back when I was working with Perl I found that you could do some pretty good stuff with RoseDB -- it could load objects from your custom queries and they&#x27;d still work like normal ORM objects (i.e. you can load related objects from them). I&#x27;ve missed that capability on several occasions since.</p>","children":[]}]},{"id":9182508,"text":null,"children":[]},{"id":9179182,"text":"<p>I use Entity Framework as an ORM and I have to say I like it.  As much as there have been a lot of false-starts related to trying to reinvent SQL, I think Entity Framework hits many of the right notes for me:</p><p>1) All my code lives in Visual Studio with compile-time type-checking.  No maintaining stored procedures outside of my main codebase, no mucking about with strings.  And because Entity Framework puts the Select <i>after</i> the From clause, I even get good intellisense on column-names.</p><p>2) I can quickly shift code into being in-memory queries from database queries.</p><p>3) While it&#x27;s a little muddy mixing SQL and C#, there are places where C#&#x2F;EF&#x27;s syntax is so much more brief and clean since it&#x27;s hyper-aware of relationships.  For example, instead of writing 2 joins to get the country of a user, I can say User.Centre.Country.</p><p>Of course, the Entity Framework is adding a layer of complexity to my work - you still have to know what&#x27;s going on in SQL, and that mental overhead is a downside.  But it pays off.</p><p>SQL is a brilliant language, and that&#x27;s why it&#x27;s stood the test of time in spite of its advanced age.</p><p>But seriously, it has a lot of bad flaws - it&#x27;s often difficult to make reusable components in SQL like you can in other platforms.</p><p>The underlying relational algebra is brilliant.  That&#x27;s why I like ORMs - they admit that SQL is ideologically beautiful, but the SQL language itself could use some loving.</p>","children":[{"id":9179733,"text":"<p>I like EF well enough but if you don&#x27;t know what you&#x27;re doing it definitely makes it very easy to write code that works but runs really slowly when n is bigger than like, 10.</p>","children":[]},{"id":9179222,"text":"<p>Yes. I pretty much agree with you and am happy for people to use ORMs (or raw SQL if that&#x27;s their thing and they are into maintaining it). It&#x27;s actually the underlying &#x27;throw away all this old SQL database stuff&#x27; that is the biggest loss for people because they miss out on the power and optimization that&#x27;s gone into those databases.</p>","children":[{"id":9179422,"text":"<p>But doesn&#x27;t the Sequel snippet just write SQL as Ruby and get Ruby objects out? It&#x27;s still pretty raw SQL, just not SQL-as-embedded-strings-guess-the-syntax-error. And surely it&#x27;s easier to extract, compose or otherwise manipulate reified queries than by concatenating floating bits of strings.</p>","children":[{"id":9179756,"text":"<p>When writing raw SQL, I tend to test my queries against the database first with sample queries, then carry them into code once all the logic has been figured out.</p>","children":[]},{"id":9180603,"text":"<p>Yep, even better imo is that when you run a query it outputs the generated SQL. Often I&#x27;ll have a psql console open next to vim while creating Sequel queries and just copy this output over to verify the generated SQL does what I expect.</p>","children":[]}]},{"id":9179801,"text":"<p>I will just say that no one should have inline SQL in their code.  For security&#x27;s sake, use a parameterized query!</p>","children":[]}]},{"id":9179248,"text":"<p>Entity Framework still generates pretty crappy looking SQL. It&#x27;s nice to get a project going, but every time I try to look at why we are having performance issues in production and see the horrible query EF is generating I cry.</p>","children":[{"id":9179752,"text":"<p>Don&#x27;t try to read the generated SQL.  Debug the query plan directly.</p>","children":[{"id":9180467,"text":null,"children":[]}]},{"id":9179762,"text":"<p>Yes, but using projections and generally avoiding descending deep down object graphs for queries of multiple objects generally yields acceptable performance.</p>","children":[]},{"id":9179339,"text":"<p>While I agree the SQL it produces looks ugly, performance wise I haven&#x27;t found too many issues (using EF 5 then 6). The few cases where it produced legitimately bad SQL (slow), was due to the developer failing to grasp how queries are built (in particular abusing &quot;in&quot; and having multiple layers of selects instead of just a flat query which could have done the same thing).</p><p>I will say EF requires extra training&#x2F;knowledge. So it isn&#x27;t a &quot;free&quot; framework. However being able to migrate your entire code base from one database to another only changing a single annotation in the Code First classes is pretty nice. As is being able to generate your databases via the initialisers.</p><p>Is it for every project? No. However for &quot;classical&quot; database projects where you&#x27;re going to be writing a bunch of CRUD and shoving it into C# classes, it is very helpful.</p>","children":[{"id":9179698,"text":"<p>No-one ever migrates their db unless they really are in some sort of serious shit. I&#x27;ll also guess you&#x27;ve never done it because the EF + MySQL = a world of pain. MySQL does not like nested queries, the EF uses them like they&#x27;re crack, one of the reasons the SQL it produces is so hard to read. I&#x27;d guess that the EF + [any db that&#x27;s not MS SQL] probably suffers from similar &quot;holy shit why did the DB just die, oh it&#x27;s the EF&quot; problem.</p><p>I&#x27;m also guessing John&#x27;s problem with that query is that it&#x27;s a simple aggregate query in SQL, there&#x27;s no good reason to use the ORM, mainly because you have no idea what convoluted SQL it&#x27;s going to spit out. There&#x27;s only downsides with no upsides.</p>","children":[{"id":9179870,"text":"<p>&gt; No-one ever migrates their db unless they really are in some sort of serious shit.</p><p>I&#x27;ve been involved in several migrations. All of which were planned over years in some cases. There was no &quot;serious shit&quot; at any point in the process.</p><p>One popular reason for migrations is licensing costs (e.g. escaping Oracle or IBM), or due to mergers where the other company had a different database system and they wanted to consolidate both technology but also expertise.</p><p>&gt; I&#x27;ll also guess you&#x27;ve never done it because the EF + MySQL = a world of pain.</p><p>I&#x27;ve never done what? I&#x27;ve never done EF with MySQL. I never claimed I did however.</p><p>I&#x27;ve used EF with other database systems including Oracle 11g, MS SQL (several), and other integrated it with some smaller database systems that had EF providers available.</p><p>&gt; MySQL does not like nested queries, the EF uses them like they&#x27;re crack, one of the reasons the SQL it produces is so hard to read.</p><p>You, the developer, formulate the queries. If you&#x27;re seeing excess nesting then examine how you&#x27;re doing things.</p><p>&gt; I&#x27;d guess that the EF + [any db that&#x27;s not MS SQL] probably suffers from similar &quot;holy shit why did the DB just die, oh it&#x27;s the EF&quot; problem.</p><p>That&#x27;s not been my experience. While I have found some other EF providers &quot;limited&quot; compared to Microsoft&#x27;s provider, most of the problems encountered were due to underlying bad configuration or bad entity layout rather than EF itself. I will say Code First is significantly better than EDMX-style modelling. In particular in larger projects (the Visual Studio designer kind of sucks).</p><p>&gt; mainly because you have no idea what convoluted SQL it&#x27;s going to spit out.</p><p>It is very easy to see exactly what EF spits out. You can even pipe that output all over the place (e.g. error system, performance logs, etc). There&#x27;s no excuse for being ignorant of what EF is doing under the hood anymore.</p>","children":[]}]}]}]},{"id":9180102,"text":"<p>&gt; And because Entity Framework puts the Select \n&gt; after the From clause</p><p>I think that you&#x27;re confusing LINQ with the ORM.</p><p>LINQ is a language feature, Language INtegrated Query. It operates on IEnumerable&lt;T&gt;. They introduced a new interface, IQueryable&lt;T&gt; which extends IEnumerable&lt;T&gt; with Expression. Basically it exposes your &quot;query&quot; as an Expression Tree - this can then be used by QueryProviders to do cool stuff like generate SQL.</p><p>A number of ORMs implement LINQ QueryProviders; Entity Framework, NHibernate, BLToolkit are all good examples.</p><p>EntityFramework, like a lot of fully-featured ORMs suffers from all of the traditional ORM problems: runtime performance is sub-optimal, it&#x27;s query heavy and if you use the visual designer it encourages bad development practices.</p><p>On the other hand it allows people with very little knowledge to be productive; for small-scale projects the bang-for-buck is hard to compete against.</p>","children":[]},{"id":9179343,"text":"<p>EF has too much churn to be relied upon.  They completely re-write it every few years.  This time they are really taking an axe to the whole existing structure</p>","children":[]}]},{"id":9179183,"text":"<p>I agree, using ORMs and such hide the real SQL and make it much harder to optimize by using explains etc.</p>","children":[{"id":9179684,"text":"<p>Just have Rails dump the query and stick &quot;EXPLAIN&quot; before it.</p>","children":[]}]},{"id":9179200,"text":"<p>I sincerely still prefer mongodb syntax because:</p><p>- Fits well with a programming language; {a: data.x} is better than &#x27;WHERE A=&quot;&#x27; + data.x + &#x27;&quot;&#x27; (sanitize?) or similar which are harder to read. SQL queries are good for direct input, mongodb queries styles are better to be used with a programming language;</p>","children":[{"id":9180476,"text":"<p>Your users don&#x27;t give two craps about the syntax. The technology choice is one of application requirements. If you chose Mongo over e.g. a SQL DB because you like your code to look pretty then I have to admit that I wouldn&#x27;t trust your software at all.</p>","children":[]},{"id":9179470,"text":"<p>That is not how you do parameterized queries. With any civilized database library, it would be something along the lines of `&quot;WHERE a = ? AND b = ?&quot;, data.x, data.y`, so that the parameters are like function parameters.</p>","children":[]},{"id":9179306,"text":"<p>Your comment made me realize why I prefer to work in ORMs instead of raw SQL, even though I&#x27;m frequently frustrated by their limitations - it all comes down to composability.</p><p>The mongodb syntax looks like it supports composing statements much more readily than SQL. It makes me wonder if there&#x27;s been any serious work done making a query <i>language</i> that&#x27;s fully as general as SQL, but is designed to be safely and easily composable so that you can build queries up from parts.</p><p>Anyone know of such a thing? The mongodb approach of query-as-data-structure is as close as I&#x27;ve seen.</p>","children":[{"id":9179493,"text":"<p>&gt; The mongodb syntax looks like it supports composing statements much more readily than SQL. It makes me wonder if there&#x27;s been any serious work done making a query language that&#x27;s fully as general as SQL, but is designed to be safely and easily composable so that you can build queries up from parts.</p><p>Haven&#x27;t you noticed that it&#x27;s exactly what the Sequel snippet does? It&#x27;s also what SQLAlchemy&#x27;s Expression Language does. It&#x27;s a reification of SQL queries in the host language, so it can&#x2F;should give pretty much all the tools of SQL.</p>","children":[{"id":9182023,"text":"<p>The ORMs I&#x27;ve used have always tried to map tables to classes (or whatever similar language structure is available). That works well almost all the time, but I get tripped up when the queries get to be more complex or specialized to a particular use.</p><p>I haven&#x27;t used SQLAlchemy&#x27;s expression language, but glancing over it now it looks like it might be just what I was looking for (at least for python), so thanks for the pointer.</p>","children":[]},{"id":9180835,"text":"<p>In some ways it does, but also remember it&#x27;s a MUCH less rich query language. It&#x27;s a lot easier to make a simple api mapping when you don&#x27;t have such exotic things as &quot;joins&quot;.</p>","children":[]}]}]},{"id":9179835,"text":"<p>If you&#x27;re building queries in ANY language by concatenating strings you&#x27;re doing it wrong.</p><p>In a sane language that query might look something like</p><p>cursor.execute(&quot;select field from tbl where long_obtuse_column_name=:foo and status != :status&quot;, foo=query, status=&#x27;open&#x27;)</p><p>All parameters are properly escaped by the api of course, so even if foo is &quot;&#x27;; drop table audit; &quot; you don&#x27;t have any problems.</p>","children":[{"id":9180126,"text":"<p>I&#x27;ve said similar because of this, so your comment is included in my statement.</p>","children":[]}]},{"id":9180098,"text":"<p>If you really care about your data and you don&#x27;t think a database should just be a bag where you put stuff but something that can be trusted , and efficient when it comes to storing data then you wouldn&#x27;t be using MongoDB.</p>","children":[]}]},{"id":9179712,"text":"<p><i>The lack of a schema may sound interesting, and in some cases it can certainly have its benefits. However, for many the usage of a schemaless storage engine leads to the problem of implicit schemas.</i></p><p>As another greying developer, one thing that was seen with ORMs were implicit schemas, often motivated as bureaucracy shortcuts.</p><p>So, you need a dictionary of configuration data for your user, but the bureaucratic overhead of adding that to your schema is too much? Why, then take your fancy OO serialization technology and save that little dictionary as a binary blob and stick it into just one new column in the database.</p><p>Problem solved...until years later when information in one of those blobs becomes tied (by a maintenance programmer who didn&#x27;t entirely understand the system architecture) to what is effectively an implicit schema.</p>","children":[{"id":9179790,"text":"<p>And I thought I was the only one who&#x27;d encountered that...</p>","children":[]}]},{"id":9180736,"text":"<p>What I&#x27;d like to see is a universal SQL that can be translated to whatever dialect of SQL my current database is using. That way I won&#x27;t have to relearn SQL every time I start a project with a different database engine.</p>","children":[{"id":9182277,"text":"<p>You could use Teiid (<a href=\"https://github.com/teiid/teiid\" rel=\"nofollow\">https:&#x2F;&#x2F;github.com&#x2F;teiid&#x2F;teiid</a>). The SQL dialect is similar to Postgres, and it has built-in translators to handle all of the popular relational databases (Postgres, Oracle, MySQL). Added bonus is that even some NoSQL databases are supported, and you can do things like join a table from a MySQL database against a collection in MongoDB. Full CRUD is supported for most translators.</p><p>If you&#x27;re using Java (JDBC), there&#x27;s an embedded kit so you don&#x27;t have to run a standalone server. If you&#x27;re not using Java, you can run the standalone server which also emulates the Postgres ODBC protocol so you can (for example) use `psql` to connect and run queries.</p>","children":[]}]},{"id":9179461,"text":"<p>Agreed.  And one might note that there&#x27;s a really good reason Oracle has dominated for decades, and Larry Ellison (who read the SQL research paper, and formed a company to implement it nearing 40 years ago) is a billionaire.</p>","children":[{"id":9180312,"text":"<p>Oracle&#x27;s success is due to their aggressive expansion into business applications. Their database products have been taking a hammering as enterprises moved to data lakes and horizontally scaled databases like Casssandra.</p><p>Your argument would&#x27;ve made sense a few years ago but not now.</p>","children":[]}]},{"id":9179215,"text":"<p>PostgreSQL is a very different beast to what it was 10 years ago.</p><p>So for a while it didn&#x27;t support use cases as well as various NoSQL&#x2F;NewSQL databases. However, PostgreSQL has also been built by great bunch of developers who are happy to adapt and implement the new, instead of harping on about the past.</p><p>So personally I adapt that advice to instead &quot;use evidence to guide decisions&quot;.</p>","children":[]},{"id":9179223,"text":"<p>The real issue isn&#x27;t &quot;newtech koolaid&quot; it is the definition of the problem.</p><p>I find that people that don&#x27;t understand the problem like MongoDB for the ability to be &quot;flexible&quot; in designing and modifying down the road. Though I like to argue you have flexibility in SQL also.</p>","children":[{"id":9179404,"text":"<p>I agree, I&#x27;ve read a few &#x27;screw Mongo, I&#x27;m going to SQL&#x27; type blogs, it really seems like they either didn&#x27;t grasp how to architect Mongo correctly and tried to do things that don&#x27;t work well with it, or they had a problem that was better solved by SQL in the first place.</p><p>SQL does many things very well that noSQL stuff won&#x27;t. Also vice-versa.</p>","children":[{"id":9179666,"text":"<p>I couldn&#x27;t agree more with you.  I love SQL for when I have a concrete data model, when I don&#x27;t I love NoSQL.  I could use both if I really wanted to, but you need to know when to force a square peg into a circle.  Mongo has a good how to on it here. <a href=\"http://blog.mongodb.org/post/72874267152/transitioning-from-relational-databases-to-mongodb\" rel=\"nofollow\">http:&#x2F;&#x2F;blog.mongodb.org&#x2F;post&#x2F;72874267152&#x2F;transitioning-from-...</a></p>","children":[]},{"id":9179679,"text":"<p>I honestly don&#x27;t think I&#x27;ve ever seen a valid use case for Mongo.  If you&#x27;re going to query your data, you have to know what fields you&#x27;re looking for, right?  So why not create a schema that has those fields?</p>","children":[{"id":9179921,"text":"<p>the only valid use case is when your data is so unstructured so that you don&#x27;t <i>care</i> what the fields in it are and you treat it like a black box.  So maybe some kind of user-generated markup that you just shift in and out.</p><p>those kinds of applications are not usually kinds of problems we have to solve.</p>","children":[]},{"id":9180195,"text":"<p>Mongo doesn&#x27;t stop you from using a schema, but you&#x27;ll have to enforce it in your application code rather than the database itself.</p>","children":[{"id":9182674,"text":"<p>&gt; but you&#x27;ll have to enforce it in your application code rather than the database itself.</p><p>You mean in every one of your application&#x27;s code.  You are using a schema no matter what, but it&#x27;s a missing feature in mongo.</p>","children":[]}]},{"id":9180756,"text":"<p>You can know a field or fields of the data while leaving the possibility of extra fields that you don&#x27;t need to know. In practice if you&#x27;re making a web application and dealing with JSON, it&#x27;s typically very easy to work with JSON-based databases instead of using serialization functions. You can enforce the schema with various tools at the application level when needed.</p><p>MongoDB also has some performance benefits over many traditional databases, and has &quot;native&quot; support for binary data.</p><p>I personally prefer CouchDB over MongoDB for most application that are well suited to use a &quot;NoSQL&quot; database, but MongoDB is sometimes decent too.</p>","children":[]},{"id":9180335,"text":"<p>If you&#x27;re doing a &quot;tracer bullet&quot;-style method of development where the requirements aren&#x27;t quite set in stone, MongoDB and other schemaless databases can really save time when it comes to adding basic functionality quickly.</p><p>Another use case: if you have an ad-hoc group of developers working on a project in a decentralized fashion, they can each work on local codebases of the project without needing an up-to-date setup script or migration scripts.</p><p>I&#x27;d maybe even argue that a lot of these &quot;goodbye MongoDB&quot; developer blog posts are sort of unnecessary. MongoDB allows for fast deployment and the convenience of a flexible database at the cost of speed, so eventual migration to a more solid relational database could&#x2F;should be part of a long-term plan when devs choose to use MongoDB. It&#x27;s all about using the right tool for the job.</p>","children":[]}]},{"id":9179725,"text":"<p>This is really what he&#x27;s driving at with the newtech koolaid.  People jumped on MongoDB etc. bandwagon because they drank the koolaid of &quot;Schema less is best!&quot; and &quot;It&#x27;s so fast and shiny!&quot; without really understanding the problem, let alone the right solution.</p><p>Unfortunately this seems to be a regular pattern in tech, a mistake (mostly) repeated by the young fresh developers coming in.  Usually after you get burned once or twice you stop making that mistake.</p><p>I&#x27;m not a Comp Sci grad so can&#x27;t speak from experience, but most of the syllabuses I&#x27;ve seen seem to focus on a very short term, single semester (or at most year) approach to projects.  It would be good if they could start with a project and be required to re-write, adapt or improve some kind of project from beginning of the college time to the end.  It would be a good introduction to technical debt, amongst other problems. (Heck if you really want to go for broke, maybe even mix things up a little, next semester you&#x27;ll be working with someone elses code!  That would be painful but might teach people the value of good comments, tests etc.)</p>","children":[{"id":9179803,"text":"<p>I guess but college isn&#x27;t a vocational school.  The point is to understand the CS concepts and not necessarily to know all the engineering kind of stuff you&#x27;d need in a &quot;real-world&quot; project (which often won&#x27;t be &quot;challenging&quot; in the CS department).</p>","children":[]}]}]}]},{"id":9182047,"text":"<p>Relevant: <a href=\"https://twitter.com/stuartsierra/status/571386786238369796\" rel=\"nofollow\">https:&#x2F;&#x2F;twitter.com&#x2F;stuartsierra&#x2F;status&#x2F;571386786238369796</a></p>","children":[]},{"id":9182048,"text":"<p>I would like to say lets step back and not conflate SQL and relational databases together. Clearly SQL as the language the primary way most people interact with relational database.</p><p>In my my mind SQL as a language is a huge PITA. First, parsing of complex statements is expensive (there&#x27;s workloads where SQL parsing takes more time then processing the results).</p><p>Second, as SQL exists today (SQL2011) it&#x27;s a large, complex language that&#x27;s not implemented uniformly. So I understand why people want to build programmable interfaces for generating queries versus writing giant string statements that expand to SQL.</p><p>I personally would wish that there was an alternative language for interacting with relational databases that isn&#x27;t SQL. Just expose the whole relational expression tree to users say ala S expressions. It&#x27;s not like the relational engine is going to optimize &#x2F; re-order it anyways.</p><p>I mean something along the lines of:</p><p><pre><code>  [ GROUP_AGGREGATE,\n    [ &quot;name&quot; ],\n    [ [ SUM, &quot;COUNT(*)&quot; ],\n      [ SUM, &quot;cost&quot; ]],\n    [ JOIN, [ ==, &quot;user_id&quot;, &quot;customer_id&quot;],\n      [ FILTER, [\n         [ &amp;&amp;, \n           [ &gt;=, &quot;age&quot;, &quot;30&quot; ],\n           [ IN, &quot;state&quot;, &quot;NY&quot;, &quot;CT&quot;, &quot;NJ&quot;]],\n         [ TABLE, &quot;customer&quot; ]\n      [ TABLE, &quot;orders&quot; ]]]]]\n</code></pre>\nIs it more verbose, yes. But much easier to compose, parse and machine transform by software (code is data). Also, makes you think in terms of relational operations&#x2F;expressions versus SQL the language.</p>","children":[{"id":9182719,"text":"<p>Actually, some work on this has been done for CHICKEN Scheme in extensions &quot;ssql&quot; and &quot;ssql-postgresql&quot;[0].  I&#x27;m not too familiar with these particular eggs, but the flavor might be conveyed by this example:</p><p><pre><code>    (ssql-&gt;sql #f &#x27;(select (columns (col actors name) \n                                    (count (col roles id)))\n                     (from roles actors)\n                     (where (= (col roles actor_id) (col actors id)))\n                     (group (col actors name))))\n</code></pre>\ntranslates to &quot;SELECT actors.name, COUNT(roles.id) FROM roles, actors WHERE (roles.actor_id = actors.id) GROUP BY actors.name&quot;</p><p>In the above sexpr, the SQL query is expressed as a Scheme&#x2F;Lisp hierarchical list, which I think is a quite elegant notation. I&#x27;m sure other Scheme implementations provide variations on this theme of SQL generation.  Using some macro magic, there would certainly be a lot of ways to organize it and probably it&#x27;s not even all that hard to do.</p><p>[0] documentation at: <a href=\"http://wiki.call-cc.org/eggref/4/ssql\" rel=\"nofollow\">http:&#x2F;&#x2F;wiki.call-cc.org&#x2F;eggref&#x2F;4&#x2F;ssql</a></p>","children":[]}]},{"id":9179236,"text":"<p>If the API surrounding the ORM is well-designed, using an SQL wrapper like this eliminates the possibility of SQL injection.  There are arguments for not always doing things the same way.</p>","children":[{"id":9179352,"text":"<p>Using sprocs or parameterized queries also prevents SQL injection.</p>","children":[]}]},{"id":9181028,"text":"<p>Right.  If you write SQL directly, you can also use commands such as EXPLAIN to see what the lookup strategy will be. If there&#x27;s a full table scan of a large table involved, maybe you need a different query or a new index.  If the SQL generation is hidden by some library, you can&#x27;t do that.</p><p>Wikipedia runs on MySQL. They have replicated read-only copies of the database and ngnix caches which handle most read-type operations. Is your site busier than Wikipedia?</p>","children":[{"id":9181042,"text":null,"children":[]}]},{"id":9182572,"text":"<p>i think there is a line to be drawn.. If the ORM is saving you no effort, I fully agree. However, I suspect most ORMs in the short term boost early productivity quite a bit.</p><p>It&#x27;s like writing an app from scratch in assembly, versus C.. The compiler will do quite a bit of the dirty work for you, and if you look at it in a disassembler no doubt you could find tons of improvements to be made (errmmm depending on the compiler I suppose). Doesn&#x27;t mean either one is the wrong way to go about it. Now if all you do is stuff ASM code in your C app, yeah.. Why bother?</p>","children":[]},{"id":9179260,"text":"<p>Agreed, but it&#x27;s important to understand what drove the adoption of NoSQL and schema-less stuff as well as the related trend of dynamic languages like Ruby and JavaScript.</p><p>(1) SQL server software itself was clunky, hard to scale, complex to deploy in a clustered fashion, and generally &quot;old&quot; in a bad way. This made NoSQL seem like a breath of fresh air.</p><p>(2) Startups! Ship now! MVP! Fail fast! The whole industry has been operating on this ship-fast-fail-fast way of doing things that prioritizes development speed and agility over correctness. That&#x27;s because half the time what you are developing will be thrown away anyway -- it will fail, or you&#x27;ll &quot;pivot&quot; and rip it all apart and almost start over. No point in static languages, SQL schemas, or other explicit design elements in that world.</p><p>#2 is I think the more significant of the two for things like schema-less MongoDB or dynamic languages. Once you get product&#x2F;market fit, you typically end up taking the crap you wrote with no types and schemas and re-doing it in a &quot;real language&quot; with a &quot;real database.&quot; But as they say in Startupistan, that&#x27;s a &quot;good problem to have.&quot;</p>","children":[{"id":9182500,"text":"<p>Where this line of reason goes completely off the rails is in thinking that schema-less databases are a hedge for future uncertainty.  Yes they let you churn out code slightly faster, but then your data becomes a ball of mud just as quickly as your code base, except the former is much much worse because when you pivot you still need your data even if you decide to chuck out all the code that goes with it.</p><p>In fact, a traditional RDBMS is designed to allow for any kind of ad-hoc querying you desire with reasonable performance, and the ability to normalize&#x2F;denormalize, index and materialize views in order to optimize unforeseen use cases.  The excuse of poor scalability is just a rationalization that some kids who didn&#x27;t understand SQL used to justify using something that has a shiny marketing page that they ignorantly found more viscerally appealing.  The tradeoff was all wrong, because 99.9% of projects will never need to scale beyond a single DB server, and for those that do, the flexibility of a well-defined schema and ad-hoc queryability will give them an early advantage in what kind of pivots are reasonableâ€”if they are lucky enough to have to scale then they can replace the RDBMS with the context of knowing what exactly their use case that they must scale is.  And at that point you&#x27;ll presumably have the resources to do it, which is much more effective than prematurely attempting to design a scalable infrastructure and discovering that you didn&#x27;t have the first clue what the real bottlenecks or even the full use case would be.</p>","children":[]},{"id":9179885,"text":"<p>I imagine &quot;whole industry&quot; == Silicon Valley?</p><p>I am yet to do any project that doesn&#x27;t use SQL servers for data storage.</p>","children":[{"id":9180211,"text":"<p>Yeah, I mean &quot;Greater Silicon Valley&quot; by which I mean SV itself and its wider diaspora. Other names include Startupistan, Hackerdom, etc.</p>","children":[]}]}]},{"id":9179773,"text":"<p>The fact that you don&#x27;t know what an ORM is is what makes me cry.</p>","children":[]},{"id":9180290,"text":"<p>I agree with the commenters who argue for the value in a library that wraps strings that happen to be SQL statements, but none that I saw touched on this point: I think most users of such a library will have to know SQL. These libraries seem to have a one-to-one matching between concepts in them, and concepts in SQL. Hence, the point is not protecting developers from learning SQL (because you can&#x27;t, for these needs), but in finding the least painful way of integrating SQL into the application logic.</p>","children":[]},{"id":9179269,"text":"<p>I started with SQL in the 90s and completely agree with you. People who do not know SQL tend to reinvent it poorly in a language not designed to work with sets of data.</p><p>We have started using jOOQ and it strikes a great balance of raw sql&#x2F;typed sql and result -&gt; object mapping. I don&#x27;t ever seen going back to a heavyweight ORM again. There is just too much magic and lost time spend figuring out performance issues for a minimal gain in ramp up for those who do not know SQL.</p>","children":[]},{"id":9180569,"text":"<p>This is a `negate` method in Arel (by Rails):</p><p><pre><code>    class User &lt; ActiveRecord::Base\n      def self.negate(scope)\n        where_values = scope.where_values\n\n        scope.except(:where).where where_values.reduce(:and).not\n      end\n\n      def self.suspended\n        where.not(confirmed: true).where(arel_table[:created_at].lt 2.weeks.ago)\n      end\n    end\n\n    unsuspended_users = User.negate User.suspended\n</code></pre>\nDo this in SQL. Composability is the real boost, and you have composabiliy when you don&#x27;t have to build a string in order to interact with the db.</p>","children":[{"id":9180934,"text":"<p>unfortunately, where_values is also a private &#x2F; unofficial API with no stability guarantees, so it can change at any time =&#x2F;</p>","children":[{"id":9181727,"text":"<p>True, but that&#x27;s a problem related to Arel (which is poorly documented too... I think Rails is neglecting one of its greatest features).</p>","children":[]}]}]},{"id":9179304,"text":"<p>I assure you that whoever wrote that code knows SQL.</p><p>The builder syntax is convenient because it allows queries to be composable without ugly string-smashing. For instance, you could take the object built out of that &quot;User.select...&quot; and pass it around into other functions that append extra &#x27;where&#x27; clauses, etc.</p>","children":[]},{"id":9179575,"text":"<p>You should learn SQL and understand relational databases. But using an abstraction (ORM) to cover 80% of the use cases is much better than writing tons of boilerplate SQL. <a href=\"http://java.dzone.com/articles/martin-fowler-orm-hate\" rel=\"nofollow\">http:&#x2F;&#x2F;java.dzone.com&#x2F;articles&#x2F;martin-fowler-orm-hate</a></p>","children":[]},{"id":9182414,"text":null,"children":[]},{"id":9180116,"text":"<p>I think the problem is that NoSQL has been the cool new thing, which causes people to use it without really understanding why it is better&#x2F;worse than other solutions.</p><p>Tools like MongoDB can do things that are extremely difficult or impossible with MySQL&#x2F;PostgreSQL and they are a great choice for those situations. Using it simply out of laziness or misunderstanding, though, is probably going to create problems later.</p>","children":[]},{"id":9179350,"text":"<p>The advantage of this is that you can pass the relational dataset that&#x27;s a result of this code around to other methods. Those methods can add additional filters, different ordering, etc.  You can&#x27;t do that with raw sql strings.</p>","children":[]},{"id":9180632,"text":"<p>In a compiled language like C#, &quot;wrapping&quot; SQL is a good idea, at the very least to catch bugs at compile time rather than runtime. Also makes it easier to switch from one DB provider to another if you need to.</p><p>You are less likely to suffer from SQL injection if you use at least some kind of wrapper, although a minimal wrapper that takes a SQL with placeholders and arguments would do for that.</p><p>My preferred way to wrap is to use EF with a dash of Linq, which is excellent and yields great readability and flexibility.</p><p>There is no way I am going to be willingly writing SQL statements in production code (unless I am forced to do so by some legacy problem). Worse case if the SQL is so complex that it is too much for Linq, then write a stored procedure.</p><p>Back in 2002 I had to write hand crafted SQL before mainstream ORMs and at the time I thought it sucked bad! I was looking for ways to generate the code from schema but didn&#x27;t have time to go and back-fix all the legacy code ad-hoc SQL statments!</p>","children":[{"id":9180637,"text":"<p>I personally prefer SQL + Dapper instead of ORM stuff if it is Linq-level SQL, and sprocs w&#x2F; Dapper otherwise.</p>","children":[]},{"id":9180907,"text":"<p><i>You are less likely to suffer from SQL injection if you use at least some kind of wrapper</i></p><p>Pretty much all of our coding guidelines on my team are just guidelines. The one absolute law is that all data going to the DB <i>must</i> be paramaterized, nothing goes in as string substitutions.</p><p>But virtually all of our DB access (like, at least 99%) is by stored proc anyway. We&#x27;re just barely able to keep up with performance requirements by tuning things just right, and in my experience, EF isn&#x27;t able to generate queries that are as efficient as we can by hand with some fiddling. I know that sounds like &quot;I write in assembler, &#x27;cause no compiler is as good as me&quot;, but that is what the reality seems like.</p>","children":[]}]},{"id":9179614,"text":"<p>Wait... does preferring to write SQL (and knowing how) make me old now?</p><p>Dang.</p>","children":[]},{"id":9179116,"text":"<p>Gosh, no kidding. (I sorta disagree about ORMs though -- if you&#x27;re selecting by ID it&#x27;s monkey work to write those queries, but anything complex, sure, use SQL)</p>","children":[{"id":9181640,"text":"<p>Right. A good ORM should deal with all your common cases (if not, your schema probably needs improving), and it saves you writing a lot of boilerplate code.</p><p>For the edge cases where you need complex joins and&#x2F;or extra performance, don&#x27;t try and bother with the ORM, just drop to SQL.</p>","children":[]}]},{"id":9180653,"text":"<p>SQL databases had their imminent death coming. They were stuck. However, PostgreSQL is under more active development than most other databases, SQL or NoSQL. It is new and cool technology.</p><p>In the end, whether you speak SQL or use NoSQL construct matters as much as whether you write a program in C or Pascal. You can have endless debates about form and function and you might want to see and identify with a winner, but in the end whether the tools and the community surrounding a technology fits people&#x27;s needs is the only thing that really matters.</p>","children":[]},{"id":9179131,"text":null,"children":[{"id":9179148,"text":"<p><i>There&#x27;s quite a bit more I can do with Arel than I can do with raw SQL, especially if I&#x27;m already in Ruby. So... no thanks. :)</i></p><p>Instead of making a statement like that... educate me. I&#x27;m very happy to learn about new technologies. What extra, interesting things can you do with Arel that aren&#x27;t possible in SQL?</p>","children":[{"id":9179608,"text":"<p>Arel is just a syntax tree for SQL. It doesn&#x27;t strictly give you any more power than SQL - I think your question is a little bit disingenuous, as you knew this already - but code manipulating syntax trees is better for query dynamism than code manipulating strings that don&#x27;t have further typing.</p>","children":[{"id":9180615,"text":"<p><i>I think your question is a little bit disingenuous, as you knew this already</i></p><p>No, it was quite genuine. I am not deeply familiar with Arel.</p>","children":[]}]}]}]}]},{"id":9179860,"text":"<p>There is only one NoSQL database satisfies all following requirements:\n1. easy to use\n2. reliable \n3. transaction support\n4. easy to scale\n5. eays to build indexes</p><p>It is BigTable.</p><p>Generally, if your data is not very large, you should use a SQL database. NoSQL is mainly used for easy scaling, not for its schema-less feature.</p>","children":[]},{"id":9179605,"text":"<p>The section, &quot;The Problem with Schemaless,&quot; blames the technology instead of whoever put the data in there in the first place.</p><p>If the code has to handle both page.title and page_title, this is a feature of using a schemaless technology.</p><p>Also, lots of the issues the author had with MongoDB are also to be found in MySQL, e.g. taking hours to recover from a corrupt database&#x2F;datastore.</p>","children":[{"id":9180241,"text":"<p>It&#x27;s just that if you have a sizable team (or worse over a long time with low overlap) working on a product, you intrinsically get an accumulation of duplicates, deprecated, or both &quot;keys&quot; in your schema-less schema.</p><p>With a DB that enforces a schema, the overhead of modifying the schema tends to moderate that nature.</p><p>I once worked in a lab (Ph.D. students are atrocious programmers BTW) where I introduced a schema-less store (cheesy K&#x2F;V store) to handle some mundane metadata caching on some medical imaging. It was intended to store 4-5 attributes per PK, I never touched it after setting it up for what I needed but showed it to colleagues.</p><p>Fast forward 10 years and there were something like 3000 attributes defined. Several hundreds of which were serialized blobs. Huge amount of overlap between the different attributes.</p><p>Almost all that because people didn&#x27;t know what was already in there so they just did their own thing.</p>","children":[]}]},{"id":9179094,"text":"<p>It&#x27;s very tiring to read things like this. And that is not meant as support for Mongo, quite the contrary in fact.</p>","children":[{"id":9179655,"text":"<p>It&#x27;s interesting that if you search for MongoDB vs Postgres, you won&#x27;t find <i>any</i> articles suggesting you should go from P to M.</p><p>Supposedly WiredTiger for M 3.0 will be more everything, including faster and better.</p><p>We&#x27;ll see.</p>","children":[]}]},{"id":9182424,"text":"<p>The article is sort of weird, why Document, no sql, no schema DB to be a schema DB? One fundamental fact that you liked MongoDB in early days (first 5 years) because it was damn easy to handle anything you throw at, you learned to build the business around it. In 5 years, you learned enough, business model matured, not much changes in the data model. Now development progress is matured, you have got team to work on, your worries relies on consistency. You might want to back to SQL. Now you know what schema&#x2F;table you need, string length, data type, constraint, relationship etc, because you learned that in 5 years time. You don&#x27;t need to deal with new developers screwing the Document DB (like storing Object ID as string in few places)</p><p>Developers, who reads the article beware of reality, you can look back 5 years now, not looking forward 5 years ahead. Don&#x27;t waste time in dealing with database columns and schemas, instead build the business faster, I found Mongo DB or any Document DB is good fit for agility.</p><p>1000&#x27;s of business move to Document DB because it is schema-less.</p><p>While working on Document DB, you should be master in writing stand-alone scripts in Python&#x2F;Perl&#x2F;Ruby to run every-time you break the structure, or fix inconsistency.</p><p>edit: fixed typo errors</p>","children":[]},{"id":9179868,"text":"<p>No comment.. (facepalm) and bad PR.</p>","children":[]},{"id":9182178,"text":"<p>This post outlines some of the most expensive parts of deploying, operating, and maintaining an application that operates on &quot;NoSQL&quot; databases like Mongo, and in my experience, DynamoDB:</p><p>1) Implicit Schemas. We avoid this completely by doing production migrations and re-indexes on every new field we add. Its expensive, and we have to write&#x2F;test&#x2F;run scripts in production. At times I wish I could just write a Rails migration on an RDS instance and call it a day. N-1 compatibility isn&#x27;t hard to accomplish with good code reviews.</p><p>2) Search. Want to search and join like in the old days? Good luck. Using a NoSQL DB as the primary authoritative store of record is great, but you&#x27;ll need a secondary indexes for any searches you want to do. If you need to look up an object on a new field (or even one that already exists in all of your data) if you haven&#x27;t built an index for it you will have to.</p><p>3) Serving Clients. Because of the schemaless-blobby nature of writing clients, things get real messy the minute you have multiple services or applications reading or writing to a DB. To get around this, you have to put a service in front of it and serve the data from some RPC technology, which is an extra step and requires more development and maintenance.</p><p>4) Administration. There aren&#x27;t a long history yet of robust toolsets and &quot;science&quot; behind different schemaless NoSQL databases. Meaning which one you choose has a huge impact on your ability to fine tune it, debug consistency or other expectation issues, and do things like proper failover, backups, restores, etc. Knowledge between similar NoSQL DBs doesn&#x27;t transfer as well so your mileage will vary more so than on SQL databases (MySQL vs PostgresSQL, for instance).</p><p>NoSQL has its place and purpose, but it is rarely as the &quot;one database that rules them all&quot; that many businesses end up with. I&#x27;d be interested in counter stories.</p>","children":[]},{"id":9180139,"text":"<p>You probably had a replica set and maybe an off-site replica. What are you using now, a single PostgreSQL instance, a master-slave cluster or any other distributed setup? If positive, which one of the many psql distributed technologies are you using? Thanks.</p>","children":[{"id":9180840,"text":"<p>Before (Mongo): 1 primary, 2 secondaries, 2 arbiters\nNow (Postgres): 1 primary</p><p>Most of our applications require write access in some shape or form, so at least the default replication of Amazon RDS doesn&#x27;t cut it. Besides that we don&#x27;t really need it so far, don&#x27;t see the need for it in the coming months either.</p>","children":[{"id":9181796,"text":"<p>Simple but sensible.</p>","children":[]}]}]},{"id":9179632,"text":"<p>Diving in a cesspit makes one appreciate clean air.</p>","children":[]},{"id":9179122,"text":"<p>Do anyone recognize the application used for the metrics screenshots?</p>","children":[{"id":9179193,"text":"<p>New Relic</p>","children":[{"id":9179879,"text":"<p>Correct, this is taken from New Relic&#x27;s APM service.</p>","children":[]}]}]},{"id":9180412,"text":"<p>Care to share your experience in terms of performance of Postgresql&#x27;s JSONB vs Mongo? for both selects&#x2F;inserts? and how about nested search queries?</p>","children":[{"id":9180553,"text":"<p>Haven&#x27;t looked into JSONB that much yet so I&#x27;m afraid I can&#x27;t give any numbers.</p>","children":[]},{"id":9182659,"text":"<p>In general, NoSQL databases are good for storing unstructured data. They start to fall apart when you want to query that unstructured data. You will hate yourself if you want to query something that is nested inside something, especially if one of the nesting levels is of the array JSON type. This is because indexes are required (just like in a normal database). Many times, Map-Reduces are required since the queries don&#x27;t run in reasonable runtime. At some point, because you are storing the entire JSON document, relational databases start winning the space game (they don&#x27;t store the name of the column with every document, like NoSQL does).</p>","children":[]}]},{"id":9180670,"text":"<p>I switched a new product in planning from MongoDB to PostgreSql 9.4. With the new JSONB columns you get the best of both worlds.</p>","children":[]},{"id":9179647,"text":"<p>Wonder if they evaluated rethinkdb?</p>","children":[{"id":9179810,"text":"<p>I briefly looked at it, but seeing how young it was (and still is) I&#x27;d prefer not to bet any money on it for now, I&#x27;d rather use something tried and proven.</p>","children":[]}]},{"id":9181183,"text":"<p>Not that im excusing mysql, but what I do when adding columns to a +10mil row tables is to create a new table with the new column and then insert into newtable from oldtable.</p><p>That changes those few hours into few seconds.</p>","children":[]}],"WordIDMapping":{"think":[9180425,9180455,9181484,9180483,9182621,9181010,9181512,9180038,9182811,9180245,9179901,9179284,9179420,9180567,9181305,9179594,9180009,9179992,9181076,9179313,9182018,9180421,9181141,9182069,9181939,9181162,9180107,9181335,9180901,9180541,9179430,9179182,9180102,9180098,9179679,9182048,9182719,9182572,9179260,9180290,9181727,9180116,9179608,9180615],"strict":[9180425,9179143,9179105,9180251],"mod":[9180425,9178990,9179143,9182018,9180833],"mak":[9180425,9182621,9181010,9181512,9179105,9182811,9180073,9182210,9180009,9179300,9179582,9181076,9179035,9179313,9182664,9179086,9180421,9180363,9182217,9180251,9181393,9180831,9180541,9180149,9179182,9179733,9179183,9179306,9179493,9180835,9182048,9179773,9180632,9179614,9179632],"warning":[9180425,9181010,9178990,9179163,9179548],"error":[9180425,9181010,9178990,9179548,9181441,9182018,9182217,9181292,9179422,9179870,9182424],"valu":[9180455,9181484,9180247,9181512,9178990,9181441,9181206,9180184,9180966,9181160,9180142,9180149,9179725,9180290],"following":[9180455,9182621,9179860],"consistencywith":[9180455],"all":[9180455,9182621,9181010,9180247,9181512,9179028,9179228,9182815,9180097,9179085,9179105,9179004,9181441,9180245,9179786,9180997,9179852,9180073,9180009,9182442,9179582,9179035,9179572,9180913,9179552,9179315,9182664,9182069,9180032,9180966,9181481,9180206,9180232,9182217,9180369,9180952,9181292,9181467,9180286,9180280,9181393,9181160,9180831,9180465,9180448,9180141,9180703,9179423,9179182,9179222,9179756,9179870,9180102,9180476,9179306,9179493,9182023,9179835,9182277,9180335,9179803,9182719,9182572,9179260,9182500,9180632,9180907,9181640,9179860,9180241,9182178],"due":[9180455,9178990,9179882,9179339,9179870,9180312],"respect":[9180455],"should":[9180455,9181484,9179345,9182621,9181010,9181110,9180247,9179152,9179004,9182811,9179786,9180997,9179852,9179594,9180060,9179832,9180421,9180571,9181141,9180737,9181292,9181393,9181551,9180149,9180834,9179423,9179840,9179801,9180098,9179575,9181640,9179860,9179655,9182424],"had":[9180455,9179228,9179095,9179004,9182811,9179074,9180245,9179946,9180882,9180009,9179932,9179992,9182725,9179805,9182664,9181939,9181039,9180280,9180978,9179870,9179404,9180632,9180653,9179605,9180139],"list":[9180455,9179228,9181939,9180101,9181671,9181095,9181321,9182719],"befor":[9180455,9182811,9180073,9179901,9180913,9180060,9180421,9181292,9180831,9179684,9180632,9180840],"selecting":[9180455,9179116],"mongodb":[9180455,9181484,9180226,9180483,9182534,9179217,9178969,9179231,9180038,9179028,9179004,9182811,9181320,9180245,9179786,9179946,9179855,9179936,9180073,9179970,9182702,9179901,9180307,9179284,9181305,9180009,9182442,9179796,9179992,9182725,9181076,9179035,9179552,9179560,9179832,9181887,9179200,9179306,9179493,9180098,9182277,9179223,9180756,9180335,9179725,9179260,9180116,9179605,9179655,9182424,9180670],"consistency":[9180455,9180226,9182811,9180245,9182702,9179901,9180060,9182424,9182178],"eventu":[9180455,9182811,9180335],"also":[9180455,9181484,9179217,9182815,9179105,9181441,9179074,9180245,9179852,9181305,9179992,9179035,9180571,9181939,9180966,9182527,9180261,9180833,9182217,9180128,9180251,9180149,9180834,9179156,9179423,9179698,9179870,9179493,9180835,9182277,9179215,9179223,9179404,9180756,9182048,9179352,9181028,9180934,9180632,9179605],"way":[9180455,9180247,9179028,9179004,9181320,9180245,9179901,9181305,9179594,9179992,9179313,9180421,9181939,9180966,9181481,9180101,9181321,9180280,9180831,9180703,9180834,9180835,9180736,9182048,9182719,9179236,9182572,9179260,9180290,9180632],"describ":[9180455,9180286],"bett":[9180455,9181484,9182621,9180247,9179906,9179035,9181887,9181939,9182312,9180232,9181039,9180833,9180603,9179870,9179200,9179404,9179575,9179608,9179655],"supported":[9180455,9179572,9182018,9179430,9182277],"outsid":[9180455,9181489,9179074,9179313,9181939,9179182],"nosql":[9180455,9180226,9180247,9181512,9179230,9182811,9179786,9179906,9179901,9179284,9179594,9180060,9179313,9179315,9182664,9181939,9180703,9182277,9179404,9179666,9180756,9179260,9180116,9180653,9179860,9182178,9182659],"group":[9180455,9179086,9180141,9180335,9182719],"don't":[9180455,9181484,9182621,9181110,9180852,9179152,9179004,9182811,9181320,9181441,9180245,9181386,9182587,9179970,9179284,9179420,9179695,9179594,9179796,9179432,9179582,9182018,9181141,9182069,9181939,9179915,9180966,9180232,9180261,9180737,9180876,9180387,9181160,9180831,9180142,9179430,9179733,9179752,9180476,9180835,9179835,9180098,9182277,9179223,9179404,9179666,9179679,9179921,9180756,9179773,9179269,9180569,9181640,9179608,9182424,9180840,9182659],"fully":[9180455,9179572,9182664,9180833,9180102,9179306,9179493,9182572],"agree":[9180455,9179345,9180114,9181512,9180956,9180571,9179665,9179915,9181057,9180541,9180703,9179222,9179339,9179183,9179461,9179404,9179666,9182572,9179260,9180290,9179269],"schemaless":[9180455,9181484,9179197,9179345,9179230,9179074,9179786,9180997,9181206,9179970,9179284,9179992,9179035,9181628,9179712,9180335,9179605,9182178],"discussion":[9180455],"mo":[9180455,9181057],"about":[9180455,9180483,9182534,9182621,9179228,9180097,9178990,9182811,9180245,9179906,9179855,9179936,9179970,9179901,9179695,9179594,9182442,9179796,9179300,9179476,9179364,9179572,9179313,9179315,9181628,9182664,9181939,9179665,9182312,9180549,9181671,9180833,9180128,9180286,9181160,9180901,9181551,9180141,9181201,9179156,9179460,9179430,9179182,9180476,9180098,9179215,9180335,9182572,9179116,9180653,9179148,9180412],"data":[9180455,9180226,9180483,9182621,9181010,9180247,9178969,9179159,9179028,9179859,9179228,9179783,9182815,9178990,9179004,9182811,9181908,9179074,9180245,9179786,9179946,9179852,9179906,9182587,9179882,9179970,9180882,9179901,9181841,9182816,9181305,9181686,9179594,9180009,9182725,9181076,9179035,9180060,9180575,9179560,9179313,9179805,9181939,9181039,9180107,9180737,9180973,9180251,9180831,9180142,9181057,9179430,9179200,9179470,9179306,9180098,9179712,9180312,9179666,9179679,9179921,9180756,9182048,9182500,9179885,9179269,9180907,9179860,9179605,9182424,9182178,9182659],"build":[9180455,9179594,9179992,9180421,9179915,9180032,9181481,9180314,9180152,9180221,9180261,9180876,9181193,9181453,9182102,9180465,9180501,9180149,9179306,9179493,9182048,9180569,9179304,9179860,9182424],"schema":[9180455,9179345,9180483,9181010,9181110,9179028,9179783,9179004,9181320,9181441,9179946,9180997,9179882,9182816,9179284,9179695,9181686,9179594,9182442,9179992,9182725,9180956,9181076,9181628,9182664,9179597,9182018,9182217,9179712,9179679,9180195,9182674,9180756,9179725,9179260,9182500,9180632,9181640,9179860,9180241,9182424,9182178],"head":[9180455,9179852,9181841,9180009,9181887,9180206],"translated":[9180455,9180736],"cod":[9180455,9181010,9182815,9180000,9181441,9179901,9180307,9179315,9180966,9181481,9180206,9180232,9180363,9180221,9180737,9182217,9180973,9180251,9180280,9180831,9180465,9181522,9180149,9179423,9179430,9179182,9179733,9179756,9179801,9179339,9179870,9180476,9180195,9182674,9179725,9182048,9182572,9182500,9179304,9179350,9180632,9181640,9179608,9179605,9182178],"etc":[9180455,9179852,9182587,9179313,9182217,9179870,9179183,9179725,9180211,9179304,9179350,9182424,9182178],"it'":[9180455,9180483,9182534,9179217,9181110,9180247,9181512,9180774,9179152,9179004,9182811,9181320,9179074,9180245,9181386,9179786,9182587,9179882,9180882,9179901,9179284,9179594,9180009,9179476,9179932,9179432,9179572,9179552,9181887,9182018,9180156,9181939,9179665,9181481,9181835,9180784,9180221,9180261,9180107,9182217,9181292,9180710,9181160,9180831,9180475,9181551,9180141,9180541,9180703,9179430,9179840,9179182,9179222,9179422,9179248,9179698,9179870,9180102,9179493,9180835,9182674,9180756,9180335,9179725,9182048,9182719,9182572,9179260,9179116,9180241,9179094,9179655],"how":[9180455,9179228,9180097,9181206,9180073,9179997,9181686,9180009,9179035,9179805,9182664,9181939,9180032,9182312,9180206,9180221,9180764,9180261,9181095,9180737,9180128,9181393,9180831,9180344,9180048,9180501,9180141,9180149,9179339,9179870,9179470,9179404,9179666,9179614,9180412,9179810],"far":[9180455,9179028,9179152,9179300,9179665,9180221,9180840],"tak":[9180455,9182621,9179159,9179672,9180038,9181441,9179695,9180801,9181686,9179932,9180032,9180152,9180369,9181292,9180141,9179712,9182048,9179304,9180632],"rigid":[9180455],"model":[9180455,9180226,9182621,9179217,9179028,9179004,9179035,9180060,9180575,9180831,9179156,9179430,9179666,9182424],"mayb":[9180455,9180483,9181110,9179970,9179992,9181453,9179921,9180335,9179725,9181028,9180139],"see":[9180455,9182534,9179159,9179143,9180073,9179970,9180009,9179805,9181628,9180421,9181939,9180206,9180261,9180831,9179460,9179248,9179870,9180736,9181028,9180653,9179655,9180840],"flex":[9180455,9178990,9180831,9180141,9179223,9180335],"writ":[9181484,9180000,9181441,9179074,9180245,9179852,9179997,9180009,9179364,9179597,9182018,9179915,9180032,9180206,9180221,9180369,9180128,9181292,9181453,9180251,9180344,9180465,9180149,9180834,9179840,9179733,9179422,9179343,9179725,9181028,9180632,9180907,9179614,9179116,9180653,9182178,9180840],"looked":[9181484,9179572,9180553,9179810],"oth":[9181484,9180247,9179049,9179143,9179105,9179946,9181305,9179432,9179313,9182664,9181939,9181039,9180737,9182217,9180387,9180831,9180541,9180703,9179423,9179182,9179870,9180102,9180335,9179725,9182719,9179260,9180211,9179304,9180116,9179350,9180653,9182178,9180139],"databas":[9181484,9180483,9182621,9179217,9180247,9181512,9180774,9179672,9180852,9179230,9180000,9179049,9179152,9179004,9182811,9180245,9179786,9179946,9179855,9180073,9179882,9179901,9180307,9179284,9179420,9180801,9180567,9179594,9180009,9179992,9181076,9180060,9179552,9179315,9179086,9181939,9180737,9180833,9182217,9180819,9181453,9180703,9180149,9179430,9179182,9179222,9179756,9179339,9179870,9179470,9180098,9179712,9180736,9182277,9180312,9179215,9180195,9182674,9180756,9180335,9182048,9181028,9179260,9182500,9179575,9180653,9179860,9182424,9182178,9182659],"lot":[9181484,9181110,9180247,9180038,9179228,9179786,9180882,9179594,9180009,9179796,9179582,9179560,9181939,9181835,9180363,9180369,9181522,9180501,9179182,9180102,9180835,9180335,9182719,9181640,9179605],"altern":[9181484,9180247,9180774,9181939,9182048],"might":[9181484,9179345,9181441,9179035,9180101,9180363,9181500,9180876,9181453,9181393,9180831,9180541,9182023,9179835,9179461,9179725,9182719,9180653,9182424],"worked":[9181484,9179992,9180241],"them":[9181484,9180247,9179028,9178990,9179085,9179004,9182811,9181908,9179074,9179932,9182725,9181887,9180101,9181095,9181193,9180541,9179840,9179756,9179698,9179870,9182719,9182500,9180290,9182178],"than":[9181484,9182621,9180247,9181512,9180774,9179672,9179152,9179085,9179074,9180245,9180882,9179992,9179035,9179313,9179086,9181939,9181095,9181292,9180831,9180465,9180475,9180149,9179416,9179733,9179422,9179870,9179200,9179306,9179493,9180195,9182674,9181028,9182500,9179575,9180116,9180632,9180653,9179148,9179608,9182178],"even":[9181484,9179345,9180483,9179028,9180097,9180245,9179901,9179284,9179420,9179695,9181305,9181686,9179932,9179992,9179432,9182018,9181939,9179665,9181481,9181835,9180973,9180286,9181160,9180048,9179182,9180603,9179870,9179306,9179835,9182277,9180335,9179725,9182719,9182500,9182178],"mongo":[9181484,9182621,9179217,9179136,9179159,9179228,9182815,9182811,9180245,9181386,9179946,9179852,9179882,9180882,9179284,9181305,9181686,9179805,9182664,9180703,9180476,9179404,9179666,9179679,9180195,9182674,9179094,9182424,9182178,9180840,9180412],"regarding":[9181484,9179074,9181887],"simpl":[9181484,9182802,9181386,9180784,9180973,9180465,9181057,9180541,9179698,9180835,9181796],"new":[9181484,9180226,9182621,9180618,9179105,9179074,9179852,9179855,9180073,9179970,9181686,9179552,9179315,9180571,9181939,9180737,9180128,9180724,9180831,9180102,9179712,9179215,9181028,9180116,9180653,9179148,9182424,9182178,9179193,9179879,9180670,9181183],"propert":[9181484,9179313],"probably":[9181484,9179163,9180073,9179992,9180737,9180973,9181393,9180831,9180048,9179156,9179416,9179840,9179698,9179870,9182719,9180116,9181640,9180139],"fixed":[9181484,9182664,9182424],"orm":[9181484,9181010,9180247,9182802,9179594,9181939,9179665,9180221,9181095,9180107,9180737,9180128,9181193,9181453,9181467,9180710,9180251,9180387,9180831,9180901,9180048,9180501,9180141,9179156,9179423,9179430,9179840,9179182,9179222,9179698,9180102,9179183,9179306,9182023,9179712,9179236,9182572,9179773,9179269,9179575,9180632,9180637,9179116,9181640],"lay":[9181484,9181441,9179906,9179992,9179156,9179182,9179339],"can":[9181484,9179197,9180247,9180774,9179136,9179159,9179028,9178990,9179163,9179085,9182811,9179074,9181386,9179786,9179946,9179852,9180073,9182702,9179901,9181841,9179420,9179035,9180060,9179313,9179597,9182018,9179086,9180421,9179915,9180032,9180184,9180966,9181481,9182033,9182312,9182527,9180152,9181039,9180737,9182217,9181292,9180973,9180465,9181551,9180448,9180141,9180541,9180703,9180149,9180834,9179156,9179460,9179840,9179182,9179870,9180102,9179306,9179493,9180098,9179712,9180736,9182277,9180756,9180335,9181028,9182500,9180934,9180116,9179350,9180907,9180653,9179148,9182424],"add":[9181484,9181441,9179695,9179796,9182312,9182527,9180261,9180128,9181292,9181393,9179350,9182178],"default":[9181484,9179743,9179049,9179152,9179085,9179143,9179095,9179105,9180840],"needed":[9181484,9179028,9179946,9180060,9180206,9181453,9181393,9180141,9179156,9180756,9180241],"something":[9181484,9179345,9181010,9180247,9180774,9179028,9182811,9181441,9179852,9179906,9182587,9179855,9180073,9179992,9179560,9179315,9181887,9182664,9179915,9180101,9180764,9180745,9180128,9180973,9180280,9180831,9180141,9179423,9179430,9179470,9179835,9180098,9182048,9182500,9180241,9182659,9179810],"nul":[9181484,9179197,9179345,9178990,9179085,9179143,9181908,9180966,9181835,9180369,9180834],"actually":[9181484,9182291,9179852,9179594,9179476,9179035,9181939,9179665,9182312,9180833,9181335,9180876,9180831,9179222,9182719],"happen":[9181484,9180247,9182811,9180251,9181522,9180978,9180290],"sql":[9181484,9180483,9182621,9179217,9180247,9181512,9182802,9179230,9178990,9179143,9182811,9180307,9182788,9182816,9179420,9182442,9180060,9179552,9179313,9181887,9182664,9179086,9179665,9179915,9180032,9180184,9181481,9182801,9182312,9180784,9180101,9180206,9180549,9181671,9180152,9180221,9180764,9181500,9181039,9180261,9181095,9180107,9180737,9180833,9182217,9180369,9180876,9180128,9181453,9180710,9180973,9180251,9180286,9180280,9181160,9180831,9180344,9180142,9180901,9180465,9181551,9181057,9180048,9181522,9180501,9180141,9180703,9180149,9181201,9179156,9179423,9179430,9179840,9179182,9179222,9179422,9179756,9180603,9179801,9179248,9179752,9179339,9179698,9179870,9180102,9179183,9179200,9180476,9179306,9179493,9180736,9182277,9179461,9179223,9179404,9179666,9182048,9182719,9179236,9179352,9181028,9179260,9182500,9179885,9180290,9179269,9180569,9179304,9179575,9179350,9180632,9180637,9180907,9179614,9179116,9181640,9180653,9179148,9179608,9179860,9182424,9182178],"bewar":[9179197,9182424],"problem":[9179197,9179345,9180114,9179217,9179228,9179230,9182811,9179074,9179786,9179855,9180073,9180882,9179901,9181076,9180060,9181887,9179597,9180421,9181939,9180784,9180261,9180107,9182217,9181321,9181467,9180973,9181393,9180831,9179698,9179870,9180102,9179835,9179712,9179223,9179404,9179921,9179725,9179260,9181727,9180116,9180632,9179605],"occur":[9179197],"rel":[9179197,9180618,9180247,9181512,9180852,9182587,9179901,9179284,9180009,9180575,9181193,9180831,9180703,9179430,9179182,9182277,9180335,9182048,9179575,9179350,9182424,9179193,9182659],"when":[9179197,9180483,9182621,9181010,9181512,9180774,9179136,9182815,9178990,9179743,9179152,9179004,9182811,9180245,9181386,9179786,9179946,9179906,9181841,9179284,9179420,9179594,9179364,9179560,9179313,9179597,9182018,9179086,9180966,9180784,9182527,9180261,9180737,9182217,9181467,9180710,9180831,9180344,9180465,9180048,9181522,9180141,9180978,9179156,9179840,9179733,9179756,9180603,9182023,9180835,9180098,9179712,9179666,9179921,9180756,9180335,9182500,9180569,9182659,9181183],"start":[9179197,9182587,9179284,9179796,9180791,9181057,9179840,9179182,9180736,9179725,9179260,9182659],"defining":[9179197,9178990,9179004,9181841],"column":[9179197,9178990,9179163,9181908,9179901,9179597,9180032,9182527,9180261,9181095,9180876,9180142,9179182,9179712,9182719,9182424,9182659,9180670,9181183],"end":[9179197,9179217,9179901,9179997,9180966,9181835,9180737,9180952,9181193,9181292,9181393,9179430,9179725,9179260,9180653,9182178],"sam":[9179197,9179345,9182534,9181512,9179230,9179852,9180307,9179432,9179560,9179313,9181835,9180549,9180831,9180465,9180149,9180834,9179339,9179236],"wouldn't":[9179345,9179970,9180101,9181095,9180476,9180098],"cal":[9179345,9182664,9182033,9182178],"similar":[9179345,9180114,9180226,9179852,9179970,9179040,9179665,9182033,9180286,9181522,9180149,9179698,9179870,9179200,9182023,9180126,9182277,9182178],"option":[9179345,9181110,9179105,9181206,9179035,9179665,9180369,9180831,9179156],"typ":[9179345,9181010,9180247,9179028,9181489,9179085,9181441,9181908,9179946,9181206,9179852,9179882,9179970,9179594,9180009,9180737,9180876,9181292,9180973,9179423,9179182,9179404,9181028,9179260,9182424,9182659],"scala":[9179345,9180009,9179560],"string":[9179345,9180000,9178990,9179085,9179143,9181908,9179665,9181481,9181835,9180206,9180152,9180155,9180107,9180737,9182217,9181193,9181292,9180724,9181040,9181160,9180831,9180465,9180048,9180141,9179430,9179182,9179422,9179835,9182048,9180290,9180569,9179304,9179350,9180907,9179608,9182424],"map":[9179345,9180501,9182023,9182659],"varchar":[9179345,9179085],"being":[9179345,9182621,9181010,9179152,9182811,9179786,9179901,9179420,9181076,9180095,9180060,9179597,9180421,9181939,9179665,9179915,9181671,9180107,9180952,9181551,9180703,9179156,9179182,9179339,9179870],"least":[9179345,9180247,9182291,9182664,9182023,9180290,9180632,9180907,9180840],"stil":[9179345,9180038,9179594,9181141,9179665,9179915,9181500,9180142,9180048,9180703,9180149,9179430,9179840,9179182,9179422,9179248,9179200,9182500,9179810],"enforced":[9179345],"empty":[9179345,9181441],"having":[9179345,9181010,9182664,9179665,9181835,9180549,9182527,9181193,9181292,9180831,9180141,9180541,9179248,9179339],"too":[9179345,9180483,9179217,9180852,9179028,9179901,9181305,9179665,9181481,9181671,9181095,9180831,9180541,9180703,9179339,9179343,9179712,9180756,9182719,9179269,9181727,9180632],"many":[9179345,9181010,9180247,9182802,9179028,9181908,9181206,9180421,9181939,9179665,9180831,9180541,9180703,9179182,9179339,9179712,9179404,9180756,9182178,9180139,9182659],"field":[9179345,9179159,9180000,9178990,9179548,9179004,9181441,9179906,9181841,9182788,9182816,9180060,9182664,9180032,9179835,9179679,9179921,9180756,9182178],"ind":[9179345,9181908],"break":[9179345,9182811,9182424],"thing":[9179345,9180483,9182621,9181010,9181110,9180247,9181512,9179028,9180245,9179997,9180307,9179476,9179582,9179552,9179313,9179086,9180421,9181939,9181835,9180101,9180737,9181321,9180876,9181160,9180831,9180344,9180901,9179156,9179222,9179339,9179870,9179306,9180835,9179712,9182277,9179404,9179725,9179236,9179260,9180116,9180907,9180653,9179148,9180241,9179094,9182178],"t":[9179345,9179672,9178990,9179152,9181908,9179786,9179946,9181206,9179970,9182788,9179420,9180801,9182442,9181076,9179597,9182018,9180833,9180280,9180831,9181551,9182023,9179835,9182277,9182048,9181028,9181183],"i'll":[9180114,9179970,9180009,9180956,9180784,9180973,9180344,9180603,9179698,9179870],"rephras":[9180114],"interesting":[9180226,9182534,9179217,9179906,9179284,9180737,9180831,9179712,9179148,9179655],"articl":[9180226,9182534,9179217,9181010,9179230,9178990,9180009,9179655,9182424],"did":[9180226,9179231,9182811,9182291,9180245,9179040,9179315,9180421,9179698,9179870,9180241],"consid":[9180226,9179028,9182811],"any":[9180226,9180852,9180038,9179163,9179074,9180073,9179970,9182702,9179805,9179597,9181939,9179915,9180966,9182527,9180221,9181095,9180737,9180387,9180831,9180465,9180141,9180149,9179156,9179698,9179870,9179470,9179306,9179493,9179835,9182500,9179885,9180934,9179608,9179655,9182424,9182178,9180139,9180553,9179810],"solution":[9180226,9179217,9179028,9179196,9179582,9181671,9180833,9180703,9179725,9180116],"off":[9180226,9180483,9181512,9179901,9179284,9179300,9181076,9180913,9181887,9180973,9180724,9179182,9182500,9180139],"often":[9180226,9180247,9179852,9179432,9180966,9182312,9181500,9181292,9180048,9180141,9179430,9179182,9180603,9179712,9179803],"configur":[9180226,9179105,9182312,9179870,9179712],"guarant":[9180226,9179217,9180245,9180801,9180934],"arangodb":[9180226],"rethinkdb":[9180226,9179647],"imagin":[9180226,9181206,9179665,9180876,9181453,9180149,9179885],"effort":[9180226,9179028,9179035,9180314,9180363,9181162,9180149,9182572],"migr":[9180226,9179230,9179783,9180073,9182816,9179796,9181076,9179035,9179040,9179560,9179339,9179698,9179870,9180335,9182178],"been":[9180226,9182621,9178969,9179159,9179028,9180097,9179152,9182811,9179855,9179936,9179476,9179552,9179560,9181887,9181939,9181039,9180737,9180973,9180541,9180703,9179430,9179182,9179756,9179870,9179306,9179493,9180312,9179215,9182719,9179260,9180116],"considerably":[9180226],"smal":[9180226,9180852,9182815,9180245,9179906,9181887,9182018,9179870,9180102],"nev":[9180483,9180097,9179786,9180882,9179572,9179832,9181939,9179915,9180966,9180221,9180764,9181039,9180387,9179698,9179870,9182500,9180241],"it":[9180483,9182534,9178969,9182815,9180097,9179152,9180060,9179313,9182664,9182018,9180107,9181335,9180973,9179182,9179712,9180211,9181727,9179860,9182178],"benchmarking":[9180483],"scaling":[9180483,9180038,9182811,9179315,9179860],"sharding":[9180483],"abilit":[9180483],"two":[9180483,9182621,9180038,9179228,9182815,9179163,9179085,9179906,9181887,9181939,9180834,9180476,9179260],"you're":[9180483,9182621,9181489,9182811,9179901,9182788,9179284,9180801,9180567,9181305,9179796,9179582,9181162,9180152,9181193,9180710,9180724,9181393,9180831,9180142,9180465,9180149,9179840,9179733,9179339,9179870,9180102,9179835,9182277,9179679,9180756,9180335,9179116],"prototyping":[9180483,9179901],"just":[9180483,9181010,9181110,9180247,9180774,9179228,9182815,9178990,9179152,9179004,9182811,9181320,9180245,9181206,9182587,9179936,9180882,9179901,9179997,9180145,9181841,9179284,9179695,9179594,9180009,9179432,9181076,9179035,9180060,9179086,9180421,9181939,9179915,9180032,9181481,9180101,9180206,9180232,9182527,9180152,9180221,9181095,9180737,9180128,9181292,9181393,9182102,9180831,9180344,9181551,9180048,9180541,9180703,9179460,9179423,9179430,9179422,9180603,9179801,9179339,9179698,9179870,9179684,9182023,9180098,9179712,9179921,9182048,9182500,9179269,9180907,9181640,9179608,9180241,9182178,9182659],"slow":[9180483,9181512,9180852,9179074,9179552,9180973,9179339],"down":[9180483,9180245,9179796,9180973,9180280,9180831,9179762,9179306,9179223],"chang":[9180483,9182621,9179217,9181010,9179143,9181686,9179560,9179313,9182664,9181141,9181939,9180032,9182312,9180261,9180128,9180280,9180934,9182424,9181183],"appl":[9180483,9179217,9181512,9179028,9179105,9181320,9180245,9179946,9179906,9179882,9180307,9179932,9179992,9179035,9179572,9179560,9180032,9179156,9180476,9180312,9179921,9180195,9182674,9180756,9180290,9182178,9180840,9179122],"matur":[9180483,9180097,9180501],"great":[9180483,9179004,9179852,9179855,9180145,9179594,9180107,9180737,9180465,9181201,9179840,9179215,9180211,9179269,9180116,9180632,9182178],"driv":[9180483],"amount":[9180483,9182534,9179906,9181887,9179086,9181162,9181292,9180973,9180241],"pain":[9180483,9181010,9179230,9182587,9180541,9180703,9179698,9179870,9179725,9180290],"bas":[9180483,9178990,9179423,9179339,9180335,9182500],"crud":[9180483,9179339,9182277],"app":[9180483,9182815,9179906,9179992,9180060,9182572],"running":[9180483,9181512,9181489,9180245,9179476,9179560,9180206],"backend":[9180483],"high":[9180483,9180038,9179859,9179852,9179882,9182702],"push":[9180483],"from":[9180483,9181010,9180247,9179028,9179152,9179105,9179004,9180245,9181206,9179852,9182587,9179936,9182816,9179284,9179476,9179364,9179932,9179992,9179035,9179572,9180095,9179315,9181939,9181835,9182033,9180101,9180549,9182527,9180221,9181193,9181292,9180973,9180286,9180344,9180142,9181057,9180141,9179156,9179840,9179182,9179339,9179698,9179870,9180102,9179306,9179493,9179835,9182277,9180195,9179725,9182719,9182572,9180290,9180632,9180907,9179605,9179655,9182178,9179879,9180670,9181183],"brows":[9180483],"serv":[9180483,9182811,9179074,9180245,9181386,9179852,9180009,9180703,9182277,9179260,9182500,9179885,9182178],"json":[9180483,9182621,9179946,9179882,9179970,9179901,9179997,9179594,9180009,9181887,9181671,9180756,9182659],"xml":[9180483,9181939,9182217,9180251,9180286,9180791],"valid":[9180483,9179004,9179665,9181095,9181292,9179679,9179921],"convert":[9180483,9178990,9179915],"sanit":[9180483,9179200],"using":[9180483,9180499,9179159,9179028,9179004,9182811,9181441,9181386,9179852,9179906,9180073,9179901,9179992,9179035,9179572,9180060,9179552,9182664,9179597,9181141,9181939,9179665,9181481,9180152,9181095,9180876,9181193,9181292,9181453,9180973,9180831,9180465,9180048,9180541,9180149,9179430,9179762,9179339,9179183,9180098,9180736,9182277,9180195,9182674,9180756,9180335,9182719,9179236,9179352,9182500,9179269,9179575,9180116,9179605,9182178,9180139],"prepared":[9180483,9180032,9180966,9182312,9180152],"stat":[9180483,9179217,9179420,9180801,9181887,9180032,9180966,9181481,9182312,9180152,9180261,9182217,9180876,9180128,9180465,9180048,9180448,9179306,9179493,9180126,9182048,9179260,9180290,9180632,9179148],"stored":[9180483,9181908,9180245,9181206,9181305,9181076,9182312,9181039,9179156,9179182,9180632,9180907],"procedur":[9180483,9179315,9182312,9181039,9179156,9179182,9180632],"send":[9180483,9179460],"compar":[9180483],"jsonâ„¢":[9180483],"one":[9180483,9182621,9179217,9181010,9180247,9179231,9179028,9178990,9179152,9179004,9182811,9179074,9179855,9180307,9180009,9179476,9179364,9179932,9179992,9181076,9179313,9179315,9179805,9181887,9179086,9180421,9181939,9179915,9180032,9180966,9181481,9181671,9180221,9180261,9180737,9180952,9181453,9180465,9180141,9180541,9180703,9179423,9179430,9179801,9179339,9179698,9179870,9180476,9179712,9179790,9179461,9182674,9182572,9180290,9181727,9180632,9180907,9179860,9182424,9182178,9180139,9179632,9182659],"killed":[9180483],"lack":[9180483,9179217,9180009,9182725,9182664,9180107,9180737,9180973,9179712],"reliability":[9180483,9178969,9179228,9179970,9182702,9179284,9181887],"startup":[9180483,9182621,9179855,9179284,9179260],"may":[9180483,9179105,9179004,9181386,9179432,9182664,9180421,9181039,9181292,9180834,9179430,9179712],"los":[9180483],"easily":[9180483,9182816,9181076,9179035,9180060,9180448,9179306,9179493],"dropped":[9180483],"perform":[9180483,9178969,9182811,9181441,9179882,9179970,9180882,9179035,9179315,9180966,9180549,9181551,9179840,9179248,9179762,9179339,9179870,9180102,9180756,9182500,9179269,9180907,9181640,9180412],"scalability":[9180483,9179432,9182500],"security":[9180483,9180501],"wel":[9180483,9180247,9179136,9179159,9180245,9180073,9179432,9179086,9180032,9180232,9180155,9180737,9180833,9180831,9181551,9181057,9180501,9179423,9179430,9179733,9179200,9182023,9179215,9179404,9180756,9179236,9179260,9182500,9182178],"now":[9180483,9182621,9179230,9179004,9179074,9179946,9179420,9180009,9179932,9182725,9179035,9179915,9180206,9180314,9180737,9182023,9180312,9182572,9179260,9179614,9182424,9180139,9180840,9179810],"intended":[9180483,9180221,9180764,9181039,9180241],"saf":[9180483,9179743,9179476,9180831,9180142],"san":[9180483,9179835],"choic":[9180483,9182621,9179049,9179152,9180073,9180156,9180966,9182312,9180107,9180833,9179156,9180476,9180116],"big":[9180483,9179049,9179970,9179364,9181076,9180421,9180541],"enterpris":[9180483,9180312],"neg":[9182534,9179936],"tim":[9182534,9180499,9182802,9179028,9179859,9179228,9179152,9179163,9179085,9179095,9179004,9181441,9179970,9179901,9179420,9180009,9179796,9179364,9179432,9179582,9179035,9180095,9180060,9179552,9179313,9181887,9180421,9181939,9180737,9180465,9180048,9180448,9180978,9181201,9179423,9179182,9179248,9179343,9182023,9180736,9180335,9179725,9182048,9179260,9179269,9180934,9180632,9180241,9182424,9182178,9182659],"popular":[9182534,9179004,9179594,9179870,9182277],"job":[9182534,9180421,9181939,9180335],"board":[9182534],"i'd":[9182534,9180247,9179004,9179074,9179855,9179970,9180095,9179552,9181939,9180784,9180232,9180549,9181453,9180791,9180831,9180344,9180475,9180048,9180141,9180149,9179698,9179870,9180736,9180335,9182178,9179810],"honestly":[9182534,9180009,9182664,9180831,9179679],"read":[9182534,9179217,9181441,9179906,9179936,9180009,9179832,9179597,9182018,9180833,9181292,9180465,9180834,9179752,9179698,9179870,9179200,9179461,9179404,9181028,9179094,9182424],"success":[9182534,9182621,9180312],"cas":[9182534,9182621,9179028,9179105,9180245,9180073,9180145,9182442,9180575,9179805,9181887,9182018,9179665,9180966,9182312,9181671,9180261,9180876,9180831,9180465,9180475,9180048,9181522,9180141,9180541,9180703,9180978,9179840,9179339,9179870,9179712,9179215,9179679,9179921,9180335,9182500,9179575,9180632,9181640],"tend":[9182621,9179855,9179756,9179269,9180241],"quiet":[9182621],"folk":[9182621,9182811],"who":[9182621,9181010,9178969,9180882,9180009,9179552,9179805,9180421,9181141,9180032,9180152,9180764,9180128,9179712,9179461,9179215,9182500,9180290,9179269,9182424],"happy":[9182621,9179095,9179222,9179215,9179148],"internet":[9182621,9179476],"defend":[9182621,9180009],"i've":[9182621,9181010,9180247,9178969,9179159,9179028,9180097,9179786,9179906,9179936,9180882,9179572,9179560,9179313,9180155,9182217,9180973,9180048,9180703,9179156,9179423,9179840,9179870,9179306,9182023,9180126,9179404,9179679,9179725],"straight":[9182621,9181671],"project":[9182621,9179786,9180882,9179284,9180009,9179796,9179992,9179432,9179035,9179572,9180363,9180221,9180737,9181551,9179460,9179840,9179248,9179339,9179870,9180102,9180736,9180335,9179725,9179803,9182500,9179885],"wher":[9182621,9180247,9178969,9180038,9181908,9179074,9180245,9180009,9179992,9180032,9180966,9181835,9182312,9180101,9180549,9181500,9181095,9182217,9180369,9180128,9180973,9180286,9181123,9181393,9180344,9180142,9180703,9180149,9180834,9179430,9179840,9179182,9179339,9179870,9179470,9179835,9180098,9180335,9182048,9182719,9182500,9181640,9180241],"fin":[9182621,9181908,9179997,9180101,9179840,9182178],"wors":[9182621,9180421,9179665,9182500,9180632,9180241],"certainly":[9182621,9178990,9180095,9179416,9179712,9182719],"nowher":[9182621],"bad":[9182621,9179970,9182702,9179364,9179035,9181671,9180831,9179182,9179339,9179870,9180102,9179260,9180632,9179868],"assum":[9182621,9181512,9179004,9181320],"reading":[9182621,9182802,9181841,9182725,9179597,9182178],"negativity":[9182621],"around":[9182621,9180247,9178969,9182815,9179906,9179420,9179992,9180060,9179560,9181887,9182664,9181939,9181321,9181057,9179840,9179304,9179350,9182424,9182178],"her":[9182621,9181010,9182802,9178969,9180038,9179796,9179476,9182725,9181076,9182664,9181939,9180966,9180149,9179430,9179666],"experi":[9182621,9182725,9181939,9180966,9180501,9181201,9179430,9179840,9179870,9179725,9180907,9182178,9180412],"st":[9182621,9179672,9180245,9180421,9180286,9180834,9182048],"differ":[9182621,9179028,9179004,9181441,9179786,9181206,9179906,9180882,9179932,9179992,9180032,9181481,9182312,9180221,9180833,9181321,9180876,9180831,9179870,9180736,9179215,9181028,9179350,9180241,9182178],"context":[9182621,9182500],"production":[9182621,9179049,9179970,9180882,9182702,9179901,9179805,9181887,9182312,9179248,9180632,9182178],"soci":[9182621],"gam":[9182621,9182018,9182659],"common":[9182621,9179152,9179946,9180060,9180156,9182312,9181551,9181640],"use":[9182621,9179217,9180247,9180774,9179028,9179228,9180097,9179049,9179085,9179105,9179004,9182811,9180245,9181386,9179786,9179946,9179852,9179906,9179855,9180073,9179882,9179970,9180882,9180145,9180307,9179284,9180567,9181305,9180009,9182442,9181076,9180575,9179560,9179832,9182018,9179086,9179665,9180032,9181714,9180784,9182527,9180152,9180221,9180261,9181095,9180737,9180833,9182217,9180973,9180280,9181393,9182102,9180831,9180142,9180465,9180475,9180048,9180501,9180141,9180541,9180703,9180149,9179156,9179423,9179182,9179222,9179801,9179698,9179870,9180102,9182023,9182277,9179215,9179666,9179679,9179921,9180756,9180335,9181028,9182500,9179885,9179575,9180116,9180632,9180907,9179116,9180653,9179860,9179810],"search":[9182621,9180247,9180032,9180973,9180280,9180465,9180149,9180834,9179655,9182178,9180412],"show":[9182621,9180097,9179284,9182664,9180286,9180831,9179156],"som":[9182621,9181010,9179152,9179105,9181441,9179284,9179420,9179594,9180009,9179476,9182725,9179805,9181628,9181887,9182664,9182018,9180421,9181939,9179665,9180032,9180966,9181835,9180152,9180764,9180261,9181095,9180737,9180833,9182217,9181193,9181292,9181453,9180280,9180724,9181393,9180831,9180541,9180149,9181201,9179460,9179423,9179840,9179182,9179698,9179870,9180835,9179712,9182277,9179921,9180756,9179725,9182719,9181028,9182500,9180632,9180907,9180241,9182178,9180840,9182659],"stor":[9182621,9180247,9179028,9179004,9179946,9181206,9179906,9181076,9180241,9182178,9182659],"good":[9182621,9178969,9182815,9179004,9179855,9179936,9179901,9179594,9179992,9179035,9179915,9182217,9180791,9180724,9179156,9179430,9179840,9179182,9179698,9180102,9179200,9179461,9179666,9179725,9179260,9180632,9180907,9181640,9182424,9182178,9182659],"starting":[9182621,9179105,9179074,9182664],"really":[9182621,9178969,9181489,9179074,9180245,9179852,9179906,9179855,9179936,9179901,9180145,9179420,9180009,9179796,9179035,9180095,9181887,9179086,9181939,9182312,9180206,9180221,9180764,9180261,9180973,9180831,9181551,9180048,9180501,9180703,9179156,9179840,9179733,9179698,9179870,9179343,9180098,9179461,9179404,9179666,9180335,9179725,9180116,9180653,9180840],"especially":[9182621,9180038,9179796,9179315,9182527,9182217,9181057,9180141,9179156,9179148,9182659],"lean":[9182621],"methodology":[9182621],"go":[9182621,9180251],"product":[9182621,9180247,9179028,9182811,9179901,9179997,9179284,9179313,9180571,9180032,9180549,9180737,9181193,9181292,9180973,9180280,9180387,9180831,9180149,9179416,9180102,9180312,9180241,9180670],"hand":[9182621,9179906,9181939,9180102,9180632,9180907],"us":[9182621,9179004,9181206,9179086,9180032,9180184,9182527,9180261,9181095,9180128,9180142,9180048,9180149,9179182,9180476,9179712,9179921,9182048,9180290,9180569,9179304],"quickly":[9182621,9179946,9179035,9181453,9179182,9180335,9182500],"poss":[9182621,9180774,9179143,9182291,9181206,9180882,9180095,9180032,9180876,9181453,9180251,9179148],"anticip":[9182621],"pretty":[9182621,9182291,9179901,9179035,9180155,9180876,9180280,9180831,9180344,9179840,9179222,9179422,9179248,9179339,9180476,9179493],"fantast":[9182621,9179946],"stabil":[9182621],"moving":[9182621,9182815,9179992,9180095,9179315],"isn't":[9182621,9180247,9179163,9179284,9179035,9179552,9180549,9181095,9180710,9179339,9179223,9179803,9182048,9180907,9182178],"expens":[9182621,9179004,9182048,9182178],"modeled":[9182621],"based":[9182621,9179228,9179313,9180032,9181835,9182312,9182217,9180128,9180973,9180048,9180149,9180756],"assumption":[9182621],"postgresql":[9182621,9180247,9180774,9179228,9178990,9181908,9179852,9179906,9179970,9181076,9179805,9179915,9179215,9182719,9180653,9180139,9180670],"datatyp":[9182621,9180141,9180703],"pres":[9182621],"painless":[9182621],"path":[9182621,9181481],"outgrow":[9182621],"both":[9179217,9179074,9181386,9179901,9179313,9179805,9179597,9179665,9180128,9181393,9179870,9179666,9182572,9181640,9179605,9180241,9180412,9180670],"com":[9179217,9181010,9179228,9179143,9179074,9180245,9179992,9181887,9182527,9180952,9180973,9180344,9181057,9179423,9179306,9180126,9180098,9180335,9179725,9180290,9179868],"cool":[9179217,9182291,9180102,9180116,9180653],"h":[9179217,9180421,9180290,9182659],"nowaday":[9179217,9179152],"successfully":[9179217,9180882,9179597,9182018],"pep":[9179217],"open":[9179217,9180603],"sourc":[9179217,9181386,9180149],"version":[9179217,9181489,9179852,9179364,9179035,9181292],"used":[9179217,9181010,9182815,9180097,9179152,9179946,9179852,9179906,9180009,9179805,9181887,9179597,9182018,9179665,9180221,9180764,9181039,9182217,9181393,9180703,9179156,9179423,9179870,9180102,9179200,9182023,9182500,9179860,9179122],"mentioned":[9179217,9179230],"between":[9179217,9179159,9179028,9182811,9179970,9179582,9180095,9180966,9181095,9181522,9179156,9180290,9180241,9182178],"improved":[9179217,9180038,9179228],"much":[9179217,9179028,9179152,9179004,9181441,9179074,9180245,9179906,9179936,9179970,9179796,9179313,9181939,9179665,9180232,9180107,9180833,9181292,9181467,9180973,9181160,9180831,9180344,9180048,9180501,9180149,9180834,9179430,9179182,9179222,9179343,9179183,9179306,9179493,9180835,9179712,9182048,9182500,9179269,9179575,9180632,9180907,9180653,9182424,9180553],"recently":[9179217,9182815],"clearly":[9179217,9182048],"identified":[9179217],"inst":[9179217,9179695,9181193,9181292,9179304,9182178,9180139],"opa":[9179217],"strong":[9179217,9179028,9179901],"typing":[9179217,9179901,9179594,9180221,9180833,9181335,9179608],"gener":[9179217,9179163,9181939,9180206,9180363,9180048,9180141,9179248,9179339,9180102,9182719,9181028,9180632,9180907],"whol":[9179217,9179004,9182811,9181320,9180831,9179343,9182048,9179260,9179885],"stick":[9179217,9179684,9179712],"leav":[9179217,9180142],"out":[9179217,9179004,9179074,9180245,9179906,9182587,9179855,9180882,9179901,9179997,9181841,9179420,9180009,9179932,9181076,9181887,9182664,9181141,9181939,9180966,9180101,9182527,9181095,9181453,9180831,9181551,9180141,9179222,9179422,9179756,9179698,9179870,9179921,9182500,9179269,9179304,9180116],"nee":[9179217,9182815,9179049,9179152,9181489,9179105,9179004,9181908,9180245,9179786,9179946,9180997,9179906,9179882,9179420,9179695,9179594,9179315,9182664,9180032,9180232,9180314,9180128,9180973,9180465,9181201,9179840,9179712,9179666,9180756,9179803,9181028,9182500,9180290,9180632,9181640,9180653,9182424,9182178,9180840],"collection":[9179217,9179159,9181386,9182277],"ram":[9179217,9179004,9182811,9179074,9180245,9180149],"enough":[9179217,9179228,9180245,9179997,9179594,9179992,9179430,9179733,9182500,9182424],"working":[9179217,9179095,9179074,9180245,9179284,9182725,9179915,9180831,9179840,9180335,9179725,9180241,9182424],"set":[9179217,9178990,9182811,9179074,9180245,9181386,9179946,9179855,9180032,9180973,9180541,9180149,9180335,9179269,9180139],"help":[9179217,9179085,9181076,9179035,9180261,9179156,9179416,9179840,9179339],"mag":[9179217,9182719,9179269],"shar":[9179217,9180412],"feel":[9181010,9181110,9180247,9179028,9179786,9180997,9179906,9179901,9179476,9180149,9179430],"i'm":[9181010,9182815,9182811,9179906,9179901,9179997,9179284,9181305,9179594,9180009,9179992,9181887,9182664,9181939,9180032,9180966,9180152,9182217,9181193,9181292,9180280,9180465,9179423,9179698,9179306,9179404,9179725,9182719,9179148,9180553],"missing":[9181010,9179992,9181887,9182674],"along":[9181010,9179105,9179852,9181292,9180280,9179470,9182048],"lin":[9181010,9180073,9179313,9181887,9181939,9180966,9182527,9180737,9180280,9180465,9179470,9182048,9182572,9182500],"issue":[9181010,9180000,9180097,9182811,9179074,9180882,9181887,9182664,9179460,9179423,9179248,9179339,9179223,9179269,9179605,9182178],"only":[9181010,9179028,9179743,9180245,9179852,9179906,9180801,9180009,9179086,9180421,9181939,9179665,9180032,9182312,9180152,9180107,9181335,9182217,9181193,9180710,9180973,9180344,9180465,9180048,9181201,9180834,9179156,9179339,9179698,9179790,9179921,9181028,9180653,9179860],"who'":[9181010],"thinking":[9181010,9180000,9179786,9179901,9179560,9179915,9180101,9181292,9182500],"correct":[9181010,9179432,9179597,9179665,9179260,9179879],"behavior":[9181010,9179143,9179852],"part":[9181010,9179074,9181887,9180831,9181522,9180141,9179306,9179493,9180335,9182178],"dbm":[9181010,9180000,9180575],"three":[9181010,9179231,9179028,9179228,9179004,9179300,9181887],"result":[9181010,9178969,9179594,9181239,9179597,9180032,9180966,9180549,9180107,9181193,9181292,9180142,9180141,9180149,9180834,9182048,9179269,9179350],"oper":[9181010,9179597,9180156,9181057,9180102,9181028,9182178],"everything":[9181010,9179230,9179074,9180575,9181887,9180571,9182312,9180831,9179156,9179655],"okay":[9181010,9181110,9180997],"sorry":[9181010],"dav":[9181010],"can't":[9181010,9180247,9179230,9182788,9179420,9179796,9182725,9181887,9180966,9180206,9180261,9180286,9180901,9179725,9181028,9180290,9179350,9180553],"insist":[9181010],"going":[9181010,9179230,9180245,9179901,9179997,9180009,9179582,9179560,9182664,9182069,9180032,9180261,9180737,9180128,9180973,9180831,9180541,9180149,9179840,9179182,9179248,9179339,9179698,9179870,9179404,9179679,9182048,9179269,9180116,9180632,9180907],"work":[9181010,9180038,9179228,9181441,9179901,9179997,9179364,9179992,9179432,9179572,9181887,9182664,9179086,9181939,9180101,9180232,9180155,9180952,9180128,9181193,9181292,9181453,9181467,9180280,9180387,9180831,9180344,9181057,9180048,9180541,9180149,9181201,9179156,9179460,9179430,9179840,9179182,9179733,9179306,9179493,9182023,9179404,9180756,9180335,9182719,9182572,9179269,9179116,9182424],"programm":[9181010,9180000,9180465,9180703,9179423,9179712,9182048,9180241],"awar":[9181010,9179012,9180882,9180032,9180966,9181453,9179182],"respond":[9181010],"appropriately":[9181010,9182811],"anything":[9181010,9181512,9179074,9180245,9182217,9179430,9179116,9182424],"else":[9181010,9181441,9179852,9180073,9180575,9180421,9180966,9180101,9181039,9180737,9180280,9180831,9180141,9179725],"lazi":[9181010,9180009,9180141,9180116],"subtl":[9181010],"consider":[9181010],"thought":[9181010,9179228,9181628,9180966,9180549,9180764,9179790,9180632],"process":[9181010,9179159,9179796,9181939,9179430,9179870],"na":[9181010,9182210,9179582],"understand":[9181010,9182811,9179997,9182664,9180206,9180831,9180344,9180978,9180149,9179430,9179712,9179223,9179803,9182048,9179260,9182500,9179575],"becaus":[9181010,9181110,9180774,9179783,9179152,9179074,9180245,9181206,9179901,9179420,9181686,9179932,9180060,9179313,9181887,9181141,9181939,9179915,9180107,9180737,9182217,9181193,9181292,9181453,9180286,9180387,9180831,9180448,9180541,9180703,9179430,9179182,9179222,9179698,9179870,9180102,9179200,9180476,9180126,9179725,9179260,9182500,9180290,9179304,9180241,9182424,9182178,9182659],"getting":[9181010,9179855,9180009,9181453],"right":[9181010,9179786,9179852,9179420,9180009,9182442,9179932,9179992,9181939,9181393,9181160,9180141,9179182,9179679,9180335,9179725,9181028,9180907,9181640],"react":[9181010],"improp":[9181010],"sometim":[9181010,9179594,9181939,9180966,9180344,9180141,9180756],"alway":[9181010,9180247,9179159,9179004,9180073,9179313,9180571,9181939,9179915,9180966,9181039,9180541,9179423,9182023,9179236],"personally":[9181110,9179049,9180882,9179284,9181939,9180834,9179215,9180756,9182048,9180637],"eith":[9181110,9181489,9181320,9179786,9182788,9180060,9179805,9180156,9181939,9180261,9179404,9182572,9180840],"sort":[9181110,9179159,9179228,9182811,9179313,9181887,9180032,9180966,9180764,9180261,9180876,9181193,9181292,9180280,9180724,9179698,9179870,9180335,9182424],"impl":[9181110,9179420,9179665,9180102,9179461,9179215],"fuzzy":[9181110],"definition":[9181110,9181481,9179223],"boundar":[9181110],"develop":[9181110,9179028,9179284,9179420,9179432,9181076,9179552,9181887,9182664,9179086,9181939,9180819,9180831,9180501,9180541,9179156,9179423,9179339,9179870,9180102,9179712,9179215,9180335,9179725,9179260,9180290,9180653,9182424,9182178],"learn":[9181110,9179049,9179855,9179086,9182801,9180737,9180973,9180831,9180978,9179423,9179575,9179148],"say":[9181110,9180247,9179004,9181441,9180956,9179552,9180032,9180549,9181039,9180791,9180475,9180141,9179182,9179801,9179339,9179870,9182048,9179260],"int":[9181110,9178990,9181441,9181841,9180149],"g":[9181110,9179163,9179004,9182587,9179970,9179086,9182312,9180831,9179156,9180476,9179493,9182500,9179608,9180553],"fail":[9181110,9179260],"coerced":[9181110],"according":[9181110,9181076,9180501],"database'":[9181110],"idea":[9181110,9179004,9182811,9179901,9179432,9181939,9182217,9180973,9179698,9179870,9180632],"coercability":[9181110],"system":[9180499,9180038,9179228,9179882,9180882,9179364,9179432,9179582,9179805,9179665,9180831,9179870,9179712],"graph":[9180499,9180009,9180901,9179762],"qu":[9180499,9179159,9181887,9179665,9181714,9182312,9180206,9180221,9180973,9180280,9180831,9180465,9180475,9180048,9180149,9179156,9179430,9179840,9179182,9179422,9179756,9180603,9179762,9179339,9179698,9179870,9179200,9179470,9179306,9179493,9182023,9179835,9182277,9182048,9179352,9179304,9180907,9179116,9180412,9182659],"respons":[9180499,9181141,9181939,9180141],"thank":[9182803,9179906,9179970,9180009,9181321,9180831,9182023,9179148,9180139],"god":[9182803,9179423],"return":[9182803,9180966,9181481,9180876,9180280,9180448,9180149,9180834],"sanity":[9182803,9179012],"aversion":[9180247],"derived":[9180247],"readi":[9180247],"uninformed":[9180247],"peopl":[9180247,9181512,9179230,9179152,9182811,9179786,9180882,9179901,9179284,9181305,9182725,9179313,9181887,9182664,9179086,9180421,9181939,9180032,9180152,9180261,9181292,9179416,9179222,9180102,9179223,9179725,9182048,9179269,9180116,9180241],"d":[9180247,9179548,9180335],"integr":[9180247],"cre":[9180247,9178990,9179786,9179970,9179284,9179420,9180801,9180009,9180060,9181193,9181292,9180048,9179679,9180116,9181183],"web":[9180247,9180756],"complexity":[9180247,9179159,9180973,9179182],"ideally":[9180247],"boring":[9180247,9180421],"reli":[9180247,9179152,9179074,9179860],"heard":[9180247,9180973],"fals":[9180247,9180973,9179182],"pertaining":[9180247],"postgr":[9180247,9179859,9179228,9182815,9179095,9182291,9179074,9179946,9179852,9179906,9179284,9179035,9179040,9179315,9180032,9180966,9182312,9182277,9179655,9180840],"semi":[9180247],"structured":[9180247,9179859,9179946,9179852,9179906,9182587,9181076],"ful":[9180247,9179035,9182277,9181028,9182500],"text":[9180247,9180032],"scal":[9180247,9178969,9179136,9180038,9179028,9179852,9182587,9179284,9179420,9180102,9179260,9182500,9179860],"programming":[9180247,9180152,9180501,9179430,9179200],"geograph":[9180247],"index":[9180247,9181512,9182811,9179852,9179906,9181028,9182500,9182178,9182659],"that'":[9180247,9180852,9179004,9182291,9180245,9181206,9179906,9180073,9179284,9179594,9179035,9182069,9181671,9182217,9181292,9180251,9180831,9181201,9179423,9179840,9179182,9179222,9179698,9179870,9179306,9179493,9182048,9179260,9181727,9179350],"true":[9180247,9179852,9180073,9180549,9180973,9181727],"fucking":[9180247,9179156],"pow":[9180247,9179665,9182217,9179430,9179222,9179608],"arguably":[9180247,9178990,9179932],"key":[9180247,9181512,9181206,9179284,9179572,9180241],"log":[9180247,9181320,9179074,9180245,9181386,9179420,9182312,9181039,9180973,9181522,9179756,9179870,9180290],"multi":[9180247,9179796],"purpos":[9180247,9182178],"long":[9180247,9179159,9179085,9179004,9182702,9179997,9179992,9179432,9179597,9182217,9180142,9180703,9180335,9180241,9182178],"lived":[9180247],"seem":[9180247,9181512,9179228,9179997,9179796,9179932,9179992,9181887,9182664,9180156,9180724,9179404,9179725,9179260,9180290,9180907],"attractor":[9180247],"requir":[9180247,9179028,9182815,9180073,9179997,9179432,9179035,9181141,9181939,9181671,9180261,9181095,9180876,9181160,9180142,9180465,9180541,9179339,9180476,9180335,9180907,9179860,9182178,9180840],"accrue":[9180247],"hous":[9180247],"/nih":[9180247],"non":[9180247,9179152,9180290],"converg":[9180247],"plac":[9180247,9180097,9179582,9179035,9179572,9180363,9181453,9179182,9179870,9179404,9179605,9182424,9182178],"larg":[9180247,9179152,9182811,9179074,9180245,9181305,9180421,9180221,9180107,9181551,9179870,9182048,9181028,9179860],"100+":[9180247],"plenty":[9180247,9180009],"specialized":[9180247,9182023],"reason":[9180247,9179231,9179230,9179152,9179095,9179004,9179572,9182018,9181939,9180737,9180973,9179423,9179840,9179698,9179870,9179461,9182500,9182659],"doubt":[9180247,9181887,9182572],"postgres'":[9180247],"competit":[9180247],"elasticsearch":[9180247],"most":[9180247,9181512,9182811,9180245,9182587,9180882,9180009,9179992,9182725,9179035,9179552,9179313,9181887,9179086,9181939,9180737,9181292,9180541,9179416,9179430,9179870,9182277,9180756,9179725,9182048,9181028,9182572,9180290,9180653,9182178],"anti":[9180247],"senti":[9180247],"against":[9180247,9179004,9180245,9180009,9181887,9180261,9180724,9180149,9179756,9180102,9182277],"languag":[9180247,9179901,9179420,9179594,9179796,9181887,9181939,9179915,9180232,9180152,9181039,9180107,9180737,9182217,9180876,9180724,9181160,9180831,9180048,9179430,9179182,9180102,9179200,9179306,9179493,9182023,9180835,9179835,9182048,9179260,9179269,9180632],"sur":[9180247,9181512,9179228,9180097,9182811,9179855,9180073,9179901,9181305,9180009,9179035,9182664,9182217,9180831,9182719,9179116],"ugly":[9180247,9179339,9179304],"outmoded":[9180247],"rath":[9180247,9180095,9179086,9182069,9179915,9180784,9180101,9180819,9180149,9179870,9180195,9182674,9180632,9179810],"rock":[9180247],"solid":[9180247,9180335],"tech":[9180247,9179992,9179725],"finally":[9180247,9182802,9179970],"fuck":[9180247,9182802],"point":[9181512,9179228,9179152,9179004,9181320,9181908,9181386,9182587,9179992,9182725,9180784,9180101,9180549,9180737,9181193,9181160,9180831,9179870,9182023,9179803,9179260,9182500,9180290,9182659],"perhap":[9181512,9179012,9181887,9180876],"annoy":[9181512],"magically":[9181512,9180009],"fast":[9181512,9180245,9179901,9179432,9181141,9181939,9179840,9180335,9179725,9179260,9182500,9180241,9179655,9182424],"pair":[9181512],"lookup":[9181512,9181028],"run":[9181512,9178969,9179159,9180882,9179420,9179805,9182664,9179665,9180149,9179733,9180603,9182277,9181028,9182424,9182659],"shit":[9181512,9179698,9179870],"shovel":[9181512],"soon":[9181512,9180060,9180973,9179840],"complex":[9181512,9181887,9181039,9180465,9182023,9182048,9179260,9180632,9179116,9181640],"likely":[9181512,9182725,9179552,9180632,9180907],"few":[9181512,9178969,9179228,9179284,9179420,9180801,9179552,9179560,9181939,9179665,9180032,9181481,9182312,9180363,9182217,9179339,9179343,9180312,9179404,9182424,9181183],"usually":[9181512,9181939,9181467,9180541,9180149,9179921,9179725],"cloud":[9181512],"platform":[9181512,9181039,9179182],"reality":[9181512,9181393,9180907,9182424],"vp":[9181512],"cheap":[9181512],"amen":[9182802],"wondered":[9182802],"geez":[9182802],"could'v":[9182802],"written":[9182802,9182811,9181441,9181887,9179665,9182312,9180737],"query":[9182802,9179159,9178990,9179946,9181887,9179665,9179915,9180032,9181481,9182312,9180232,9180314,9180363,9180152,9180221,9180261,9180876,9180128,9181193,9181292,9181453,9180710,9180973,9180280,9181393,9180831,9180142,9180465,9180475,9180048,9180448,9180501,9180141,9180149,9180834,9179156,9180603,9179801,9179248,9179752,9179339,9179698,9180102,9179684,9179306,9179493,9180835,9179835,9179679,9182719,9181028,9179608,9182659],"doc":[9182802],"not":[9180774,9180128,9179182,9179461,9182719],"doesn't":[9180774,9179028,9180097,9181489,9182811,9180245,9179786,9180060,9182018,9181939,9180221,9181095,9181160,9180831,9180141,9179422,9180195,9182572,9179885,9179608,9182178,9180840],"mean":[9180774,9179105,9179004,9179970,9180009,9181076,9180913,9179597,9182018,9182312,9180745,9181160,9179840,9182674,9182048,9182572,9180211],"easy":[9180774,9179152,9179284,9179420,9179313,9182801,9180221,9180261,9180737,9179430,9179733,9179870,9180756,9179860,9182424],"question":[9180774,9181320,9179786,9180032,9180152,9180261,9180876,9180465,9180048,9180501,9179156,9179416,9179608,9180615],"rephrased":[9180774],"why":[9180774,9179159,9179230,9179004,9180245,9181386,9180997,9179901,9180009,9179832,9181887,9182664,9180571,9181939,9180833,9180128,9181193,9181292,9181453,9180831,9180541,9179182,9179248,9179698,9179870,9179306,9179712,9179679,9182048,9182572,9180116,9182424],"anybody":[9178969],"moder":[9178969,9180421,9180703,9180241],"terabyt":[9178969,9182811],"10k":[9178969],"ops/second":[9178969],"territory":[9178969],"disappointed":[9178969],"situ":[9178969,9180703,9180116],"ye":[9179136,9180307,9180913,9181939,9180221,9181335,9180344,9180149,9179460,9179222,9179762,9182048,9182500],"implemented":[9179136,9180280,9181201,9182048],"correctly":[9179136,9180801,9179404],"39m+":[9179159],"record":[9179159,9179672,9179906,9182788,9181467,9182178],"tracking":[9179159],"financi":[9179159,9181386],"tick":[9179159],"across":[9179159,9181551],"asset":[9179159,9179284],"anywher":[9179159],"3min":[9179159],"depending":[9179159,9182788,9182572],"currentop":[9179159],"shel":[9179159,9179476],"taking":[9179159,9180973,9179343,9180312,9179260,9179605],"forev":[9179159],"let":[9179159,9179004,9179786,9182587,9179582,9181095,9180737,9180831,9179725,9182048,9182500],"clarify":[9179159,9179105],"though":[9179159,9182291,9179852,9179284,9180009,9179582,9181939,9181835,9182217,9180973,9180831,9179430,9179306,9179223,9180116,9179116],"method":[9179159,9179597,9182018,9180710,9180973,9180335,9180569,9179350],"optimizing":[9179159,9179582],"adding":[9179159,9179597,9180501,9179182,9179712,9180335,9181183],"anoth":[9179159,9179228,9179004,9180307,9179594,9179315,9179597,9180966,9180232,9181671,9180737,9180141,9180703,9179339,9179712,9180335,9180632],"sinc":[9179159,9180097,9181441,9180245,9179992,9180261,9180834,9179840,9179182,9182659],"travers":[9179159],"cursor":[9179159],"jesu":[9179672],"christ":[9179672],"rememb":[9179672,9179004,9179915,9180107,9180835],"querying":[9179672,9179035,9180221,9180149,9182500],"100":[9179672,9179906,9179086,9181292,9181057],"million":[9179672],"foxpro":[9179672],"century":[9179672],"ago":[9179672,9179228,9182815,9179004,9180973,9179423,9179461,9180312,9179215],"took":[9179672,9179805,9182312],"less":[9179672,9181441,9179946,9180997,9179882,9179594,9179992,9181939,9180973,9181160,9180141,9180834,9180835,9179725,9179260,9182500,9180632,9180907,9179860,9180241,9182424],"second":[9179672,9179004,9179695,9180128,9182048,9181183],"happened":[9179672],"world":[9179672,9179594,9181887,9180421,9180107,9180286,9179698,9179870,9179803,9179260,9180670],"whil":[9179672,9182811,9181441,9181076,9179035,9180095,9179313,9179665,9179915,9182217,9180501,9179423,9179182,9180603,9179339,9179870,9179215,9180756,9182424],"cryogen":[9179672],"back":[9179672,9179230,9182815,9180245,9181386,9179300,9179582,9179572,9179915,9180876,9181453,9179423,9179840,9182048,9179269,9180632,9182424],"nitrogen":[9179672],"pool":[9179672],"choked":[9180852],"numb":[9180852,9179231,9178990,9179095,9180245,9181206,9180032,9180107,9180102,9180553],"row":[9180852,9178990,9181908,9181183],"thrown":[9180852,9179260],"away":[9180852,9179028,9179152,9179901,9179364,9179932,9179582,9179222,9179260],"immediately":[9180852,9179028,9180128,9180387],"coupl":[9180852,9179796,9180032],"ord":[9180852,9179086,9180032,9180966,9182312,9180261,9181095,9180876,9180128,9182048,9182500,9180569],"magnitud":[9180852],"nearly":[9179231,9180245,9180966],"year":[9179231,9180038,9179228,9182815,9180097,9179004,9182811,9179074,9179906,9179796,9179300,9179476,9179040,9179552,9180737,9182217,9179423,9179870,9179343,9179712,9179461,9180312,9179215,9179725,9180241,9182424],"consistently":[9179231],"sit":[9179231,9181028,9180139],"downtim":[9179231,9179074],"publ":[9180038,9180149],"ref":[9180038,9182815,9182664,9180387,9180901],"link":[9180038,9179970,9180286],"present":[9180038],"maintained":[9180038],"car":[9180038,9179743,9179086,9180098,9179921,9180412],"planning":[9180038,9180670],"imho":[9180038],"area":[9180038],"past":[9180038,9179152,9179085,9179074,9179855,9179594,9179805,9181939,9179423,9179215],"cam":[9179028,9182815,9182312,9180737],"company":[9179028,9179786,9179284,9179870,9179461],"attempting":[9179028,9180913,9182018,9182500],"soft":[9179028],"re":[9179028,9179882,9180009,9179423,9179183,9179306,9179223,9179803,9179260,9182500,9180569,9182178],"s":[9179028,9179859,9180000,9179284,9181141,9180107,9181160],"low":[9179028,9182815,9179882,9179970,9180241],"medium":[9179028],"atroci":[9179028,9180241],"without":[9179028,9179074,9179855,9181686,9179597,9182018,9179665,9180206,9182527,9181671,9181292,9181393,9180703,9180335,9179725,9179304,9180116],"tremend":[9179028],"implicit":[9179028,9179712,9182178],"danger":[9179028],"introduc":[9179028],"they'r":[9179028,9180973,9180831,9180344,9180901,9179698,9179870],"insidi":[9179028],"enorm":[9179028],"dilig":[9179028],"codify":[9179028],"comfort":[9179028],"loos":[9179028,9182587],"docu":[9179028,9182424,9182659],"haskel":[9179028],"encountered":[9179028,9179870,9179790],"compan":[9179028,9179284],"expended":[9179028],"mov":[9179028,9181386,9182587,9179035,9180421,9180107,9179423,9182424],"every":[9179028,9179004,9182811,9181441,9179786,9180073,9179901,9179420,9180801,9179932,9179432,9180421,9180032,9180737,9180973,9180387,9180724,9179423,9179248,9179339,9179343,9180736,9182674,9182424,9182178,9182659],"each":[9179028,9181908,9179906,9179970,9179582,9181939,9180966,9181467,9180335],"appropri":[9179028,9179196],"there'":[9179028,9179936,9179420,9180009,9179932,9179665,9180032,9179423,9179698,9179870,9179306,9179493,9182277,9179461,9182048,9181028,9179148],"sad":[9179028],"inclin":[9179028],"pick":[9179028,9181939,9180541,9179840],"ring":[9179028],"rul":[9179028,9182178],"tool":[9179028,9179152,9179004,9182811,9179855,9179901,9181939,9179665,9180737,9180819,9179493,9180756,9180335,9180116,9180653],"believ":[9179028,9181939,9181393],"sel":[9179028],"itself":[9179028,9179004,9180221,9180764,9180107,9180737,9180465,9179182,9179870,9180195,9182674,9179260,9180211],"wer":[9179196,9179228,9179230,9179095,9179004,9179074,9179284,9181939,9181453,9179870,9179712,9180653,9180241],"riak":[9179859,9179852,9179906,9182587,9180073],"volum":[9179859,9179074,9179852],"flatt":[9179859,9179852],"tempodb":[9179859],"busi":[9179228,9180009,9179476,9181141,9181939,9181039,9181522,9180312,9181028,9182424,9182178],"company'":[9179228],"api":[9179228,9179915,9180286,9180387,9179430,9180835,9179835,9179236,9180934],"started":[9179228,9180245,9182725,9179572,9181453,9179269],"changing":[9179228,9181305,9179594,9179315,9179339],"lost":[9179228,9180997,9182664,9179269],"id":[9179228],"spee":[9179228,9182815,9180335,9179260],"didn't":[9179228,9179004,9182291,9179074,9180245,9179970,9179594,9179932,9179992,9179805,9181939,9180764,9180128,9179712,9179215,9179404,9182500,9180632,9180241],"guy":[9179228],"mailing":[9179228],"seemed":[9179228],"taken":[9179228,9180549,9179879],"insult":[9179228],"naÃ¯vetÃ©":[9179228],"howev":[9179228,9179004,9179901,9182664,9181939,9181481,9180784,9181057,9180141,9179339,9179870,9179712,9179215,9182572,9180653],"lat":[9179228,9182815,9179840,9179712,9180116],"said":[9179228,9179074,9179946,9182069,9180126],"switching":[9179228,9179284],"toâ€¦":[9179228],"replaced":[9179230,9182664],"trend":[9179230,9179260],"fueled":[9179230],"poor":[9179230,9182816,9180575,9180966,9180833,9182500],"found":[9179783,9179012,9179074,9182664,9180421,9180048,9180703,9179423,9179840,9179339,9179870,9182500,9179605,9182424],"structur":[9179783,9181908,9179420,9180567,9181076,9181887,9179343,9179306,9182023,9182424],"easi":[9179783,9182587,9181076,9181141,9181939,9179422,9180835,9182048,9180632],"becom":[9179783,9179284,9182217,9179712,9182500],"surpris":[9179783],"first":[9182815,9180097,9182587,9180073,9179901,9179284,9179420,9180009,9179364,9179572,9179805,9181939,9180966,9182312,9180737,9179756,9179339,9179870,9179404,9182048,9182500,9179605,9182424],"learned":[9182815,9179992,9182424],"php":[9182815],"mysql":[9182815,9180097,9178990,9179152,9179163,9179548,9179085,9179143,9179095,9179105,9179074,9179906,9179796,9179805,9179597,9180833,9179698,9179870,9182277,9181028,9179605,9182178,9181183],"got":[9182815,9179786,9182725,9180831,9182424],"introduced":[9182815,9180102,9180241],"surrounding":[9182815,9179152,9179236,9180653],"hyp":[9182815,9181939,9179182],"integrity":[9182815],"alon":[9180000,9179725,9182424],"allow":[9180000,9181386,9179786,9179901,9180032,9180966,9181481,9180261,9182217,9180876,9179423,9179430,9180102,9180335,9182500,9179304],"integ":[9180000,9178990,9180149],"yeah":[9180097,9179594,9180363,9182572,9180211],"activerecord":[9180097,9179035,9179572,9180095,9179156],"doing":[9180097,9181441,9179901,9179420,9179796,9181887,9181835,9180549,9181292,9181551,9181057,9180141,9180149,9179733,9179870,9179835,9180335,9179236,9179260,9182178],"quirk":[9180097],"piec":[9180097,9179582,9179086,9180141],"softwar":[9180097,9180073,9179432,9180831,9179423,9180476,9182048,9179260],"mistak":[9178990,9179992,9179725],"knowing":[9178990,9182500,9179614],"notion":[9178990,9179423],"happily":[9178990,9179882,9181841],"insert":[9178990,9179548,9181441,9181841,9181183],"textu":[9178990,9181841],"try":[9178990,9182587,9179855,9179970,9180344,9180149,9179430,9179248,9179752,9181640],"depend":[9178990,9179852],"quit":[9178990,9179004,9182811,9179882,9180882,9179932,9179582,9179552,9179665,9181835,9180363,9180155,9182217,9180475,9180335,9182719,9182572,9179148,9180615,9179094],"exampl":[9178990,9179152,9179085,9179105,9179004,9181908,9180245,9181841,9182725,9179432,9179805,9179665,9180966,9182312,9180206,9182217,9180251,9180344,9180141,9180541,9180703,9180149,9179430,9179182,9180102,9182277,9182719],"strict_all_t":[9178990],"prev":[9178990,9179352],"inserted":[9178990,9180060],"`number`":[9178990],"'wat'":[9178990],"affected":[9178990],"sec":[9178990],"sql_mod":[9178990],"'strict_all_tables'":[9178990],"1366":[9178990],"hy000":[9178990],"incorrect":[9178990],"'number'":[9178990],"1ther":[9178990],"advantag":[9178990,9179284,9179932,9182500,9179350],"choosing":[9178990,9179796],"buying":[9179743],"pref":[9179743,9180251,9179200,9179306,9180756,9180637,9179810],"aft":[9179743,9179004,9179552,9181292,9179182,9180102,9179725,9180241],"you've":[9179743,9181039,9180107,9181160,9180831,9179698,9179870],"enabled":[9179743],"half":[9179743,9180465,9179260],"dozen":[9179743],"featur":[9179743,9179004,9179932,9180095,9179665,9180032,9180966,9182217,9181453,9181201,9179156,9180102,9182674,9181727,9179860,9179605],"air":[9179743,9179260,9179632],"bag":[9179743,9180098],"seatbelt":[9179743],"author":[9179012,9179992,9180737,9179605],"unaccept":[9179012],"cli":[9179012,9179786,9179855,9182178],"choos":[9179012,9179074,9181206,9179992,9181522,9180335,9182178],"own":[9179012,9179665,9180232,9181095,9180107,9182217,9182102,9180501,9180541,9180241],"'lax'":[9179049],"instead":[9179049,9179085,9179004,9181386,9179284,9179420,9182210,9179582,9179805,9180261,9181292,9180831,9180501,9179430,9179182,9179339,9179306,9179215,9180756,9180637,9179148,9179605,9182424],"'strict'":[9179049],"mad":[9179049,9180009,9180421,9179423,9179306,9180312,9182572,9179260],"bit":[9179049,9179095,9180882,9179901,9179695,9180156,9179665,9180155,9180973,9180280,9180387,9180831,9180048,9180448,9180141,9179422,9182572,9179148,9179608,9180615],"legacy":[9179152,9181489,9180632],"immedi":[9179152],"although":[9179152,9180966,9180876,9180834,9180632],"somewhat":[9179152,9179805],"toy":[9179152,9179906],"root":[9179152,9181481],"absolut":[9179152,9179572,9180907],"term":[9179152,9179004,9179901,9179992,9179432,9180501,9180335,9179725,9182048,9182572,9180412],"find":[9179152,9179855,9179420,9181939,9180973,9180978,9180834,9179840,9179223,9182572,9179655],"troubling":[9179152],"usag":[9179152,9180541,9179712],"transaction":[9179152,9182811,9180245,9181386,9179882,9179970,9179860],"justified":[9179152,9180475],"meaningless":[9179152],"microbenchmark":[9179152],"definitely":[9179152,9180882,9182442,9179733],"expert":[9179152,9179315,9179805],"cultur":[9179152],"person/company":[9179152],"willing":[9179152,9179992],"put":[9179152,9179594,9179182,9180102,9180098,9179605,9182178],"knowledg":[9179152,9179416,9180102,9182178],"automat":[9179152],"conversion":[9179152],"damaging":[9179152],"stay":[9179152,9179313,9180261],"reach":[9179152],"level":[9179152,9179432,9182664,9179156,9180756,9180637,9182659],"relatively":[9179152,9181057,9180141],"intim":[9179152],"subtract":[9179163],"datetim":[9179163],"answ":[9179163,9179786,9179882,9179901,9182801,9180876,9180703,9179156,9179416],"within":[9179163,9182664,9179423],"ballpark":[9179163],"actu":[9179163,9181939,9180032,9180206,9180152,9180128],"diff":[9179163,9181292],"utf8":[9181489],"support":[9181489,9182811,9180245,9180009,9180060,9180251,9180344,9179416,9179306,9179493,9179215,9180756,9179860,9179094],"byt":[9181489],"charact":[9181489],"exist":[9181489,9180060,9181160,9182048,9182178],"bmp":[9181489],"you'll":[9181489,9179855,9180073,9180261,9180831,9180195,9182674,9179725,9179260,9182500,9182178],"separ":[9181489,9182217,9180251,9180141],"utf8mb4":[9181489],"assuming":[9181489,9179004],"fee":[9179548],"invalid":[9179548],"date/timestamp":[9179548],"quietly":[9179548],"0000":[9179548],"produc":[9179548,9182018,9179339,9179698,9179870],"inserting":[9179085],"limit":[9179085,9180032,9180280,9180831,9179306],"silently":[9179085],"trunc":[9179085,9179143],"timestamp":[9179085,9179143],"curr":[9179085,9180736],"thos":[9179085,9179852,9180882,9180009,9179805,9180421,9181939,9180032,9180152,9182217,9180369,9180952,9180465,9180475,9179222,9179712,9179679,9179921,9182500,9179269,9180116,9179350,9179116,9181183],"bitten":[9179085,9179786,9179901],"thread":[9179143],"6/5":[9179143],"backward":[9179143],"compatibility":[9179143,9182178],"previ":[9179143,9179095,9182816],"lif":[9179095,9180421,9180541],"lax":[9179095],"approach":[9179095,9179105,9179992,9181393,9179306,9179725],"hard":[9179095,9179105,9182811,9179852,9179420,9179992,9181939,9180966,9181292,9180978,9179423,9179698,9179870,9180102,9179183,9179200,9182719,9179260,9182178],"regular":[9179095,9179901,9181551,9179725],"basi":[9179095],"discrepanc":[9179095],"expect":[9179095,9180882,9179432,9179313,9180421,9180603,9182178],"left":[9179095],"migrating":[9179095,9179300,9181076],"toward":[9179095,9181908,9180032,9180152],"report":[9179095,9180764,9182217,9180501],"suggest":[9179095,9179855],"extremely":[9179095,9179035,9180465,9179430,9180116],"indee":[9179105],"littl":[9179105,9179582,9179552,9182664,9181939,9179665,9180251,9180831,9179182,9180102,9179712,9179725,9179608,9180615],"strict_trans_t":[9179105],"instal":[9179105],"2013":[9179105],"bundled":[9179105],"config":[9179105],"fil":[9179105,9179997,9180145,9180009,9179156],"turn":[9179105,9179582,9180831],"compiled":[9179105,9180632],"sev":[9179105,9180363,9179840,9179870,9180241],"effectively":[9179105,9179712],"making":[9179105,9179364,9179306,9179493,9180756,9179725,9179148],"only_full_group_by":[9179105],"no_engine_substitution":[9179105],"error_for_division_by_zero":[9179105],"no_zero_d":[9179105],"no_zero_in_d":[9179105],"no_auto_create_us":[9179105],"sampl":[9179105,9179756],"behav":[9179105],"7'":[9179105],"doe":[9179105,9181386,9180997,9179313,9181887,9180571,9179840,9180603,9179698,9179870,9179493,9180835,9179404,9179614,9182659],"upgrad":[9179105,9180913],"whitelist/blacklist":[9179105],"transition":[9179105],"handling":[9179004,9180876],"mongoid":[9179004,9182664],"odm":[9179004],"ruby":[9179004,9180009,9179796,9179300,9179476,9180060,9179915,9180232,9182217,9179422,9179260,9179148],"wond":[9179004,9180541,9179306,9179493,9179647],"arenâ€™t":[9179004],"bah":[9179004],"know":[9179004,9182811,9182291,9179786,9179970,9182442,9179796,9182725,9179552,9181939,9180549,9180737,9180876,9180128,9181292,9180831,9179430,9179182,9179733,9179306,9179666,9179679,9180756,9179803,9179773,9180290,9179269,9179304,9180907,9180241,9182424],"free":[9179004,9182725,9180831,9179339],"object":[9179004,9179852,9179035,9180737,9181193,9181292,9180141,9179430,9179840,9179422,9179762,9179269,9179304,9182424,9182178],"responsibility":[9179004,9181320],"managing":[9179004,9181320],"flexibility":[9179004,9181441,9179223,9182500,9180632],"wheth":[9179004,9181320,9180245,9179432,9181939,9180141,9180653],"won't":[9179004,9180245,9181686,9179364,9179992,9181141,9181939,9180736,9179404,9179803,9179655],"consistent/dur":[9179004,9179074],"cach":[9179004,9182217,9181028],"here'":[9179004,9179035,9180149,9179423],"third":[9179004],"primary":[9179004,9179572,9182048,9182178,9180840],"keep":[9179004,9182811,9180073,9179035,9181887,9180101,9180737,9180251,9180907],"entir":[9179004,9182811,9180245,9181686,9179476,9181887,9182312,9182217,9179339,9182659],"dataset":[9179004,9179074,9180245,9179906,9179350],"necessary":[9179004,9180245],"favorit":[9179004],"foursquar":[9179004,9182811],"singl":[9179004,9182811,9179432,9180363,9179339,9179725,9182500,9180139],"check":[9179004,9182811,9181441,9180245,9179906,9179997],"ev":[9179004,9179786,9180997,9181206,9179906,9179970,9180575,9181939,9179915,9180973,9179156,9179698,9179870,9179679,9179269],"absolutely":[9179004,9181386,9179855,9179582,9180465],"unnecessary":[9179004,9180335],"silly":[9179004,9179432],"old":[9179004,9181887,9181939,9181335,9179222,9179260,9179614,9182178],"in":[9179004,9180280],"archived":[9179004],"w":[9179004,9180421,9181453,9181160,9179460],"when/wher":[9179004],"checked":[9179004,9180245],"paying":[9179004],"amazon":[9179004,9179805,9179597,9182018,9180840],"box":[9179004,9180245,9180973,9179921],"chatting":[9179004],"catastroph":[9179004],"memory":[9179004,9182811,9180152,9179182],"failur":[9179004,9180245,9180882],"filled":[9179004],"gb'":[9179004],"fan":[9182811],"talking":[9182811,9180245,9179906,9179300,9180060,9182664],"dur":[9182811],"journaled":[9182811],"confirmed":[9182811],"once":[9182811,9179074,9179035,9179572,9179915,9180387,9180465,9179756,9179725,9179260,9180241],"disk":[9182811,9181386],"consist":[9182811],"distributing":[9182811],"load":[9182811,9180831,9179840],"caus":[9182811,9179906,9180703,9180116],"mass":[9182811],"understanding":[9182811,9182664,9179725,9180116],"adopting":[9182811],"tough":[9182811,9179035],"distributed":[9182811,9180139],"fit":[9182811,9180245,9180575,9180541,9179200,9179260,9180653,9182424],"kept":[9182811],"sharded":[9182811],"deploy":[9182811,9180335,9179260],"shard":[9182811],"becam":[9182811],"unbalanced":[9182811],"exceeded":[9182811],"avail":[9182811,9179416,9179870,9182023],"day":[9182811,9179855,9179901,9179997,9180009,9181939,9180549,9180465,9182424,9182178],"imposs":[9182811,9180116],"difficult":[9182811,9179035,9181095,9179182,9180116],"recov":[9182811,9179605],"tr":[9182811],"bridg":[9182811],"gap":[9182811],"originally":[9182811],"ignored":[9182811],"decad":[9182811,9181939,9180973,9179461],"research":[9182811,9179461],"developing":[9182811,9180571,9179260],"they'v":[9182811,9179552],"forced":[9182811,9180632],"adopt":[9182811],"passed":[9182811,9182312],"oracl":[9182811,9180833,9179870,9182277,9179461],"kil":[9182811],"apply":[9182811],"schemawho/what":[9181320],"'you'":[9181320],"manag":[9181320,9181441,9181939,9182527],"through":[9181320,9179594,9180280],"rdbm":[9181320,9179852,9181305,9181686,9180156,9182500],"guess":[9181320,9180307,9181039,9180973,9180501,9179422,9179698,9179870,9179803],"ensur":[9181441,9180251],"adh":[9181441],"called":[9181441,9181908,9182788],"scor":[9181441],"":[9181441,9179182],"array":[9181441,9182659],"throw":[9181441,9179364,9179932,9179582,9182424],"unless":[9181441,9179074,9181393,9179698,9179870,9180632],"yourself":[9181441,9179901,9180913,9180152,9180831,9179430,9182659],"unified":[9181441],"access":[9181441,9180831,9180907,9180840],"must":[9181441,9179460,9182500,9180907],"someon":[9181441,9181141,9180737,9180501,9179725],"weren't":[9181441,9179074],"looking":[9181441,9182788,9181076,9179915,9181393,9179248,9182023,9179679,9180632,9182424],"yet":[9181441,9180245,9179852,9179594,9179035,9180095,9180141,9179885,9182178,9180553],"gain":[9181441,9181939,9180831,9179269],"possibly":[9181441,9179074,9180541],"spac":[9181441,9179074,9182659],"saving":[9181441,9182572],"storing":[9181441,9180098,9182424,9182659],"cel":[9181441],"solely":[9181908],"rdbms'":[9181908],"optim":[9181908,9180421,9182312,9180952,9180831,9179222,9180102,9179183,9182048,9182500],"bitmap":[9181908],"addition":[9181908,9181386,9179946,9181628,9180831,9179350],"automatically":[9181908,9181076,9182217],"compress":[9181908],"certain":[9181908,9179665],"overflow":[9181908],"secondary":[9181908,9182178],"toast":[9181908],"compressed":[9181908],"figured":[9182291,9179756],"600gb":[9179074],"60gb":[9179074],"matt":[9179074,9179901,9179997,9179805,9181939,9180251,9180141,9182674,9180653],"accessing":[9179074],"ssd":[9179074],"during":[9179074],"four":[9179074],"we'v":[9179074,9179476,9179572],"front":[9179074,9182178],"caused":[9179074],"misconfigur":[9179074],"our":[9179074,9179284,9179476,9179035,9179572,9179805,9180421,9180907,9180840],"allowed":[9179074],"pulled":[9179074],"replica":[9179074,9181386,9180139],"ran":[9179074],"logging":[9179074],"rot":[9179074],"setup":[9179074,9179476,9181835,9180335,9180139],"gen":[9179074,9180833,9179306,9179493,9182659],"failov":[9179074,9182178],"primar":[9179074],"onlin":[9179074],"blessing":[9179074],"curs":[9179074],"alt":[9179074,9179597,9182018],"built":[9179074,9180831,9179156,9179339,9182277,9179215,9179304,9182178],"again":[9179074,9179855,9180060,9179552,9180465,9179423,9179269],"ssd'":[9180245],"aren't":[9180245,9180335,9179148,9182178],"today":[9180245,9180048,9182048],"agre":[9180245],"saying":[9180245,9180737],"tot":[9180245,9179156],"pay":[9180245,9182587,9179182],"hardwar":[9180245],"cap":[9180245],"holding":[9180245],"surprised":[9180245],"able":[9180245,9179946,9179432,9179313,9179915,9180973,9180141,9179339,9180907],"last":[9180245,9179040,9180571,9182527,9180737],"simply":[9180245,9180095,9182664,9181141,9181939,9180116],"handl":[9180245,9181206,9182664,9181321,9182277,9181028,9179605,9180241,9182424],"failing":[9180245,9179339],"miserably":[9180245],"durability":[9180245],"coming":[9180245,9179725,9180653,9180840],"fsync":[9180245],"writing":[9180245,9181386,9179901,9179582,9179597,9180184,9182312,9180831,9180465,9181057,9179182,9179756,9179339,9182048,9182572,9179575,9180632,9181640,9182424,9182178],"test":[9180245,9179035,9181887,9181939,9179182,9179756,9179725],"rapidly":[9180245,9179432],"pul":[9180245,9180009],"plug":[9180245],"it'll":[9180245,9180421],"told":[9180245],"wrot":[9180245,9180221,9179260,9179304],"checkpoint":[9180245],"succeeded":[9180245],"nod":[9180245,9181386],"clust":[9180245,9180139],"machinery":[9180245],"generally":[9180245,9180973,9180448,9179762,9179260,9179860],"testing":[9180245],"atomically":[9180245],"verify":[9180245,9180603],"exclud":[9180245],"money":[9180245,9181386,9179460,9179810],"doubl":[9180245],"spending":[9180245,9182442],"fair":[9181386],"failed":[9181386,9182816,9181939],"rely":[9181386],"multipl":[9181386,9180261,9181095,9180876,9181522,9179762,9179339,9182178],"truth":[9181386],"suit":[9181386],"everyon":[9181386,9180421],"bend":[9181386],"mysql/postgr":[9181386],"ask":[9179786,9181686,9180009],"registr":[9179786,9181206],"form":[9179786,9179901,9181292,9180465,9182500,9180653,9180840],"host":[9179786,9179493],"defined":[9179786,9182664,9182500,9180241],"shema":[9179786],"nam":[9179786,9182816,9182664,9181095,9180142,9179182,9182048,9182719,9180211,9182659],"email":[9179786,9182527],"address":[9179786,9182217],"stuff":[9179786,9180997,9179936,9179970,9180831,9179840,9180102,9180098,9179404,9179803,9182572,9179260,9180637],"rdm":[9179786,9180997],"specif":[9179786,9180997,9182587,9182217],"custom":[9179786,9179313,9179805,9180314,9180280,9181393,9179840,9182048],"key/valu":[9179786],"useless":[9179786,9179901],"silv":[9179786,9179901],"bullet":[9179786,9179901,9180335],"throwing":[9179786,9179901,9180973],"significantly":[9179946,9179870],"limited":[9179946,9179870],"datastor":[9179946,9181628],"truly":[9179946,9181939],"inform":[9179946,9180009,9180141,9179712],"wanted":[9179946,9179420,9179870,9179666],"insid":[9179946,9180973,9179156,9182659],"otherwis":[9179946,9179840,9179422,9180637],"redi":[9179946,9180703],"expir":[9179946],"datastructur":[9179946,9179430],"infinit":[9181206],"preferred":[9181206,9180632],"food":[9181206],"bree":[9181206],"dog":[9181206],"hug":[9181206,9179315,9180141,9182048,9180241,9182178],"practic":[9181206,9179315,9180206,9180232,9180102,9180756],"hash":[9181206],"attribut":[9181206,9179284,9180060,9180241],"amazing":[9179852,9179901],"storag":[9179852,9179882,9179901,9179997,9179284,9179035,9179712,9179885],"foundationdb":[9179852],"look":[9179852,9179932,9182725,9180764,9180876,9181292,9180344,9181057,9179460,9179430,9179248,9179339,9180476,9179306,9179493,9182023,9179835,9182572,9182424,9182178],"haven't":[9179852,9179906,9180095,9181887,9179339,9179493,9182023,9182178,9180553],"appear":[9179852,9181057],"bjson":[9179852,9179906],"exact":[9179852],"engin":[9179852,9180501,9179712,9180736,9182048],"horizontally":[9179852,9180312],"typically":[9179852,9180009,9180756,9179260],"highly":[9179852,9182587],"awesom":[9179906,9182664,9181671],"reply":[9179906],"barely":[9179906,9180907],"rang":[9179906,9180032,9180149],"draw":[9179906],"attend":[9179906],"we'r":[9179906,9179560,9180907],"combo":[9179906],"same/related":[9179906],"building":[9179906,9179997,9182664,9180232,9180363,9182527,9180155,9179835],"rail":[9179906,9179695,9179035,9180095,9180913,9179684,9182500,9180569,9181727,9182178],"vari":[9179906,9182801,9181393,9181160,9180831,9179215,9180756,9182719],"act":[9179906,9180653],"persist":[9179906,9179594],"grow":[9182587,9179284],"attention":[9182587],"cassandra":[9182587],"prematurely":[9182587,9182500],"metr":[9182587,9179122],"vertically":[9182587],"tackl":[9182587],"learning":[9179855,9180737,9180833,9180128,9179416,9179423,9180290],"curv":[9179855,9180128],"loved":[9179855],"seminar":[9179855],"speak":[9179855,9182725,9180966,9180737,9179725,9180653],"yea":[9179936,9179997],"pros/con":[9180073],"technolog":[9180073,9182664,9179086,9181939,9179148,9180139],"solv":[9180073,9181393,9179921],"decid":[9180073,9182500],"whatev":[9180073,9179915,9182312,9180831,9180142,9182023,9180736],"goe":[9180073,9179423,9182500,9180907],"backup":[9180073,9179805,9182178],"worst":[9180073,9180286],"restor":[9180073,9182178],"kind":[9180073,9181305,9181939,9179665,9180032,9180966,9181835,9180152,9181095,9180737,9181453,9181393,9180149,9179870,9179921,9179725,9179803,9182500,9180632,9180907],"industry":[9180073,9181141,9181939,9179260,9179885],"anyway":[9180073,9179932,9180206,9180549,9180261,9182048,9179260,9180907],"rarely":[9179882,9182178],"prototyp":[9179882],"boilerpl":[9179882,9180280,9179575,9181640],"overhead":[9179882,9179560,9179182,9179712,9180241],"postgresql'":[9179882,9179997,9179932,9180412],"realistically":[9179970],"traff":[9179970],"factor":[9179970,9181551],"exactly":[9179970,9180156,9181939,9180032,9180128,9180387,9180831,9181522,9180834,9179870,9179493,9182500],"matching":[9179970,9180290],"setting":[9179970,9182702,9182312,9180241],"putting":[9180882],"sid":[9180882,9181305,9179035,9179572,9179560],"tol":[9180882],"loss":[9180882,9179222],"scenario":[9180882],"tradeoff":[9180882,9180831,9182500],"plan":[9180882,9179364,9179932,9179582,9180549,9180952,9179752,9180335],"accordingly":[9180882],"repl":[9182702,9180840],"availability":[9182702],"l":[9182702,9179182],"rapid":[9179901,9179284,9179582],"weakly":[9179901],"dynamically":[9179901,9179594,9181939,9180032,9181481,9182312,9180152,9180048,9180149],"typed":[9179901,9179594,9180009,9181939,9180764],"door":[9179901],"short":[9179901,9179992,9179725,9182572],"/dev/nul":[9179901],"wrong":[9179901,9181686,9180831,9179835,9182572,9182500],"refused":[9179901],"compil":[9179901,9179423,9179182,9182572,9180632,9180907],"twenty":[9179901],"pushing":[9179901,9180421],"forc":[9179901,9180009,9180221,9180448,9179666],"taxing":[9179901],"mentally":[9179901],"secondly":[9179901],"enforc":[9179901,9180195,9182674,9180756,9180241],"dirty":[9179901,9182572],"pgsql'":[9179901],"norm":[9179901,9179840,9182659],"flat":[9179997,9180145,9179339],"complicating":[9179997],"lol":[9179997],"sqlit":[9180145],"n":[9180145,9180831,9180756],"eye":[9181841,9180966],"practically":[9181841,9179420],"fel":[9181841],"`title`":[9180307,9182788],"`post_title`":[9180307,9182788],"adjust":[9180307],"whos":[9182788],"titl":[9182788,9182664,9180032,9180101,9180369,9180128,9180973,9180286,9180831,9179605],"designed":[9182816,9180703,9179430,9179306,9179493,9179236,9182500,9179269],"post":[9179284,9179420,9179932,9179992,9182725,9181076,9180831,9180335,9182178],"reflect":[9179284,9179420,9179932],"techn":[9179284,9179594,9179796,9179364,9179992,9179725],"narr":[9179284],"tradition":[9179284,9180102,9180756,9182500],"importantly":[9179284],"indict":[9179284],"highlight":[9179284],"ease":[9179284],"iter":[9179284],"slap":[9179284],"tables/collection":[9179284],"constantly":[9179284],"updating":[9179284,9179695,9180567,9179597,9182018],"direction":[9179284,9180966,9180876],"shift":[9179284,9179182,9179921],"thu":[9179284,9180549],"perfect":[9179284],"early":[9179284,9179992,9182572,9182500,9182424],"cours":[9179284,9181939,9180344,9180703,9179182,9179835],"wart":[9179284],"hacking":[9179284],"drawback":[9179284],"concern":[9179284,9182217],"naturally":[9179284,9179313],"almost":[9179284,9181887,9180973,9180724,9180465,9182023,9179260,9180241],"ready":[9179284],"switch":[9179284,9180632],"cor":[9179284],"functionality":[9179284,9179594,9180335],"spend":[9179420,9179594,9179582,9181939,9180314,9181162,9180737,9179269],"minut":[9179420,9180801,9179594,9182442,9181939,9180363,9182178],"designing":[9179420,9180801,9179223],"month":[9179420,9180801,9179932,9179560,9180421,9180840],"inventing":[9179420],"wheel":[9179420,9180501],"lazy":[9179420,9179665,9181551],"cry":[9179420,9179086,9179248,9179773],"'lazy'":[9179420],"subject":[9179420],"library":[9179420,9180060,9180232,9180152,9181467,9182102,9180541,9179430,9179470,9181028,9180290],"what'":[9179420,9179182],"excus":[9179420,9179594,9182210,9179870,9182500],"design":[9179695,9179364,9181939,9179156,9179430,9179840,9179870,9180102,9179260,9182500],"understating":[9180567],"cost":[9180567,9181305,9179870,9180335,9182048],"referring":[9181305],"_think_":[9181305],"seriously":[9181305,9180221,9179460,9179182],"underst":[9181305],"mostly":[9181686,9179313,9180831,9179725],"explain":[9181686,9179183,9179684,9181028],"explicitly":[9181686],"complet":[9181686,9180541],"detail":[9181686,9179582,9179423],"propos":[9181686,9181040,9181160],"consolid":[9181686,9179870],"existing":[9181686,9179343],"introducing":[9181686],"paradox":[9181686],"inconsistenc":[9181686],"word":[9181686,9181939],"dynam":[9179594,9180009,9181714,9182312,9180876,9180251,9180280,9180141,9179156,9179260,9179608],"couldn't":[9179594,9179666],"declaring":[9179594],"everywher":[9179594,9179156],"robust":[9179594,9182178],"remain":[9179594],"mock":[9179594],"stag":[9179594,9179992],"playing":[9179594,9181887],"persisted":[9179594],"shap":[9179594,9180840],"discovering":[9179594,9179086,9182500],"frankly":[9179594],"nuis":[9179594],"wish":[9179594,9182048,9182178],"ceremony":[9179594],"glueing":[9179594],"given":[9182210,9180141],"sound":[9182210,9179932,9180060,9179315,9181141,9179712,9180907],"amateur":[9182210],"pragmat":[9182210],"architect":[9182210,9179404],"import":[9180009,9179432,9182664,9180107,9179840,9179260],"reflected":[9180009],"lov":[9180009,9179423,9179666],"swear":[9180009],"seri":[9180009,9179476,9179805,9179698,9179870,9179306,9179493,9179712,9180756],"glad":[9180009,9182664],"analogy":[9180009],"script":[9180009,9179476,9180335,9182424,9182178],"crap":[9180009,9182312,9180476,9179260],"excel":[9180009,9180421,9180632],"play":[9180009,9181292,9179840],"framework":[9180009,9181939,9180221,9180344,9179182,9179248,9179339,9180102],"nightmar":[9180009,9180541],"sheet":[9180009],"construct":[9180009,9180831,9180653],"request":[9180009],"smart":[9180009,9181393],"decision":[9180009,9179215],"corollar":[9180009],"clear":[9180009,9182664,9179156],"grandpar":[9180009],"combin":[9180009,9180032,9180966,9181835],"eag":[9180009],"relat":[9180009],"employ":[9180009],"schem":[9180009,9182719],"relationship":[9180009,9179182,9182424],"manually":[9180009,9180221],"ironically":[9180009],"hey":[9180009],"librar":[9180009,9180261,9180290],"person":[9180009,9180421,9180973,9180501],"opinion":[9180009],"class":[9180009,9181887,9180149,9179339,9182023,9180569],"citizen":[9180009],"best":[9180009,9179315,9181939,9180149,9179156,9179725,9180670],"containing":[9180009],"mainten":[9182442,9179712,9182178],"debt":[9179796,9179992,9179725],"hour":[9179796,9182312,9179605,9181183],"extra":[9179796,9180363,9180549,9182527,9180221,9180973,9179339,9180756,9179304,9181640,9179148,9182178],"worth":[9179796,9179035,9180048,9179460],"avoid":[9179796,9180101,9180973,9180465,9180048,9182178],"week":[9179796,9181939],"road":[9179796,9180107,9180541,9179223],"unlikely":[9179476],"relying":[9179476],"shouldn't":[9179364],"outset":[9179364],"budgeting":[9179364],"knowingly":[9179364],"compromis":[9179364],"quot":[9179932],"fred":[9179932],"brook":[9179932],"book":[9179932],"myth":[9179932],"man":[9179932,9179460],"author'":[9179932,9179992,9179597],"granted":[9179932,9180831],"entirety":[9179932],"entirely":[9179932,9179035,9181939,9179712],"wag":[9179932],"refactoring":[9179932,9180107,9180737],"ahead":[9179932,9182424],"tried":[9179992,9181939,9180966,9182023,9179404,9179810],"rewrot":[9179992],"budget":[9179992],"rewrit":[9179992],"futur":[9179992,9179035,9182500],"replying":[9179992],"advoc":[9179992],"techniqu":[9179992],"planned":[9179992,9179870],"plu":[9179992,9180060],"unplanned":[9179992],"main":[9179992,9179572,9179560,9179182],"mongodb'":[9179992],"awkward":[9179992],"ide":[9179992,9180107,9180737,9180833,9180344],"missed":[9182725,9181160,9179840],"pgsql":[9182725],"'because'":[9182725],"resulted":[9182725],"intract":[9182725],"'how":[9182725],"us'":[9182725],"necessarily":[9179432,9180101,9179803],"sc":[9179432],"maintainability":[9179432],"developed":[9179432],"specul":[9179432,9180973],"saa":[9179432],"trad":[9179432,9180973],"intern":[9179582,9179572],"interfac":[9179582,9180956,9179035,9181039,9181095,9180737,9180387,9180501,9180102,9182048],"shitty":[9179582],"hyperlinear":[9179582],"fussing":[9179582],"progress":[9179582,9182424],"screwed":[9179582],"corollary":[9180956],"explained":[9181076],"finding":[9181076,9180290],"effect":[9181076,9182500],"resulting":[9181076,9180465],"torodb":[9181076],"compat":[9181076,9182018,9179840],"identifying":[9181076],"created":[9181076,9181939],"migrated":[9181076,9179572],"disclaim":[9181076],"sequel":[9179035,9179572,9180095,9179086,9179665,9179915,9180206,9180261,9182102,9180448,9179156,9179416,9179430,9179422,9180603,9179493],"considering":[9179035],"tightly":[9179035],"coupled":[9179035],"weâ€™r":[9179035],"modern":[9179035],"nothing":[9179035,9180060,9181887,9181939,9180387,9181160,9179156,9180907],"tied":[9179035,9179712],"anymor":[9179035,9181095,9179870],"dependenc":[9179035,9180221],"activemodel":[9179035],"conform":[9179035],"piecem":[9179035],"coverag":[9179035],"rec":[9179035,9180421],"min":[9179035],"switched":[9179035,9179572,9180670],"remembered":[9179035],"limiting":[9179035],"capabilit":[9179035],"keeping":[9179035,9180101],"indexing":[9179035],"completely":[9179572,9180421,9179343,9182500,9179269,9182178],"joy":[9179572,9179430],"composit":[9179572],"evaluated":[9180095,9179647],"depth":[9180095],"releasing":[9180095],"bunch":[9180095,9182312,9180475,9179339,9179215],"upcoming":[9180095],"upgrading":[9180095],"wait":[9180095,9179597,9180363,9179614],"_also_":[9180095],"latest":[9180913],"releas":[9180913],"talk":[9180060,9179313,9180737,9180286],"shared":[9180060],"wrap":[9180060,9180290,9180632],"servic":[9180060,9182178,9179879],"architectur":[9180060,9179712],"composition":[9180060,9180901],"checking":[9180060,9179182],"property":[9180060],"solved":[9180060,9180184,9180973,9179712,9179404],"fak":[9180060],"assigned":[9180060],"wrapped":[9180060],"loving":[9179040,9179182],"prematur":[9179552],"announc":[9179552],"victory":[9179552],"delivered":[9179552],"shiny":[9179552,9181939,9179725,9182500],"suffici":[9179552],"next":[9179552,9180603,9179725],"round":[9179552,9181939],"excited":[9179552],"crappy":[9179552,9181671,9179248],"entr":[9179560],"10gb":[9179560],"reactivemongo":[9179560],"fear":[9179560],"trying":[9179560,9181939,9181095,9181522,9179182],"reactivepostgr":[9179560],"sp":[9179313,9181939],"decided":[9179313],"bottom":[9179313,9180465],"human":[9179313,9181292],"engineering":[9179313,9179423,9179803],"mgmt":[9179313],"normalized":[9179313],"'us":[9179313],"name'":[9179313],"join":[9179313,9181887,9182312,9180101,9180831,9179182,9180835,9182277,9182048,9181640,9182178],"variety":[9179313],"cross":[9179313],"cutting":[9179313],"eventually":[9179313,9179430],"fight":[9179313],"concept":[9179315,9182664,9179423,9179803,9180290],"technology":[9179315,9180421,9181141,9181939,9179870,9180476,9179712,9180653,9179605,9182178],"task":[9179315],"asid":[9179315,9180107],"redesigning":[9179315],"schema/model":[9179315],"backup/restor":[9179315],"hir":[9179315,9179805],"educated":[9179805],"ourselv":[9179805],"step":[9179805,9181887,9182048,9182178],"rough":[9179805],"benchmark":[9179805,9181239],"behaved":[9179805],"compared":[9179805,9179870],"followed":[9179805],"mainly":[9179805,9179698,9179870,9179860],"discussing":[9179805],"workload":[9179805,9182048],"backup/restoring":[9179805],"handled":[9179805,9181467],"rd":[9179805,9179597,9182018,9182178,9180840],"backed":[9179805,9180966],"publish":[9181239],"related":[9179832,9180107,9179840,9179182,9179260,9181727],"titled":[9179832],"enforcing":[9181628],"awhil":[9181887],"format":[9181887,9181714,9182033],"clev":[9181887],"involved":[9181887,9179870,9181028],"seen":[9181887,9181939,9180737,9179156,9179306,9179712,9179679,9179725,9179269],"among":[9181887],"badg":[9181887],"hon":[9181887],"longest":[9181887],"inevitably":[9181887],"troubl":[9181887],"figuring":[9181887,9179269],"debug":[9181887,9181453,9180973,9179752,9182178],"isol":[9181887,9181039],"program":[9181887,9180141,9180653],"abus":[9181887],"admittedly":[9181887],"skil":[9181887],"scratching":[9181887],"wondering":[9181887],"themselv":[9181887,9181939],"tel":[9181887,9180831],"misbehav":[9181887],"asking":[9181887,9180032,9180152,9180724],"myself":[9181887,9180831,9181057],"if/els":[9182664],"block":[9182664],"sever":[9182664],"funda":[9182664,9182424],"`post":[9182664],"renam":[9182664],"post_titl":[9182664],"nitpick":[9182664],"credibility":[9182664],"reporting":[9182664],"growing":[9182664],"merit":[9182664,9180703],"pleas":[9182664,9182312],"grasping":[9182664],"already":[9182664,9179665,9180737,9180973,9180475,9179148,9179608,9180241,9182178],"assertion":[9179597],"modif":[9179597,9182018],"locked":[9179597],"until":[9179597,9179665,9180448,9181201,9179712],"completed":[9179597],"specify":[9179597,9182018],"algorithm=inplac":[9179597,9182018],"lock=non":[9179597,9182018],"blocking":[9179597,9182018],"clarif":[9182018],"lock":[9182018],"preventing":[9182018],"guessing":[9182018,9179698],"basing":[9180156],"arbitrary":[9180156,9182312,9181453],"greying":[9179086,9180421,9179712],"amused":[9179086],"'old'":[9179086],"advic":[9179086,9179215],"young":[9179086,9180421,9181939,9180541,9179725,9179810],"drinking":[9179086],"newtech":[9179086,9179223,9179725],"koolaid":[9179086,9179223,9179725],"star":[9179086,9181292,9179460],"lit":[9179086,9179665,9181835],"select":[9179086,9181835,9180549,9182527,9180128,9181193,9181292,9180973,9180286,9180142,9179182,9179339,9180102,9179835,9182719,9179304],"local":[9179086],"select_append":[9179086,9181292],"count":[9179086,9181292,9180142,9182048,9182719,9182178],"sum":[9179086,9181292,9182048],"percentag":[9179086,9181292],"desc":[9179086,9180966,9180280],"wrapping":[9179086,9179430,9180632],"developerth":[9180421],"mark":[9180421],"fact":[9180421,9181939,9180363,9182500,9179773,9179094,9182424],"society":[9180421],"extrem":[9180421,9182069],"aspect":[9180421],"polit":[9180421],"religi":[9180421],"grew":[9180421],"und":[9180421,9179870,9180653],"top":[9180421,9179156],"redoing":[9180421],"six":[9180421],"sub":[9180421,9181467,9180831,9180102],"accept":[9180421,9179762],"proud":[9180571],"cobol":[9181141,9181500],"ibm":[9181141,9179870],"mainfram":[9181141],"improv":[9181141,9181939,9180206,9181551,9179725,9182572],"get":[9181141,9181939,9182217],"embrac":[9181141,9181939],"surv":[9181141,9181939],"occasionally":[9181939],"widely":[9181939],"accepted":[9181939],"particularly":[9181939,9182217,9179156],"experienced":[9181939],"challenged":[9181939],"evid":[9181939,9179215],"known":[9181939],"signific":[9181939,9179260],"pro":[9181939],"con":[9181939],"belief":[9181939],"faith":[9181939],"blind":[9181939],"trust":[9181939,9181095,9180476],"dogma":[9181939],"rhetor":[9181939],"hear":[9181939],"pe":[9181939],"oop":[9181939],"pattern":[9181939,9180541,9179725],"uml":[9181939],"trip":[9181939],"tdd":[9181939],"invented":[9181939,9180261],"popularised":[9181939],"artifici":[9181939],"preceding":[9181939],"item":[9181939],"faceti":[9181939],"kidding":[9181939,9179116],"googl":[9181939],"advocacy":[9181939],"justify":[9181939,9180541,9182500],"talked":[9181939],"supposedly":[9181939,9179655],"mention":[9181939],"agil":[9181939],"craftsmanship":[9181939],"tested":[9181939,9180973],"bizarr":[9181939],"eight":[9181939],"adv":[9181939],"initially":[9181939],"hyped":[9181939],"stand":[9181939,9182424],"crit":[9181939],"bubbl":[9181939],"predicted":[9181939],"wanting":[9179665],"write/understand":[9179665],"required":[9179665,9180966,9179725,9182659],"composability":[9179665,9180465,9181551,9181057,9180141,9180703,9179306,9180569],"concatention":[9179665],"builder/templ":[9179665],"query'":[9179665],"syntax":[9179665,9182033,9181393,9180831,9180901,9180141,9179182,9179422,9179200,9180476,9179306,9179493,9179304,9179608],"wis":[9179665,9179339],"strik":[9179665,9179915,9179269],"nic":[9179665,9180344,9179248,9179339],"bal":[9179665,9179915,9180387,9180831,9182500,9179269],"particular":[9179665,9180107,9179430,9179339,9179870,9182023,9182719],"gav":[9179665],"sup":[9179665,9179156],"composed/r":[9179665],"concat":[9179665],"ignor":[9179665,9181095,9181551,9179870],"dammit":[9179915],"intricac":[9179915],"trivi":[9179915,9182312,9181292,9180141],"cte":[9179915],"function":[9179915,9180032,9180184,9180232,9180152,9180737,9180369,9181551,9179470,9180756,9179304,9180653],"composibility":[9179915,9180107],"depart":[9179915,9179803],"let'":[9180032],"screen":[9180032],"filtering":[9180032],"upc":[9180032,9180101,9180549],"filt":[9180032,9180831,9180149,9182048,9179350],"min/max":[9180032],"pric":[9180032,9180101,9180369,9180128,9180973,9181123,9180831],"pagin":[9180032,9180141],"p":[9180032,9180241],"pag":[9180032,9180286,9182500,9179605],"offset":[9180032,9180280,9180831],"input":[9180032,9180184,9181095,9180128,9180142,9180048,9179200],"hardcod":[9180032],"permut":[9180032],"advanced":[9180032,9180966,9179182],"edit":[9180032,9180966,9180261,9180107,9182217,9181321,9179460,9182424],"pointed":[9180032,9180152,9180141],"implying":[9180032,9180152],"assembled":[9180032,9180152],"paramet":[9180032,9180966,9182312,9180152,9180261,9180369,9180149,9179470,9179835],"runtim":[9180032,9180152,9180048,9180102,9180632,9182659],"pass":[9180032,9182801,9180152,9179304,9179350],"rejigg":[9180032,9180152],"frag":[9180032,9180152,9181292,9181453,9180475,9181551],"hoc":[9180032,9180152,9180261,9180335,9182500,9180632],"implement":[9180032,9181160,9182719],"injection":[9180032,9180261,9182217,9180251,9180724,9181040,9181393,9180142,9179236,9179352,9180632,9180907],"vulnerabilit":[9180032],"relev":[9180032,9182047],"argu":[9180184,9180973,9179423,9179430,9180312,9179236,9180632],"specifically":[9180966],"bound":[9180966,9180261],"redund":[9180966],"deserv":[9180966],"horror":[9180966,9180286,9180831],"item_id":[9180966],"item_num":[9180966],"nvl":[9180966],"9999999999":[9180966],"item_d":[9180966],"'01":[9180966],"jan":[9180966],"1900'":[9180966],"'31":[9180966],"dec":[9180966,9180465,9180756],"4712'":[9180966],"item_nam":[9180966],"'num'":[9180966],"'date'":[9180966],"suppos":[9180966,9182572],"parameter":[9180966],"ascending":[9180966],"descending":[9180966,9179762],"dupl":[9180966,9180241],"claus":[9180966,9182312,9180101,9180261,9181095,9181292,9181393,9180831,9179182,9179304],"bind":[9180966],"asc":[9180966,9180280],"const":[9180966],"yuck":[9180966],"advocating":[9180966],"pointing":[9180966],"abused":[9180966],"surprising":[9180966],"corn":[9180966,9179430],"pl/pgsql":[9181481],"_and_":[9181481],"safely":[9181481,9181714,9179306,9179493],"concaten":[9181481,9181835,9180206,9180152,9180107,9180724,9181040,9180048,9180149,9179430],"`case`":[9181481],"`with`":[9181481],"`lateral`":[9181481],"`select`":[9181481],"`with`/`lateral`":[9181481],"reus":[9181481,9180048,9180448,9181522,9179423,9179182],"constructing":[9181714],"'tab'":[9181835],"'name'":[9181835],"'mo":[9181835],"'id'":[9181835,9182033],"nesting":[9182033,9181393,9179870,9182659],"execut":[9182033,9180876,9180280,9180831,9180142,9179156,9179835],"'select":[9182033,9180101],"tab":[9182033],"'wher":[9182033,9179200],"null'":[9182033],"adhoc":[9182312],"tsql":[9182312],"occurr":[9182312],"condition":[9182312,9180973],"sarg":[9182312],"unperform":[9182312],"~20":[9182312],"rest":[9182312,9181039],"grok":[9182312],"togeth":[9182312,9180831,9182048],"trick":[9182312],"remov":[9182312],"mssql":[9182312],"de":[9180784,9180978,9181640,9182424],"track":[9180101,9179460],"products'":[9180101],"arg":[9180101],"append":[9180101,9179304],"and'":[9180101],"where'":[9180101],"price_min":[9180101],"price_max":[9180101],"impuls":[9180206],"reduc":[9180232,9182659],"readability":[9180232,9180632],"benefit":[9180232,9179712,9180756],"includ":[9180232,9180369,9180211],"strategy":[9180232,9181028],"downsid":[9180314,9179182,9179698],"maintaing":[9180314],"debugging":[9180314],"reused":[9180363],"therefor":[9180363],"worthwhil":[9180363],"handy":[9180363],"packag":[9180363],"maintain":[9180363],"estimating":[9181162],"centr":[9180549,9179182],"sav":[9180549,9179712,9180335,9181640],"worry":[9180549],"execution":[9180549],"comma":[9182527,9181671],"aggreg":[9182527,9179698],"forward":[9181671,9180241,9182424],"edge":[9181671,9181640],"ending":[9181671,9180541],"assembl":[9180152,9180907],"regardless":[9180152],"fancy":[9180152,9180387,9179712],"dsl":[9180152,9180261,9181095],"ast":[9180152],"rolled":[9180152],"logically":[9180221],"troubleshoot":[9180221],"except":[9180221,9180737,9182500],"consol":[9180221,9180764,9180603],"hmm":[9180764],"datalog":[9180764],"lisp":[9180764],"binary":[9180764,9179712,9180756],"protocol":[9180764,9182277],"prefixed":[9180764],"length":[9180764,9182424],"whatnot":[9180764],"analyst":[9180764],"print":[9180764],"dot":[9180764],"matrix":[9180764],"mail":[9180764],"headquart":[9180764],"combined":[9181500],"rdmb":[9181039],"somehow":[9181039],"wording":[9181039],"manipul":[9181039,9180107,9180737,9180831,9179422],"retriev":[9181039],"performed":[9181039],"somewher":[9181039],"excepting":[9181039],"disregarding":[9180261],"irrelev":[9180261],"combinatorially":[9180261],"explod":[9180261],"escaping":[9180261,9180128,9181292,9181393,9179870],"guard":[9180261],"clos":[9180261,9180251,9180831,9179430,9179306],"sem":[9180261],"dealing":[9181095,9180737,9180465,9180756,9182424],"you'd":[9181095,9180831,9179803],"figur":[9181095,9181453],"differenti":[9181095],"nonsens":[9181095,9180541],"origin":[9181095],"don":[9180155,9180048,9180703,9179339,9179698,9179870,9179306,9179493,9182719],"understood":[9180155],"remarkably":[9180155],"formulated":[9180107],"reasonably":[9180107],"fac":[9180107],"irony":[9180107],"tooling":[9180107],"dev":[9180107,9180335],"distracted":[9180107],"ide/editor":[9180107],"essentially":[9180107,9180737,9180973,9180280],"editing":[9180107,9180737,9182217],"macro":[9180107,9180737,9182719],"focu":[9180107,9180737,9179725],"hel":[9180107,9180973,9180831],"editor":[9180737,9182217],"emac":[9180737,9180833],"makefil":[9180737],"obviou":[9180737,9180703],"imped":[9180737],"mismatch":[9180737],"via":[9180737,9181292,9179339],"command":[9180737,9181028],"argue":[9180737,9180141,9179223,9180335,9180290],"preci":[9180737],"mess":[9180737],"arguing":[9180737],"circl":[9180737,9179666],"evil":[9180833],"configured":[9180833],"vim":[9180833,9180603],"iirc":[9180833],"ddl":[9180833],"established":[9180833],"mind":[9181335,9180703,9182048],"notic":[9181335],"yearish":[9181335],"intellij":[9182217],"plugin":[9182217],"0xdbe":[9182217],"existed":[9182217],"completion":[9182217],"quick":[9182217],"speci":[9182217],"idea'":[9182217],"contained":[9182217],"java":[9182217,9182277],"analyz":[9182217],"fly":[9182217],"concatenated":[9182217],"window":[9182217],"placed":[9182217],"fond":[9180819,9179423],"sqitch":[9180819,9181321],"pgtap":[9180819,9181321],"domain":[9181321],"pok":[9181321],"btw":[9181321,9179156,9180241],"_titl":[9180369],"_minpric":[9180369],"_maxpric":[9180369],"ineffici":[9180952,9180831],"mediocr":[9180952],"criteria":[9180952],"messy":[9180876,9182178],"changed":[9180876],"ordering":[9180876,9179350],"basically":[9180876,9181522,9180102],"{title}":[9180128,9180286],"deliberately":[9180128],"shuffled":[9180128],"anyon":[9180128,9179306,9179122],"showing":[9181193],"mapp":[9181193],"ood":[9181193],"view":[9181193,9181551,9182500],"parsing":[9181193,9181292,9182048],"determin":[9181193,9181292],"loading":[9181193,9181292,9180831],"thembecaus":[9181292],"inf":[9181292],"returned":[9181292],"cit":[9181292],"immort":[9181292],"larry":[9181292,9179461],"wal":[9181292],"comput":[9181292,9180141],"paid":[9181292,9179416],"intellig":[9181292,9181160],"latt":[9181292],"complicated":[9181292],"gl":[9181292],"seemingly":[9181292],"ungodly":[9181292],"frustrating":[9181292],"tri":[9181292],"pars":[9181453,9182048],"dialect":[9181453,9180736,9182277],"skip":[9181453],"sending":[9181453],"tree":[9181453,9180102,9182048,9179608],"micro":[9181467],"differently":[9181467],"describing":[9180710,9180831],"abstraction":[9180710,9181160,9180141,9179156,9179423,9179575],"knex":[9180710],"conveni":[9180710,9179430,9180335,9179304],"promis":[9180710],"oriented":[9180710],"raw":[9180710,9181160,9180831,9180501,9179156,9179423,9179222,9179422,9179756,9179306,9179269,9179350,9179148],"snippet":[9180710,9179422,9179493],"blah":[9180973],"boo":[9180973],"title}":[9180973],"siz":[9180973,9180241],"despis":[9180973],"orm'":[9180973],"black":[9180973,9179921],"sql/databas":[9180973],"optimized":[9180973,9180465],"documented":[9180973,9181727],"nobody":[9180973],"convinc":[9180973],"solving":[9180973],"hazard":[9180973],"enthusiasm":[9180973],"properly":[9180973,9179835],"daily":[9180973],"mybati":[9180251,9180286],"minim":[9180251,9179269,9180632],"aim":[9180251],"responding":[9180251],"moe":[9180251],"below":[9180251],"tast":[9180251,9179156],"_outside_":[9180251],"additionally":[9180251],"unlik":[9180251],"worthy":[9180251],"mybatisdo":[9180286],"outlined":[9180286,9180703],"abov":[9180286,9180344,9182719],"begin":[9180286],"blog":[9180286,9179404,9180335],"â€˜activeâ€™":[9180286],"mixed":[9180286],"proprietary":[9180286],"soup":[9180286],"combining":[9180286,9181393],"rid":[9180791],"python":[9180280,9180387,9180831,9180501,9182023],"sqlalchemy":[9180280,9180387,9180831,9180501],"session":[9180280,9180831],"limit_v":[9180280],"offset_v":[9180280],"tricky":[9180280],"noob":[9180280],"alchemy":[9180280],"decorating":[9180280],"boiled":[9180280],"sort_typ":[9180280],"sort_reverse_const":[9180280],"sort_obj":[9180280],"order_by":[9180280],"instanti":[9180280],"retrieve_db_object":[9180280],"table_nam":[9180280],"thisal":[9180387],"proposed":[9180387],"permanently":[9180387],"document":[9180387,9182719],"pip":[9180387,9179870],"dream":[9180387],"chain":[9180387,9180831,9180448],"wrapp":[9180387,9180831,9179236,9180632],"protection":[9180724],"whatsoev":[9180724],"vulner":[9181040,9181393],"mockup":[9181393],"interpol":[9181393],"foo":[9181393,9179835],"bar":[9181393],"likewis":[9181393],"and/or":[9181393,9181640],"compromising":[9181393],"simplicity":[9181393],"pseudocod":[9181160],"hypothet":[9181160],"copy":[9181160,9181522,9180603],"price_rang":[9181160,9180831],"unescaped":[9181160],"utterly":[9181160],"ability":[9180831,9179223,9182500,9182178],"foreign":[9180831],"optimis":[9180831],"strateg":[9180831],"cring":[9180831],"totally":[9180831,9179156],"added":[9180831,9182277],"syntact":[9180831],"sugar":[9180831],"loc":[9180831,9180335],"implicitly":[9180831],"verbos":[9180831,9182048],"lte":[9180831],"drilling":[9180831],"suppli":[9180831],"contract":[9180831],"rubbish":[9180831],"joinedload":[9180831],"'supplier'":[9180831],"subqueryload":[9180831],"'contracts'":[9180831],"anchor":[9180831],"boat":[9180831],"sens":[9180831,9180141,9180312,9181796],"felt":[9180831],"intrins":[9180831],"microsoft'":[9180344,9179870],"entity":[9180344,9179182,9179248,9179870,9180102],"linq":[9180344,9180149,9180102,9180632,9180637],"hom":[9180344],"trivially":[9180344],"sprintf":[9180142],"filter_valu":[9180142],"portion":[9180142],"connector":[9180142],"direct":[9180142,9179200],"natively":[9180901],"inherit":[9180901],"navig":[9180901],"justif":[9180465],"favour":[9180465],"fiddl":[9180465],"satisf":[9180465,9179860],"vast":[9180465],"majority":[9180465,9180541],"covered":[9180465],"favourit":[9180465],"tiny":[9180465],"plain":[9180465],"joining":[9180465],"compos":[9180475,9179422,9179306,9179493,9182048,9179304],"bigg":[9180475,9179733],"parameterized":[9181551,9179801,9179470,9179352],"valued":[9181551],"incredibly":[9181057],"purely":[9181057,9179156],"declar":[9181057],"literally":[9181057,9179423],"daunting":[9181057],"r/python":[9181057],"background":[9181057],"hypothesi":[9181057],"difficulty":[9181057],"dplyr/panda":[9181057],"crowd":[9181057],"det":[9181057],"scientist":[9181057],"composing":[9180048,9180141,9180149,9179306,9179493],"upon":[9180048,9180149,9179343],"prop":[9180048,9182178],"dataset'":[9180448],"evalu":[9180448],"pasting":[9181522],"equ":[9181522],"dry":[9180501],"portability":[9180501],"underlying":[9180501,9179182,9179222,9179870],"styl":[9180501,9179870,9179200,9180335],"involv":[9180501],"meta":[9180501],"enjoy":[9180501],"reinventing":[9180501],"trusting":[9180501],"elsewher":[9180141],"leap":[9180141],"object/function":[9180141],"sorting":[9180141],"programmat":[9180141],"ass":[9180541,9180703],"enthusiast":[9180541],"challenging":[9180541,9179803],"obviously":[9180541],"tank":[9180541],"destroyed":[9180541],"enem":[9180541],"shooting":[9180541],"destroying":[9180541],"rebuild":[9180541],"garag":[9180541],"sql'":[9180703,9179404],"backlash":[9180703],"hamm":[9180703],"wielded":[9180703],"pound":[9180703],"screw":[9180703],"turned":[9180703],"inappropri":[9180703],"theoret":[9180703],"dealt":[9180703],"datom":[9180703],"similarly":[9180703],"healthy":[9180703],"mix":[9180703,9179725],"memcach":[9180703],"biggest":[9180978,9179222],"challeng":[9180978],"simplest":[9180978],"represented":[9180149],"ent":[9180149],"iquery":[9180149,9180102],"enumer":[9180149],"maxvalu":[9180149],"asquery":[9180149],"userfilt":[9180149],"bool":[9180149],"evensonly":[9180149,9180834],"minimum":[9180149,9180834],"maximum":[9180149,9180834],"ienumer":[9180149,9180834,9180102],"currentpag":[9180149],"pages":[9180149],"var":[9180149],"hasvalu":[9180149,9180834],"unfortunately":[9181201,9179725,9180934],"fyi":[9180834],"emit":[9180834],"pleasing":[9180834],"nit":[9180834],"imo":[9179156,9180603],"egregi":[9179156],"handwritten":[9179156],"loaded":[9179156],"monstrosity":[9179156],"posted":[9179156],"cleanly":[9179156],"query/rel":[9179156],"art":[9179156],"honest":[9179156],"impecc":[9179156],"ruby'":[9179156],"exot":[9179156,9180835],"deployed":[9179156],"youre":[9179156],"pop":[9179156],"jeremy":[9179416],"incred":[9179416],"premium":[9179416],"stop":[9179416,9179423,9180195,9179725],"irc":[9179416],"channel":[9179416],"he'l":[9179416],"hero":[9179460],"owe":[9179460],"him":[9179460],"brewery":[9179460,9180881],"drink":[9179460],"github":[9179460],"1821":[9179460],"zero":[9179460],"offici":[9179460],"bug":[9179460,9180632],"662":[9179460],"closed":[9179460],"arrang":[9179460],"sighnot":[9179423],"popping":[9179423],"assembly":[9179423,9182572],"hating":[9179423],"principl":[9179423],"hierarchy":[9179423],"facet":[9179423],"grown":[9179423],"safety":[9179423],"coding":[9179423,9180907],"achiev":[9179423],"rehashing":[9179430],"sibling":[9179430],"ought":[9179430],"replac":[9179430,9182500],"treat":[9179430,9179921],"regretting":[9179430],"wishing":[9179430],"desir":[9179430,9182500],"sequ":[9179430],"tupl":[9179430],"nicely":[9179840],"workflow":[9179840],"perl":[9179840],"rosedb":[9179840],"they'd":[9179840],"capability":[9179840],"occasion":[9179840],"reinv":[9179182,9179269],"hit":[9179182],"visu":[9179182,9179870,9180102],"studio":[9179182,9179870],"maintaining":[9179182,9179222,9182178],"codebas":[9179182,9180335],"mucking":[9179182],"intellisens":[9179182],"muddy":[9179182],"mixing":[9179182],"/ef'":[9179182],"brief":[9179182],"clean":[9179182,9179632],"country":[9179182],"brilli":[9179182],"stood":[9179182],"spit":[9179182,9179698,9179870],"age":[9179182,9182048],"flaw":[9179182],"compon":[9179182],"algebra":[9179182],"admit":[9179182,9180476],"ideologically":[9179182],"beauti":[9179182],"slowly":[9179733],"'throw":[9179222],"stuff'":[9179222],"miss":[9179222],"gon":[9179222],"embedded":[9179422,9182277],"surely":[9179422],"extract":[9179422],"reified":[9179422],"concatenating":[9179422,9179835],"floating":[9179422],"carry":[9179756],"yep":[9180603],"output":[9180603,9179870],"generated":[9180603,9179752,9179921],"psql":[9180603,9180139],"creating":[9180603],"inlin":[9179801],"security'":[9179801],"sak":[9179801],"horr":[9179248],"generating":[9179248,9182048],"directly":[9179752,9181028],"projection":[9179762],"avoiding":[9179762],"deep":[9179762],"yield":[9179762,9180632],"produced":[9179339],"legitimately":[9179339],"grasp":[9179339,9179404],"abusing":[9179339],"training/knowledg":[9179339],"annot":[9179339],"initialis":[9179339],"shoving":[9179339],"nested":[9179698,9179870,9180412,9182659],"crack":[9179698,9179870],"suff":[9179698,9179870,9180102,9180632,9180907],"holy":[9179698,9179870],"die":[9179698,9179870],"john'":[9179698],"convoluted":[9179698,9179870],"upsid":[9179698],"licensing":[9179870],"merg":[9179870],"expertis":[9179870],"claimed":[9179870],"including":[9179870,9179655],"11g":[9179870],"integrated":[9179870,9180102],"provid":[9179870,9182719,9180632],"formul":[9179870],"seeing":[9179870,9179810],"excess":[9179870],"examin":[9179870],"layout":[9179870],"edmx":[9179870],"modelling":[9179870],"suck":[9179870],"hood":[9179870],"clausei":[9180102],"confusing":[9180102],"extend":[9180102],"expression":[9180102,9179493,9182023,9182048],"expos":[9180102,9182048],"queryprovid":[9180102],"nhibern":[9180102],"bltoolkit":[9180102],"entityframework":[9180102],"featured":[9180102],"heavy":[9180102],"encourag":[9180102],"bang":[9180102],"buck":[9180102],"compet":[9180102],"churn":[9179343,9182500],"relied":[9179343],"axe":[9179343],"hid":[9179183],"dump":[9179684],"sincerely":[9179200],"chos":[9180476],"civilized":[9179470],"frequently":[9179306],"frustrated":[9179306],"readily":[9179306,9179493],"noticed":[9179493],"sqlalchemy'":[9179493,9182023],"reif":[9179493],"can/should":[9179493],"tripped":[9182023],"glancing":[9182023],"rich":[9180835],"mapping":[9180835,9179269],"likecursor":[9179835],"tbl":[9179835],"long_obtuse_column_name=":[9179835],"statu":[9179835],"foo=query":[9179835],"status='open'":[9179835],"escaped":[9179835],"drop":[9179835,9181640],"audit":[9179835],"included":[9180126],"trusted":[9180098],"effici":[9180098,9180907],"lead":[9179712],"motivated":[9179712],"bureaucracy":[9179712],"shortcut":[9179712],"dictionary":[9179712],"bureaucrat":[9179712],"blob":[9179712,9180241],"who'd":[9179790],"univers":[9180736],"relearn":[9180736],"teiid":[9182277],"transl":[9182277,9182719],"bonu":[9182277],"jdbc":[9182277],"kit":[9182277],"standalon":[9182277],"emul":[9182277],"odbc":[9182277],"`psql`":[9182277],"connect":[9182277],"dominated":[9179461],"ellison":[9179461],"pap":[9179461],"formed":[9179461],"nearing":[9179461],"billionair":[9179461],"oracle'":[9180312],"aggress":[9180312],"expansion":[9180312],"hammering":[9180312],"moved":[9180312],"lak":[9180312],"scaled":[9180312],"casssandra":[9180312],"would'v":[9180312],"beast":[9179215],"nosql/newsql":[9179215],"adapt":[9179215,9179725],"harping":[9179215],"guid":[9179215],"modifying":[9179223,9180241],"'screw":[9179404],"vic":[9179404],"versa":[9179404],"concret":[9179666],"squar":[9179666],"peg":[9179666],"unstructured":[9179921,9182659],"markup":[9179921],"application'":[9182674],"leaving":[9180756],"possibility":[9180756,9179236],"couchdb":[9180756],"suited":[9180756],"trac":[9180335],"ston":[9180335],"decentralized":[9180335],"fashion":[9180335,9179260],"needing":[9180335],"goodby":[9180335],"could/should":[9180335],"he'":[9179725],"driving":[9179725],"jumped":[9179725],"bandwagon":[9179725],"drank":[9179725],"repeated":[9179725],"fresh":[9179725,9179260],"burned":[9179725],"twic":[9179725],"comp":[9179725],"sci":[9179725,9182178],"grad":[9179725],"syllabus":[9179725],"semest":[9179725],"beginning":[9179725],"colleg":[9179725,9179803],"introduction":[9179725],"amongst":[9179725],"heck":[9179725],"brok":[9179725],"teach":[9179725],"voc":[9179803],"school":[9179803],"confl":[9182048],"interact":[9182048,9180569],"pita":[9182048],"processing":[9182048],"sql2011":[9182048],"uniformly":[9182048],"versu":[9182048,9182572],"gi":[9182048],"expand":[9182048],"interacting":[9182048],"ala":[9182048],"group_aggreg":[9182048],"user_id":[9182048],"customer_id":[9182048],"machin":[9182048],"transform":[9182048],"operations/expression":[9182048],"chicken":[9182719],"extension":[9182719],"ssql":[9182719],"familiar":[9182719,9180615],"egg":[9182719],"flavor":[9182719],"conveyed":[9182719],"col":[9182719],"actor":[9182719],"rol":[9182719],"actor_id":[9182719],"sexpr":[9182719],"expressed":[9182719],"scheme/lisp":[9182719],"hierarch":[9182719],"eleg":[9182719],"organ":[9182719],"elimin":[9179236],"sproc":[9179352,9180637],"scan":[9181028],"hidden":[9181028],"wikipedia":[9181028],"replicated":[9181028],"cop":[9181028],"ngnix":[9181028],"drawn":[9182572],"suspect":[9182572],"boost":[9182572,9180569],"productivity":[9182572],"scratch":[9182572],"disassembl":[9182572],"ton":[9182572,9179575],"errmmm":[9182572],"asm":[9182572],"drov":[9179260],"adoption":[9179260],"javascript":[9179260],"clunky":[9179260],"clustered":[9179260],"breath":[9179260],"ship":[9179260],"mvp":[9179260],"operating":[9179260,9182178],"priorit":[9179260],"agility":[9179260,9182424],"pivot":[9179260,9182500],"rip":[9179260],"apart":[9179260,9182659],"explicit":[9179260],"el":[9179260],"product/market":[9179260],"startupistan":[9179260,9180211],"hedg":[9182500],"uncertainty":[9182500],"slightly":[9182500],"mud":[9182500],"chuck":[9182500],"normalize/denorm":[9182500],"materi":[9182500],"unforeseen":[9182500],"ration":[9182500],"kid":[9182500],"marketing":[9182500],"ignorantly":[9182500],"viscerally":[9182500],"appealing":[9182500],"beyond":[9182500],"queryability":[9182500],"reasonableâ€”if":[9182500],"lucky":[9182500],"presumably":[9182500],"resourc":[9182500],"infrastructur":[9182500],"clue":[9182500],"bottleneck":[9182500],"silicon":[9179885,9180211],"valley":[9179885,9180211],"wid":[9180211],"diaspora":[9180211],"hackerdom":[9180211],"saw":[9180290],"touched":[9180290,9180241],"protecting":[9180290],"integrating":[9180290],"90":[9179269],"poorly":[9179269,9181727],"jooq":[9179269],"sql/typed":[9179269],"heavyweight":[9179269],"ramp":[9179269],"`negate`":[9180569],"arel":[9180569,9181727,9179148,9179608,9180615],"composabiliy":[9180569],"where_valu":[9180934],"priv":[9180934],"unoffici":[9180934],"stability":[9180934],"neglecting":[9181727],"greatest":[9181727],"assur":[9179304],"whoev":[9179304,9179605],"smashing":[9179304],"'where'":[9179304],"cov":[9179575],"better/wors":[9180116],"mysql/postgresql":[9180116],"misunderstanding":[9180116],"catch":[9180632],"placehold":[9180632],"dash":[9180632],"willingly":[9180632],"2002":[9180632],"crafted":[9180632],"mainstream":[9180632],"sucked":[9180632],"fix":[9180632,9182424],"dapp":[9180637],"wrapperpretty":[9180907],"guidelin":[9180907],"team":[9180907,9180241,9182424],"law":[9180907],"paramaterized":[9180907],"substitution":[9180907],"virtually":[9180907],"proc":[9180907],"tuning":[9180907],"fiddling":[9180907],"'caus":[9180907],"preferring":[9179614],"dang":[9179614],"gosh":[9179116],"sorta":[9179116],"disagr":[9179116],"monkey":[9179116],"improving":[9181640],"immin":[9180653],"death":[9180653],"stuck":[9180653],"pasc":[9180653],"endless":[9180653],"deb":[9180653],"identify":[9180653],"winn":[9180653],"community":[9180653],"people'":[9180653],"educ":[9179148],"strictly":[9179608],"disingenu":[9179608,9180615],"knew":[9179608,9180615],"manipulating":[9179608],"furth":[9179608],"alreadyno":[9180615],"genuin":[9180615],"deeply":[9180615],"eai":[9179860],"indexesit":[9179860],"bigt":[9179860],"section":[9179605],"blam":[9179605],"page_titl":[9179605],"corrupt":[9179605],"database/datastor":[9179605],"overlap":[9180241],"intrinsically":[9180241],"accumul":[9180241],"deprecated":[9180241],"natur":[9180241,9182178],"lab":[9180241],"stud":[9180241],"cheesy":[9180241],"k/v":[9180241],"mundan":[9180241],"metadata":[9180241],"caching":[9180241],"med":[9180241],"imaging":[9180241],"showed":[9180241],"colleagu":[9180241],"3000":[9180241],"hundred":[9180241],"serialized":[9180241],"tiring":[9179094],"me":[9179094],"contrary":[9179094],"suggesting":[9179655],"wiredtig":[9179655],"we'l":[9179655],"weird":[9182424],"liked":[9182424],"damn":[9182424],"matured":[9182424],"worr":[9182424],"schema/t":[9182424],"constraint":[9182424],"screwing":[9182424],"wast":[9182424],"1000'":[9182424],"mast":[9182424,9180139],"python/perl/ruby":[9182424],"inconsistency":[9182424],"typo":[9182424],"facepalm":[9179868],"outlin":[9182178],"deploying":[9182178],"dynamodb":[9182178],"write/test/run":[9182178],"accomplish":[9182178],"review":[9182178],"luck":[9182178],"authorit":[9182178],"serving":[9182178],"blobby":[9182178],"rpc":[9182178],"administr":[9182178],"history":[9182178],"toolset":[9182178],"behind":[9182178],"meaning":[9182178],"impact":[9182178],"tun":[9182178],"db":[9182178],"transf":[9182178],"mileag":[9182178],"vary":[9182178],"postgressql":[9182178],"interested":[9182178],"slav":[9180139],"posit":[9180139],"secondar":[9180840],"arbit":[9180840],"primarymost":[9180840],"cut":[9180840],"besid":[9180840],"diving":[9179632],"cesspit":[9179632],"appreci":[9179632],"recogn":[9179122],"screenshot":[9179122],"relic'":[9179879],"apm":[9179879],"jsonb":[9180412,9180553,9180670],"selects/insert":[9180412],"afraid":[9180553],"fal":[9182659],"winning":[9182659],"briefly":[9179810],"bet":[9179810],"proven":[9179810],"excusing":[9181183],"+10mil":[9181183],"newt":[9181183],"oldt":[9181183]},"TotalComments":308}